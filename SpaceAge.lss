
SpaceAge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000def0  0000dff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000def0  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f06  00800120  00800120  0000e020  2**5
                  ALLOC
  3 .debug_aranges 000006d8  00000000  00000000  0000e008  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001f35  00000000  00000000  0000e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000077b8  00000000  00000000  00010615  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3e  00000000  00000000  00017dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000058ad  00000000  00000000  00018a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b80  00000000  00000000  0001e2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000027cd  00000000  00000000  0001ee38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004064  00000000  00000000  00021605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000828  00000000  00000000  00025670  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 74 41 	jmp	0x82e8	; 0x82e8 <__ctors_end>
	absoluteTime=0;


}

void RestartSong(){
       4:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
			}
		}
	#endif

	
	void MapSprite(unsigned char startSprite,const char *map){
       8:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
//extern u8 *vram;

u8 TileRead(u8 x,u8 y)
{
	return(vram[x+VRAM_TILES_H*y]);	//-~(RAM_TILES_COUNT-1));
}
       c:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      10:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      14:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      18:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      1c:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      20:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      24:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      28:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      2c:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      30:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      34:	0c 94 a6 43 	jmp	0x874c	; 0x874c <__vector_13>
      38:	0c 94 e6 43 	jmp	0x87cc	; 0x87cc <__vector_14>
      3c:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      40:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      44:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      48:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      4c:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      50:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      54:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      58:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      5c:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      60:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      64:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      68:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>
      6c:	0c 94 ec 41 	jmp	0x83d8	; 0x83d8 <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	72 47 75 47 47 4b 6c 48 64 48 7e 47 83 47 88 47     rGuGGKlHdH~G.G.G
      ce:	55 48 8b 47 8e 47 91 47 d5 47                       UH.G.G.G.G

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <a0_logo_smap>:
      e4:	0e 06 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 00     ................
      f4:	00 0d 02 0e 0f 10 11 07 07 12 0a 02 00 00 00 13     ................
     104:	02 14 15 16 00 17 18 19 1a 02 0c 00 00 00 00 00     ................
     114:	1b 07 1c 1d 0a 0b 17 1e 00 00 00 00 00 1f 20 07     .............. .
     124:	07 21 0a 02 22 00 00 00 00 00 00 23 24 17 25 26     .!.."......#$.%&
     134:	1a 02 17 00 00 00                                   ......

0000013a <a1_charset_smap>:
     13a:	10 04 00 27 28 29 2a 2b 2c 2d 2e 2f 30 31 32 33     ...'()*+,-./0123
     14a:	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 40 41 42 43     456789:;<=>?@ABC
     15a:	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53     DEFGHIJKLMNOPQRS
     16a:	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f 60 61 62 63     TUVWXYZ[\]^_`abc
     17a:	64 65                                               de

0000017c <a1_fader_smap>:
     17c:	08 01 66 67 68 69 6a 6b 6c 6d                       ..fghijklm

00000186 <bar_green_smap>:
     186:	01 01 6e                                            ..n

00000189 <bar_red_smap>:
     189:	01 01 6f                                            ..o

0000018c <blank_smap>:
     18c:	02 02 00 00 00 00                                   ......

00000192 <block_die_00_smap>:
     192:	02 02 70 71 72 73                                   ..pqrs

00000198 <block_die_01_smap>:
     198:	02 02 74 75 76 77                                   ..tuvw

0000019e <block_die_02_smap>:
     19e:	02 02 78 79 7a 7b                                   ..xyz{

000001a4 <block_die_03_smap>:
     1a4:	02 02 7c 7d 7e 7f                                   ..|}~.

000001aa <block_g_smap>:
     1aa:	02 02 80 81 82 83                                   ......

000001b0 <block_supa_green_smap>:
     1b0:	02 02 84 85 86 87                                   ......

000001b6 <block_supa_magenta_smap>:
     1b6:	02 02 88 89 8a 8b                                   ......

000001bc <border_c1_smap>:
     1bc:	01 01 8c                                            ...

000001bf <border_c2_smap>:
     1bf:	01 01 8d                                            ...

000001c2 <border_c3_smap>:
     1c2:	01 01 8e                                            ...

000001c5 <border_c4_smap>:
     1c5:	01 01 8f                                            ...

000001c8 <border_side_smap>:
     1c8:	01 01 90                                            ...

000001cb <border_top_smap>:
     1cb:	01 01 91                                            ...

000001ce <bullet_down_00_smap>:
     1ce:	01 01 92                                            ...

000001d1 <bullet_down_01_smap>:
     1d1:	01 01 93                                            ...

000001d4 <bullet_down_02_smap>:
     1d4:	01 01 94                                            ...

000001d7 <bullet_down_03_smap>:
     1d7:	01 01 95                                            ...

000001da <bullet_down_04_smap>:
     1da:	01 01 96                                            ...

000001dd <bullet_down_05_smap>:
     1dd:	01 01 97                                            ...

000001e0 <bullet_down_06_smap>:
     1e0:	01 01 98                                            ...

000001e3 <bullet_down_07_smap>:
     1e3:	01 01 99                                            ...

000001e6 <bullet_right_00_smap>:
     1e6:	01 01 9a                                            ...

000001e9 <bullet_right_01_smap>:
     1e9:	01 01 9b                                            ...

000001ec <bullet_right_02_smap>:
     1ec:	01 01 9c                                            ...

000001ef <bullet_right_03_smap>:
     1ef:	01 01 95                                            ...

000001f2 <bullet_right_04_smap>:
     1f2:	01 01 9d                                            ...

000001f5 <bullet_right_05_smap>:
     1f5:	01 01 9e                                            ...

000001f8 <bullet_right_06_smap>:
     1f8:	01 01 9f                                            ...

000001fb <bullet_right_07_smap>:
     1fb:	01 01 a0                                            ...

000001fe <floor_tile_a_smap>:
     1fe:	02 02 a1 a2 a3 a4                                   ......

00000204 <floor_tile_b_smap>:
     204:	02 02 a5 a6 a7 a8                                   ......

0000020a <floor_tile_c_smap>:
     20a:	02 02 a9 aa ab ac                                   ......

00000210 <floor_tile_d_smap>:
     210:	02 02 ad ae af b0                                   ......

00000216 <floor_tile_d_x_smap>:
     216:	02 02 ae ad b0 af                                   ......

0000021c <floor_tile_d_y_smap>:
     21c:	02 02 af b0 ad ae                                   ......

00000222 <floor_tile_f_smap>:
     222:	02 02 b1 b2 b3 b4                                   ......

00000228 <magnet_down_00_smap>:
     228:	02 02 b5 b6 b7 b8                                   ......

0000022e <magnet_down_01_smap>:
     22e:	02 02 b9 ba bb bc                                   ......

00000234 <magnet_down_02_smap>:
     234:	02 02 bd be bf c0                                   ......

0000023a <magnet_down_03_smap>:
     23a:	02 02 c1 b6 c2 c3                                   ......

00000240 <magnet_down_04_smap>:
     240:	02 02 c4 c5 c6 c7                                   ......

00000246 <magnet_down_05_smap>:
     246:	02 02 c8 c9 af ca                                   ......

0000024c <magnet_down_06_smap>:
     24c:	02 02 cb cc cd ce                                   ......

00000252 <magnet_down_07_smap>:
     252:	02 02 ad cf d0 d1                                   ......

00000258 <oxygen_smap>:
     258:	02 02 d2 d3 d4 d5                                   ......

0000025e <star_00_smap>:
     25e:	01 01 d6                                            ...

00000261 <star_01_smap>:
     261:	01 01 d7                                            ...

00000264 <star_02_smap>:
     264:	01 01 d8                                            ...

00000267 <star_03_smap>:
     267:	01 01 d9                                            ...

0000026a <star_04_smap>:
     26a:	01 01 da                                            ...

0000026d <star_05_smap>:
     26d:	01 01 db                                            ...

00000270 <star_06_smap>:
     270:	01 01 dc                                            ...

00000273 <star_07_smap>:
     273:	01 01 dd                                            ...

00000276 <ts_data>:
	...
     2ba:	00 00 3f 3f 00 00 00 00 00 3f 3f 3f 00 00 00 00     ..??.....???....
     2ca:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     2da:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     2ea:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f     ????....????????
     2fa:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     30a:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00     ????????????....
	...
     336:	3f 3f 00 00 00 00 3f 3f 3f 3f 3f 00 00 00 3f 3f     ??....?????...??
     346:	3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f     ????..??????..??
     356:	3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f     ????..??????..??
     366:	00 00 00 00 00 00 3f 3f 00 00 00 00 00 00 3f 3f     ......??......??
     376:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     386:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 3f 3f     ?????????????.??
     396:	3f 3f 3f 3f 00 00 00 3f 3f 3f 00 00 00 00 00 00     ????...???......
	...
     3ae:	3f 3f 00 00 00 00 00 00 3f 3f 00 00 00 00 00 00     ??......??......
     3be:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 3f 00 00 00     ????....?????...
     3ce:	3f 3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f 00 00 00     ?????...?????...
     3de:	00 3f 3f 3f 3f 00 00 00 00 00 00 3f 3f 00 00 00     .????......??...
     3ee:	00 3f 3f 3f 3f 00 00 00 00 00 00 3f 3f 3f 3f 3f     .????......?????
     3fe:	00 00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f     ...?????..??????
     40e:	00 00 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 00 00     ..??????.?????..
     41e:	00 3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f 00 00 00     .????...?????...
     42e:	3f 3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 00 00 00 00     ?????...????....
     43e:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     44e:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     45e:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     46e:	3f 3f 3f 3f 00 00 00 00 00 00 00 00 3f 3f 3f 3f     ????........????
     47e:	00 00 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 3f     ..??????.???????
     48e:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00     ????????????....
     49e:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     4ae:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 3f 00 00 00     ????....?????...
     4be:	3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f 3f 00     ??????..???????.
     4ce:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f     ????????....????
     4de:	00 00 00 00 3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f     ....????....????
	...
     4fa:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     50a:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     51a:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     52a:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f     ????....????????
     53a:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     54a:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00     ??????????????..
     55a:	00 00 00 00 3f 3f 00 00 00 00 00 00 3f 3f 00 00     ....??......??..
     56a:	00 00 00 00 3f 3f 00 00 00 00 00 00 3f 3f 3f 00     ....??......???.
     57a:	00 00 00 00 3f 3f 3f 00 00 00 00 00 3f 3f 3f 00     ....???.....???.
     58a:	00 00 00 00 3f 3f 3f 00 00 00 00 00 00 00 00 00     ....???.........
	...
     5ba:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     5ca:	00 3f 3f 3f 00 00 00 00 00 00 3f 3f 00 00 00 00     .???......??....
	...
     5ea:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 3f 3f 00 00     ????....??????..
     5fa:	00 00 3f 3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f 3f     ..?????...??????
     60a:	00 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f     ..??????..??????
     61a:	00 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f     ..??????..??????
     62a:	00 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f     ..??????..??????
     63a:	00 00 00 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f     ...??????.??????
     64a:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00     ??????????????..
     65a:	00 00 00 00 3f 3f 00 00 00 00 00 00 3f 3f 00 00     ....??......??..
     66a:	00 00 00 00 3f 3f 00 00 00 00 00 00 3f 3f 3f 3f     ....??......????
     67a:	3f 00 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f     ?..??????..?????
     68a:	00 00 3f 3f 3f 3f 00 00 00 00 3f 3f 00 00 00 00     ..????....??....
     69a:	00 3f 3f 3f 00 00 00 00 00 3f 3f 3f 00 00 00 00     .???.....???....
     6aa:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f     ????....????????
     6ba:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     6ca:	3f 3f 3f 3f 3f 3f 3f 00 00 00 00 00 3f 3f 00 00     ???????.....??..
     6da:	00 00 00 00 3f 3f 00 00 00 00 00 00 3f 00 00 00     ....??......?...
     6ea:	00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00 00     ....?...........
	...
     722:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     732:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     742:	3f 3f 3f 3f 00 00 00 00 00 3f 3f 3f 00 00 00 00     ????.....???....
     752:	00 00 3f 3f 00 00 00 00 00 00 00 00 00 00 00 00     ..??............
	...
     776:	3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f     ????..??????..??
     786:	3f 3f 3f 00 00 00 3f 3f 3f 3f 00 00 00 00 3f 3f     ???...????....??
	...
     7b6:	3f 3f 00 00 00 00 00 00 3f 3f 00 00 00 00 00 00     ??......??......
     7c6:	3f 3f 00 00 00 00 00 00 3f 3f 00 00 00 00 00 00     ??......??......
	...
     7f6:	00 00 00 3f 3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f     ...?????...?????
     806:	00 00 3f 3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f 00     ..?????...?????.
	...
     836:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     846:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
	...
     876:	3f 3f 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 3f     ????????.???????
     886:	00 00 3f 3f 3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f     ..??????....????
	...
     8b6:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     8c6:	3f 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 00 00     ???????.??????..
	...
     8fa:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
     90a:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
	...
     93a:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 3f     ????....????...?
     94a:	3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f 00 00 3f 3f     ????...?????..??
     95a:	3f 3f 00 00 00 00 3f 3f 3f 00 00 00 00 3f 3f 3f     ??....???....???
     96a:	3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00 00 00 00     ?....????.......
     97a:	3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f 00 00 3f 3f     ????...?????..??
     98a:	3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????.???????????
     99a:	00 00 00 00 3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f     ....????....????
     9aa:	00 00 00 00 3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f     ....????....????
     9ba:	3f 3f 00 00 3f 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f     ??..???????.????
     9ca:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00     ????????????....
     9da:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 00     ????....????....
	...
     9f6:	00 00 3f 3f 3f 3f 00 00 00 3f 00 00 00 00 3f 00     ..????...?....?.
     a06:	3f 00 00 3f 3f 00 00 3f 3f 00 3f 00 00 00 00 3f     ?..??..??.?....?
     a16:	3f 00 3f 00 00 00 00 3f 3f 00 00 3f 3f 00 00 3f     ?.?....??..??..?
     a26:	00 3f 00 00 00 00 3f 00 00 00 3f 3f 3f 3f 00 00     .?....?...????..
	...
     a4a:	00 00 00 3f 00 00 00 00 00 00 00 3f 00 00 00 00     ...?.......?....
     a5a:	00 00 3f 3f 00 00 00 00 00 00 3f 3f 00 00 00 00     ..??......??....
     a6a:	00 3f 3f 3f 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f     .???.....???????
     a7a:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     a8a:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00 3f 3f 3f 00     ????????....???.
     a9a:	00 00 00 00 3f 3f 3f 00 00 00 00 00 3f 3f 00 00     ....???.....??..
     aaa:	00 00 00 00 3f 3f 00 00 00 00 00 00 00 00 00 00     ....??..........
     aba:	00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ....????????????
     aca:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00     ????????????....
     ada:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 3f     ????....????...?
     aea:	3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f 3f 00 00 00     ????..???????...
     afa:	00 00 00 00 3f 00 00 00 00 00 00 00 3f 00 00 00     ....?.......?...
     b0a:	00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00 00     ....?...........
	...
     b3a:	3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f 00 00 00 3f     ????....????...?
     b4a:	3f 3f 3f 3f 00 00 00 3f 3f 3f 3f 3f 00 00 00 00     ????...?????....
	...
     b76:	3f 00 00 00 00 00 00 00 3f 00 00 00 00 00 00 00     ?.......?.......
	...
     bb6:	00 3f 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f     .???????..??????
     bc6:	00 00 00 3f 3f 3f 3f 3f 00 00 00 00 3f 3f 3f 3f     ...?????....????
	...
     bf6:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     c06:	3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f     ????.??????..???
	...
     c3e:	00 00 00 f9 00 00 00 00 00 00 00 b2 00 00 00 00     ................
     c4e:	00 00 00 b3 00 00 00 00 00 00 00 6c 00 00 00 00     ...........l....
	...
     c66:	00 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00     ...&............
	...
     c7e:	00 00 f9 00 00 f9 00 00 00 00 b2 00 00 b2 00 00     ................
	...
     cbe:	00 00 f9 00 00 f9 00 00 00 b2 b2 b2 b2 b2 b2 00     ................
     cce:	00 00 b3 00 00 b3 00 00 00 00 6c 00 00 6c 00 00     ..........l..l..
     cde:	00 6d 6d 6d 6d 6d 6d 00 00 00 26 00 00 26 00 00     .mmmmmm...&..&..
	...
     d02:	f9 00 00 00 00 00 b2 b2 b2 b2 b2 00 00 00 b3 00     ................
     d12:	b3 00 00 00 00 00 6c 6c 6c 6c 6c 00 00 00 00 00     ......lllll.....
     d22:	6d 00 6d 00 00 00 26 26 26 26 26 00 00 00 00 00     m.m...&&&&&.....
     d32:	27 00 00 00 00 00 00 00 00 00 00 00 00 f9 f9 00     '...............
     d42:	00 00 f9 00 00 b2 b2 00 00 b2 00 00 00 00 00 00     ................
     d52:	b3 00 00 00 00 00 00 6c 00 00 00 00 00 00 6d 00     .......l......m.
     d62:	00 6d 6d 00 00 26 00 00 00 26 26 00 00 00 00 00     .mm..&...&&.....
	...
     d7e:	00 00 00 f9 00 00 00 00 00 00 b2 00 b2 00 00 00     ................
     d8e:	00 00 00 b3 00 00 00 00 00 00 6c 00 6c 00 6c 00     ..........l.l.l.
     d9e:	00 6d 00 00 00 6d 00 00 00 00 26 26 26 00 26 00     .m...m....&&&.&.
	...
     dc2:	f9 00 00 00 00 00 00 b2 00 00 00 00 00 00 00 00     ................
	...
     e02:	f9 f9 f9 00 00 00 00 00 b2 00 00 00 00 00 00 00     ................
     e12:	b3 00 00 00 00 00 00 00 6c 6c 00 00 00 00 00 00     ........ll......
     e22:	6d 6d 00 00 00 00 00 00 26 26 26 00 00 00 00 00     mm......&&&.....
	...
     e3e:	00 f9 f9 f9 00 00 00 00 00 00 00 b2 00 00 00 00     ................
     e4e:	00 00 00 b3 00 00 00 00 00 00 6c 6c 00 00 00 00     ..........ll....
     e5e:	00 00 6d 6d 00 00 00 00 00 26 26 26 00 00 00 00     ..mm.....&&&....
	...
     e86:	00 00 00 b2 00 b2 00 00 00 00 00 00 b3 00 00 00     ................
     e96:	00 00 6c 6c 6c 6c 6c 00 00 00 00 00 6d 00 00 00     ..lllll.....m...
     ea6:	00 00 00 26 00 26 00 00 00 00 00 00 00 00 00 00     ...&.&..........
	...
     eca:	b2 00 00 00 00 00 00 00 b3 00 00 00 00 00 6c 6c     ..............ll
     eda:	6c 6c 6c 00 00 00 00 00 6d 00 00 00 00 00 00 00     lll.....m.......
     eea:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
     f22:	6d 00 00 00 00 00 00 00 26 00 00 00 00 00 00 27     m.......&......'
	...
     f56:	00 00 6c 6c 6c 6c 6c 00 00 00 00 00 00 00 00 00     ..lllll.........
	...
     f9e:	00 00 00 6d 6d 00 00 00 00 00 00 26 26 00 00 00     ...mm......&&...
	...
     fca:	00 00 b2 00 00 00 00 00 00 b3 00 00 00 00 00 00     ................
     fda:	6c 00 00 00 00 00 00 6d 00 00 00 00 00 00 26 00     l......m......&.
	...
     ffe:	00 00 f9 f9 f9 f9 f9 00 00 00 b2 00 00 00 b2 00     ................
    100e:	00 00 b3 00 00 00 b3 00 00 6c 6c 6c 00 00 6c 00     .........lll..l.
    101e:	00 6d 6d 6d 00 00 6d 00 00 26 26 26 26 26 26 00     .mmm..m..&&&&&&.
	...
    103e:	00 00 00 f9 f9 00 00 00 00 00 00 00 b2 00 00 00     ................
    104e:	00 00 00 00 b3 00 00 00 00 00 00 00 6c 00 00 00     ............l...
    105e:	00 00 6d 6d 6d 6d 6d 00 00 00 26 26 26 26 26 00     ..mmmmm...&&&&&.
	...
    107e:	00 00 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 b2 00     ................
    108e:	00 b3 b3 b3 b3 b3 b3 00 00 6c 6c 00 00 00 00 00     .........ll.....
    109e:	00 6d 6d 00 00 00 00 00 00 26 26 26 26 26 26 00     .mm......&&&&&&.
	...
    10be:	00 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 b2 00 00     ................
    10ce:	00 b3 b3 b3 b3 b3 00 00 00 00 00 00 00 6c 6c 00     .............ll.
    10de:	00 00 00 00 00 6d 6d 00 00 26 26 26 26 26 26 00     .....mm..&&&&&&.
	...
    10fe:	00 f9 00 00 00 00 00 00 00 b2 00 00 00 00 00 00     ................
    110e:	00 b3 00 00 00 b3 b3 00 00 6c 00 00 00 6c 6c 00     .........l...ll.
    111e:	00 6d 6d 6d 6d 6d 6d 00 00 00 00 00 00 26 26 00     .mmmmmm......&&.
	...
    113e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 00 00     ................
    114e:	00 b3 b3 b3 b3 b3 b3 00 00 00 00 00 00 00 6c 00     ..............l.
    115e:	00 00 00 00 00 6d 6d 00 00 26 26 26 26 26 26 00     .....mm..&&&&&&.
	...
    117e:	00 f9 f9 f9 f9 f9 00 00 00 b2 00 00 00 00 00 00     ................
    118e:	00 b3 b3 b3 b3 b3 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    119e:	00 6d 6d 6d 00 00 6d 00 00 26 26 26 26 26 26 00     .mmm..m..&&&&&&.
	...
    11be:	00 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 b2 00     ................
    11ce:	00 00 00 00 00 00 b3 00 00 00 00 6c 6c 6c 6c 00     ...........llll.
    11de:	00 00 00 6d 6d 00 00 00 00 00 00 26 26 00 00 00     ...mm......&&...
	...
    11fe:	00 00 f9 f9 f9 f9 f9 00 00 00 b2 00 00 00 b2 00     ................
    120e:	00 00 b3 b3 b3 b3 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    121e:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 26 26 00     .mm...m..&&&&&&.
	...
    123e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    124e:	00 b3 00 00 00 00 b3 00 00 6c 6c 6c 6c 6c 6c 00     .........llllll.
    125e:	00 00 00 00 00 6d 6d 00 00 00 00 00 00 26 26 00     .....mm......&&.
	...
    128e:	00 00 00 b3 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12a6:	00 00 00 26 00 00 00 00 00 00 00 00 00 00 00 00     ...&............
	...
    12c6:	00 00 00 b2 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    12de:	00 00 00 6d 00 00 00 00 00 00 00 26 00 00 00 00     ...m.......&....
    12ee:	00 00 27 00 00 00 00 00 00 00 00 00 00 00 00 00     ..'.............
    12fe:	00 f9 f9 f9 f9 f9 f9 00 00 b2 b2 00 00 00 00 00     ................
    130e:	00 b3 b3 00 00 00 00 00 00 6c 6c 6c 00 00 00 00     .........lll....
    131e:	00 6d 6d 6d 00 00 00 00 00 26 26 26 26 26 26 00     .mmm.....&&&&&&.
	...
    134e:	00 00 b3 b3 b3 b3 b3 00 00 00 00 00 00 00 00 00     ................
    135e:	00 00 6d 6d 6d 6d 6d 00 00 00 00 00 00 00 00 00     ..mmmmm.........
	...
    137e:	00 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 b2 00     ................
    138e:	00 00 00 00 00 00 b3 00 00 00 00 00 00 6c 6c 00     .............ll.
    139e:	00 00 00 00 00 6d 6d 00 00 26 26 26 26 26 26 00     .....mm..&&&&&&.
	...
    13be:	00 f9 f9 f9 f9 f9 f9 00 00 b2 b2 b2 b2 b2 b2 00     ................
    13ce:	00 b3 b3 b3 b3 b3 b3 00 00 6c 6c 6c 6c 6c 6c 00     .........llllll.
    13de:	00 6d 6d 6d 6d 6d 6d 00 00 26 26 26 26 26 26 00     .mmmmmm..&&&&&&.
	...
    13fe:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    140e:	00 b3 00 b3 b3 b3 b3 00 00 6c 00 00 6c 6c 6c 00     .........l..lll.
    141e:	00 6d 00 00 00 00 6d 00 00 26 26 26 26 26 26 00     .m....m..&&&&&&.
	...
    143e:	00 00 f9 f9 f9 f9 f9 00 00 00 b2 00 00 00 b2 00     ................
    144e:	00 00 b3 b3 00 00 b3 00 00 6c 6c 6c 6c 6c 6c 00     .........llllll.
    145e:	00 6d 00 00 00 00 6d 00 00 26 00 00 00 00 26 00     .m....m..&....&.
	...
    147e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    148e:	00 b3 b3 b3 b3 b3 00 00 00 6c 00 00 00 00 6c 00     .........l....l.
    149e:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 26 26 00     .mm...m..&&&&&&.
	...
    14be:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    14ce:	00 b3 00 00 00 00 00 00 00 6c 6c 00 00 00 00 00     .........ll.....
    14de:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 26 26 00     .mm...m..&&&&&&.
	...
    14fe:	00 f9 f9 f9 f9 f9 00 00 00 b2 00 00 00 00 b2 00     ................
    150e:	00 b3 00 00 00 00 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    151e:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 26 00 00     .mm...m..&&&&&..
	...
    153e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 00 00     ................
    154e:	00 b3 b3 b3 b3 b3 00 00 00 6c 00 00 00 00 00 00     .........l......
    155e:	00 6d 6d 00 00 00 00 00 00 26 26 26 26 26 26 00     .mm......&&&&&&.
	...
    157e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 00 00     ................
    158e:	00 b3 b3 b3 b3 b3 00 00 00 6c 00 00 00 00 00 00     .........l......
    159e:	00 6d 6d 00 00 00 00 00 00 26 26 00 00 00 00 00     .mm......&&.....
	...
    15be:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    15ce:	00 b3 00 00 00 00 00 00 00 6c 6c 00 00 6c 6c 00     .........ll..ll.
    15de:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 26 26 00     .mm...m..&&&&&&.
	...
    15fe:	00 f9 00 00 00 00 f9 00 00 b2 00 00 00 00 b2 00     ................
    160e:	00 b3 b3 b3 b3 b3 b3 00 00 6c 00 00 00 00 6c 00     .........l....l.
    161e:	00 6d 6d 00 00 00 6d 00 00 26 26 00 00 00 26 00     .mm...m..&&...&.
	...
    163e:	00 00 00 f9 00 00 00 00 00 00 00 b2 00 00 00 00     ................
    164e:	00 00 00 b3 00 00 00 00 00 00 00 6c 6c 00 00 00     ...........ll...
    165e:	00 00 00 6d 6d 00 00 00 00 00 00 26 26 00 00 00     ...mm......&&...
	...
    1682:	00 00 f9 00 00 00 00 00 00 00 b2 00 00 00 00 00     ................
    1692:	00 00 b3 00 00 6c 00 00 00 00 6c 00 00 6d 6d 00     .....l....l..mm.
    16a2:	00 00 6d 00 00 26 26 26 26 26 26 00 00 00 00 00     ..m..&&&&&&.....
	...
    16be:	00 f9 00 00 00 f9 f9 00 00 b2 00 00 00 b2 00 00     ................
    16ce:	00 b3 b3 b3 b3 00 00 00 00 6c 00 00 00 6c 00 00     .........l...l..
    16de:	00 6d 6d 00 00 6d 00 00 00 26 26 00 00 26 26 00     .mm..m...&&..&&.
	...
    16fe:	00 f9 00 00 00 00 00 00 00 b2 00 00 00 00 00 00     ................
    170e:	00 b3 00 00 00 00 00 00 00 6c 6c 00 00 00 00 00     .........ll.....
    171e:	00 6d 6d 00 00 00 00 00 00 26 26 26 26 26 26 00     .mm......&&&&&&.
	...
    173e:	00 f9 f9 f9 f9 f9 f9 f9 00 b2 00 00 b2 00 00 b2     ................
    174e:	00 b3 00 00 b3 00 00 b3 00 6c 6c 00 6c 6c 00 6c     .........ll.ll.l
    175e:	00 6d 6d 00 6d 6d 00 6d 00 26 26 00 26 26 00 26     .mm.mm.m.&&.&&.&
	...
    177e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    178e:	00 b3 00 00 00 00 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    179e:	00 6d 6d 00 00 00 6d 00 00 26 26 00 00 00 26 00     .mm...m..&&...&.
	...
    17be:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    17ce:	00 b3 00 00 00 00 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    17de:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 26 26 00     .mm...m..&&&&&&.
	...
    17fe:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    180e:	00 b3 b3 00 00 00 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    181e:	00 6d 6d 6d 6d 6d 6d 00 00 26 26 00 00 00 00 00     .mmmmmm..&&.....
	...
    183e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    184e:	00 b3 00 00 00 00 b3 00 00 6c 6c 00 00 00 00 00     .........ll.....
    185e:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 00 26 00     .mm...m..&&&&.&.
	...
    187e:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 b2 00     ................
    188e:	00 b3 00 00 00 00 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    189e:	00 6d 6d 6d 6d 6d 00 00 00 26 26 00 00 26 26 00     .mmmmm...&&..&&.
	...
    18be:	00 f9 f9 f9 f9 f9 f9 00 00 b2 00 00 00 00 00 00     ................
    18ce:	00 b3 b3 b3 b3 b3 b3 00 00 00 00 00 00 6c 6c 00     .............ll.
    18de:	00 00 00 00 6d 6d 6d 00 00 26 26 26 26 26 26 00     ....mmm..&&&&&&.
	...
    18fe:	00 f9 f9 f9 f9 f9 f9 00 00 00 00 b2 00 00 00 00     ................
    190e:	00 00 00 b3 00 00 00 00 00 00 00 6c 6c 00 00 00     ...........ll...
    191e:	00 00 00 6d 6d 00 00 00 00 00 00 26 26 00 00 00     ...mm......&&...
	...
    193e:	00 f9 00 00 00 00 f9 00 00 b2 00 00 00 00 b2 00     ................
    194e:	00 b3 00 00 00 00 b3 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    195e:	00 6d 6d 00 00 00 6d 00 00 26 26 26 26 26 26 00     .mm...m..&&&&&&.
	...
    197e:	00 f9 f9 00 00 00 f9 00 00 b2 b2 00 00 00 b2 00     ................
    198e:	00 b3 b3 00 00 00 b3 00 00 00 6c 00 00 6c 6c 00     ..........l..ll.
    199e:	00 00 6d 00 00 6d 00 00 00 00 26 26 26 26 00 00     ..m..m....&&&&..
	...
    19be:	00 f9 00 00 f9 00 00 f9 00 b2 00 00 b2 00 00 b2     ................
    19ce:	00 b3 00 00 b3 00 00 b3 00 6c 6c 00 6c 6c 00 6c     .........ll.ll.l
    19de:	00 6d 6d 00 6d 6d 00 6d 00 26 26 26 26 26 26 26     .mm.mm.m.&&&&&&&
	...
    19fe:	00 f9 00 00 00 00 f9 00 00 b2 00 00 00 00 b2 00     ................
    1a0e:	00 00 b3 b3 b3 b3 00 00 00 6c 6c 00 00 00 6c 00     .........ll...l.
    1a1e:	00 6d 6d 00 00 00 6d 00 00 26 26 00 00 00 26 00     .mm...m..&&...&.
	...
    1a3e:	00 f9 00 00 00 00 f9 00 00 b2 00 00 00 00 b2 00     ................
    1a4e:	00 b3 b3 b3 b3 b3 b3 00 00 00 00 6c 00 00 00 00     ...........l....
    1a5e:	00 00 00 6d 6d 00 00 00 00 00 00 26 26 00 00 00     ...mm......&&...
	...
    1a7e:	00 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 b2 00     ................
    1a8e:	00 b3 b3 b3 b3 b3 b3 00 00 6c 00 00 00 00 00 00     .........l......
    1a9e:	00 6d 6d 00 00 00 00 00 00 26 26 26 26 26 26 00     .mm......&&&&&&.
	...
    1ac2:	f9 f9 f9 00 00 00 00 00 b2 00 00 00 00 00 00 00     ................
    1ad2:	b3 00 00 00 00 00 00 00 6c 00 00 00 00 00 00 00     ........l.......
    1ae2:	6d 00 00 00 00 00 00 00 26 26 26 00 00 00 00 00     m.......&&&.....
	...
    1b06:	00 b2 00 00 00 00 00 00 00 00 b3 00 00 00 00 00     ................
    1b16:	00 00 00 6c 00 00 00 00 00 00 00 00 6d 00 00 00     ...l........m...
    1b26:	00 00 00 00 00 26 00 00 00 00 00 00 00 00 00 00     .....&..........
	...
    1b3e:	00 f9 f9 f9 00 00 00 00 00 00 00 b2 00 00 00 00     ................
    1b4e:	00 00 00 b3 00 00 00 00 00 00 00 6c 00 00 00 00     ...........l....
    1b5e:	00 00 00 6d 00 00 00 00 00 26 26 26 00 00 00 00     ...m.....&&&....
	...
    1b7e:	00 00 00 f9 00 00 00 00 00 00 b2 b2 b2 00 00 00     ................
    1b8e:	00 b3 00 b3 00 b3 00 00 00 00 00 6c 00 00 00 00     ...........l....
    1b9e:	00 00 00 6d 00 00 00 00 00 00 00 26 00 00 00 00     ...m.......&....
	...
    1bee:	27 27 27 27 27 27 27 27 09 09 09 09 09 09 09 09     ''''''''........
    1bfe:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    1c0e:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    1c1e:	09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09     ................
    1c2e:	09 09 09 09 09 09 09 09 07 07 07 07 07 07 07 07     ................
    1c3e:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    1c4e:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    1c5e:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    1c6e:	07 07 07 07 07 07 07 07 38 38 38 38 38 38 38 38     ........88888888
    1c7e:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    1c8e:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    1c9e:	38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38     8888888888888888
    1cae:	38 38 38 38 38 38 38 38 3f 3f 3f 3f 3f 3f 3f 3f     88888888????????
    1cbe:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    1cce:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    1cde:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    1cee:	3f 3f 3f 3f 3f 3f 3f 3f c0 c0 c0 c0 c0 c0 c0 c0     ????????........
    1cfe:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    1d0e:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    1d1e:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    1d2e:	c0 c0 c0 c0 c0 c0 c0 c0 c7 c7 c7 c7 c7 c7 c7 c7     ................
    1d3e:	c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7     ................
    1d4e:	c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7     ................
    1d5e:	c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7 c7     ................
    1d6e:	c7 c7 c7 c7 c7 c7 c7 c7 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1d7e:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1d8e:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1d9e:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    1dae:	f8 f8 f8 f8 f8 f8 f8 f8 ff ff ff ff ff ff ff ff     ................
    1dbe:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1dce:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1dde:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1dee:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    1e06:	11 11 11 11 11 11 11 11 18 18 18 18 18 18 18 18     ................
    1e16:	38 38 38 38 38 38 38 38 11 11 11 11 11 11 11 11     88888888........
	...
    1e46:	05 05 05 05 05 05 05 05 06 06 06 06 06 06 06 06     ................
    1e56:	07 07 07 07 07 07 07 07 05 05 05 05 05 05 05 05     ................
	...
    1e76:	09 09 ff ff ff ff ff ff 52 09 09 09 09 09 09 09     ........R.......
    1e86:	ff ff 00 00 cf cf cf cf 52 09 00 00 09 09 09 09     ........R.......
    1e96:	ff 00 cc cc cc cc cc cc 52 09 09 09 09 09 09 09     ........R.......
    1ea6:	ff 00 c9 c9 c9 c9 c9 c9 52 09 09 09 09 09 09 09     ........R.......
    1eb6:	ff ff ff ff ff 09 09 09 09 09 09 09 09 09 09 00     ................
    1ec6:	cf cf cf 00 00 ff ff 09 09 09 09 09 00 00 09 00     ................
    1ed6:	cc cc cc cc cc c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    1ee6:	c9 c9 c9 c9 c9 c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    1ef6:	ff 00 c8 c8 c8 c8 c8 c8 52 09 09 09 09 09 09 09     ........R.......
    1f06:	ff 00 c8 c8 c8 c8 c8 c8 52 09 09 09 09 09 09 09     ........R.......
    1f16:	5b ff ff 00 c8 c8 c8 c8 52 09 00 00 09 09 09 09     [.......R.......
    1f26:	09 09 5b 5b 5b 5b 5b 5b 00 00 00 00 00 00 00 00     ..[[[[[[........
    1f36:	c8 c8 c8 c8 c8 c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    1f46:	c8 c8 c8 c8 c8 c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    1f56:	c8 c8 c8 c9 ff ff 5b 5b 09 09 09 09 00 00 09 00     ......[[........
    1f66:	5b 5b 5b 5b 5b 5b 09 09 00 00 00 00 00 00 00 00     [[[[[[..........
    1f76:	52 52 52 52 ff ff ff ff 52 09 09 09 09 09 09 09     RRRR....R.......
    1f86:	ff ff 00 00 cf cf cf cf 52 09 00 00 09 09 09 09     ........R.......
    1f96:	ff 00 cc cc cc cc cc cc 52 09 09 09 09 09 09 09     ........R.......
    1fa6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    1fb6:	52 52 52 52 ff 09 09 09 09 09 09 09 09 09 09 00     RRRR............
    1fc6:	09 09 09 09 00 ff ff 09 09 09 09 09 00 00 09 00     ................
    1fd6:	cc cc cc cc 09 09 09 00 09 09 09 09 09 09 09 00     ................
    1fe6:	c9 c9 c9 c9 c9 c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    1ff6:	ff 00 c8 c8 c8 c8 c8 c8 52 09 09 09 09 09 09 09     ........R.......
    2006:	52 09 09 09 c8 c8 c8 c8 52 09 09 09 09 09 09 09     R.......R.......
    2016:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2026:	09 09 5b 5b 09 09 09 09 00 00 00 00 00 00 00 00     ..[[............
    2036:	c8 c8 c8 c8 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2046:	09 09 09 09 c8 c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    2056:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2066:	5b 5b 5b 5b 5b 5b 09 09 00 00 00 00 00 00 00 00     [[[[[[..........
    2076:	52 52 52 52 ff ff ff ff 52 09 09 09 09 09 09 09     RRRR....R.......
    2086:	52 09 52 00 cf cf cf cf 52 09 00 00 09 09 09 09     R.R.....R.......
    2096:	ff 00 cc cc 09 09 09 09 52 09 09 09 09 09 09 09     ........R.......
    20a6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    20b6:	52 52 52 52 ff 09 09 09 09 09 09 09 09 09 09 00     RRRR............
    20c6:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    20d6:	cc cc cc cc 09 09 09 00 09 09 09 09 09 09 09 00     ................
    20e6:	09 09 09 09 c9 c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    20f6:	ff 00 c8 c8 c8 c8 c8 c8 52 09 09 09 09 09 09 09     ........R.......
    2106:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2116:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2126:	09 09 5b 5b 09 09 09 09 00 00 00 00 00 00 00 00     ..[[............
    2136:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2146:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2156:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2166:	5b 5b 5b 5b 5b 5b 09 09 00 00 00 00 00 00 00 00     [[[[[[..........
    2176:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    2186:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2196:	ff 00 cc cc 09 09 09 09 52 09 09 09 09 09 09 09     ........R.......
    21a6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    21b6:	52 52 52 52 ff 09 09 09 09 09 09 09 09 09 09 00     RRRR............
    21c6:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    21d6:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    21e6:	09 09 09 09 c9 c9 ff 5b 09 09 09 09 09 09 09 00     .......[........
    21f6:	52 09 09 09 c8 c8 c8 c8 52 09 09 09 09 09 09 09     R.......R.......
    2206:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2216:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2226:	52 09 09 09 09 09 09 09 00 00 00 00 00 00 00 00     R...............
    2236:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2246:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2256:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2266:	5b 5b 5b 5b 09 09 09 00 00 00 00 00 00 00 00 00     [[[[............
    2276:	09 09 ee ee ee ee ee ee 09 ee ee 00 00 00 00 00     ................
    2286:	ee ee 00 00 cd cd cd cd ee 00 00 cc cc cc cc cc     ................
    2296:	ee 00 cb cb cb cb cb cb ee 00 ca ca ca ca ca ca     ................
    22a6:	ee 00 c9 c9 c9 c9 c9 c9 ee 00 c8 c8 c8 c8 c8 c8     ................
    22b6:	ee ee ee ee ee 09 09 09 00 00 00 00 ee ee 09 09     ................
    22c6:	cd cd cd 00 00 ee ee 09 cc cc cc cc 89 89 ee 52     ...............R
    22d6:	cb cb cb cb cb 89 ee 52 ca ca ca ca ca 89 ee 52     .......R.......R
    22e6:	c9 c9 c9 c9 c9 89 ee 52 c8 c8 c8 c8 c8 89 ee 52     .......R.......R
    22f6:	ee 00 c8 c8 c8 c8 c8 c8 ee 00 c8 c8 c8 c8 c8 c8     ................
    2306:	ee 00 c8 c8 c8 c8 c8 c8 ee ee 00 c8 c8 c8 c8 c8     ................
    2316:	52 ee ee 00 c8 c8 c8 c8 09 52 ee ee ee ee ee ee     R........R......
    2326:	09 09 52 52 52 52 52 52 09 09 09 09 09 09 09 09     ..RRRRRR........
    2336:	c8 c8 c8 c8 c8 89 ee 52 c8 c8 c8 c8 c8 89 ee 52     .......R.......R
    2346:	c8 c8 c8 c8 c8 89 ee 52 c8 c8 c8 c8 89 ee ee 52     .......R.......R
    2356:	c8 c8 c8 89 ee ee 52 52 ee ee ee ee ee 52 52 09     ......RR.....RR.
    2366:	52 52 52 52 52 52 09 09 09 09 09 09 09 09 09 09     RRRRRR..........
    2376:	00 ed ed ed ed ed ed 38 ed ed ed ed ed ed 38 38     .......8......88
    2386:	ed ed ed ed ed 38 38 38 ed ed ed ff 38 38 38 38     .....888....8888
    2396:	ed ed ed 38 f8 f8 f8 f8 ed ed 38 38 f8 f8 f8 f8     ...8......88....
    23a6:	ed 38 38 38 f8 f8 f8 f8 38 38 38 38 f8 f8 f8 f8     .888....8888....
    23b6:	ad ad ad ad ad ad 00 00 28 ad ad ad ad ad ad 00     ........(.......
    23c6:	28 28 ad ad ad ad ad a8 28 28 28 ad ad ad ad a8     ((......(((.....
    23d6:	a8 a8 a8 28 ad ad ad a8 a8 a8 a8 28 28 ad ad a8     ...(.......((...
    23e6:	a8 a8 a8 28 28 28 ad a8 b0 b0 b0 30 30 30 30 b0     ...(((.....0000.
    23f6:	5b 20 20 20 60 60 60 a0 5b 5b 20 20 60 60 60 a0     [   ```.[[  ```.
    2406:	5b 5b 5b 20 60 60 60 a0 5b 5b 5b 5b 20 20 20 20     [[[ ```.[[[[    
    2416:	5b 5b 5b 5b 5b 20 20 20 5b 5b 5b 5b 5b 5b 20 20     [[[[[   [[[[[[  
    2426:	00 5b 64 5b 5b 5b 5b 20 00 00 60 60 60 60 60 a0     .[d[[[[ ..`````.
    2436:	58 58 58 18 18 18 5b 58 58 58 58 18 18 5b 5b 58     XXX...[XXXX..[[X
    2446:	58 58 58 18 5b 5b 5b 58 18 18 18 5b 5b 5b 5b 58     XXX.[[[X...[[[[X
    2456:	18 18 5b 5b 5b 5b 5b 58 18 5b 5b 5b 5b 5b 5b 58     ..[[[[[X.[[[[[[X
    2466:	5b 5b 5b 5b 5b 5b 58 58 58 58 58 58 58 58 58 00     [[[[[[XXXXXXXXX.
    2476:	00 ed ed ed ed ed ed f6 ed ed ed ed ed ed c7 c7     ................
    2486:	ed ed ed ed ed c7 c7 c7 ed ed ed ed c7 c7 c7 c7     ................
    2496:	ed ed ed c7 c7 c7 ed f6 ed ed c7 c7 c7 ed ed f6     ................
    24a6:	ed c7 c7 c7 ed ed ed f6 f6 c7 c7 c7 f6 f6 f6 f6     ................
    24b6:	ad ad ad ad ad ad 00 00 85 ad ad ad ad ad ad 00     ................
    24c6:	85 85 ad ad ad ad ad a8 85 85 85 ad ad ad ad a8     ................
    24d6:	ad 85 85 85 ad ad ad a8 ad ad 85 85 85 ad ad a8     ................
    24e6:	ad ad ad 85 85 85 ad a8 ad ad ad 86 86 86 ad b0     ................
    24f6:	5b 44 44 44 5b 5b 5b a4 5b 5b 44 44 44 5b 5b a4     [DDD[[[.[[DDD[[.
    2506:	5b 5b 5b 44 44 44 5b a4 5b 5b 5b 5b 44 44 44 84     [[[DDD[.[[[[DDD.
    2516:	5b 5b 5b 5b 5b 44 44 84 5b 5b 5b 5b 5b 5b 44 84     [[[[[DD.[[[[[[D.
    2526:	00 5b 5b 5b 5b 5b 5b a4 00 00 60 60 60 60 60 a0     .[[[[[[...`````.
    2536:	5b 5b 5b 43 43 43 5b 58 5b 5b 43 43 43 5b 5b 58     [[[CCC[X[[CCC[[X
    2546:	5b 43 43 43 5b 5b 5b 58 43 43 43 5b 5b 5b 5b 58     [CCC[[[XCCC[[[[X
    2556:	43 43 5b 5b 5b 5b 5b 58 43 5b 5b 5b 5b 5b 5b 58     CC[[[[[XC[[[[[[X
    2566:	5b 5b 5b 5b 5b 5b 58 58 58 58 58 58 58 58 58 00     [[[[[[XXXXXXXXX.
	...
    258a:	66 66 66 66 00 00 00 66 66 6f 6f 6f 00 00 66 66     ffff...ffooo..ff
    259a:	6f 67 67 67 00 00 66 6f 67 67 66 66 00 00 66 6f     oggg..foggff..fo
    25aa:	67 66 00 00 00 00 66 6f 67 66 00 00 00 00 00 00     gf....fogf......
	...
    25c6:	66 66 66 66 00 00 00 00 6f 6f 6f 66 66 00 00 00     ffff....oooff...
    25d6:	67 67 67 6f 66 66 00 00 66 66 67 67 6f 66 00 00     gggoff..ffggof..
    25e6:	00 00 66 67 6f 66 00 00 00 00 66 67 6f 66 00 00     ..fgof....fgof..
    25f6:	00 00 66 6f 67 66 00 00 00 00 66 6f 67 66 00 00     ..fogf....fogf..
    2606:	00 00 66 6f 67 67 66 66 00 00 66 66 6f 67 67 67     ..foggff..ffoggg
    2616:	00 00 00 66 66 6f 6f 6f 00 00 00 00 66 66 66 66     ...ffooo....ffff
	...
    2636:	00 00 66 67 6f 66 00 00 00 00 66 67 6f 66 00 00     ..fgof....fgof..
    2646:	66 66 67 67 6f 66 00 00 67 67 67 6f 66 66 00 00     ffggof..gggoff..
    2656:	6f 6f 6f 66 66 00 00 00 66 66 66 66 00 00 00 00     oooff...ffff....
	...
    2676:	00 37 66 6f 67 66 00 00 37 00 66 6f 67 66 00 00     .7fogf..7.fogf..
    2686:	37 00 66 6f 67 66 00 00 37 00 66 6f 67 66 00 00     7.fogf..7.fogf..
    2696:	00 37 66 6f 67 66 37 00 00 00 66 6f 67 66 00 37     .7fogf7...fogf.7
    26a6:	00 00 66 6f 67 66 00 37 00 00 66 6f 67 66 37 00     ..fogf.7..fogf7.
    26b6:	00 00 00 00 37 37 37 00 00 00 00 37 00 00 00 37     ....777....7...7
    26c6:	66 66 66 66 66 66 66 66 6f 6f 6f 6f 6f 6f 6f 6f     ffffffffoooooooo
    26d6:	67 67 67 67 67 67 67 67 66 66 66 66 66 66 66 66     ggggggggffffffff
    26e6:	37 00 00 37 00 00 00 00 00 37 37 00 00 00 00 00     7..7.....77.....
    26f6:	52 52 52 52 52 52 ff ff 52 09 09 09 09 09 ff ff     RRRRRR..R.......
    2706:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2716:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2726:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2736:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    2746:	52 09 52 00 09 09 ff ff 52 09 00 00 09 09 ff ff     R.R.....R.......
    2756:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2766:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2776:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    2786:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2796:	52 09 09 09 09 09 ff ff 52 09 09 09 09 09 ff ff     R.......R.......
    27a6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    27b6:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    27c6:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    27d6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    27e6:	52 09 09 09 09 09 ff ff 52 09 09 09 09 09 ff ff     R.......R.......
    27f6:	52 09 09 09 09 09 ff ff 52 09 09 09 09 09 ff ff     R.......R.......
    2806:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2816:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2826:	52 09 09 09 09 09 09 09 00 00 00 00 00 00 00 00     R...............
    2836:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2846:	52 09 09 09 09 09 ff ff 52 09 09 09 09 09 ff ff     R.......R.......
    2856:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2866:	52 09 09 09 09 09 09 09 00 00 00 00 00 00 00 00     R...............
    2876:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2886:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2896:	52 09 52 00 09 09 ff ff 52 09 00 00 09 09 ff ff     R.R.....R.......
    28a6:	52 09 09 09 09 09 09 09 00 00 00 00 00 00 00 00     R...............
    28b6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    28c6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    28d6:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    28e6:	52 09 09 09 09 09 ff ff 00 00 00 00 00 00 ff ff     R...............
    28f6:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    2906:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2916:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2926:	ff ff 09 09 09 09 09 09 ff ff 09 09 09 09 09 09     ................
    2936:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    2946:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2956:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2966:	52 09 ff ff 09 09 09 09 52 09 ff ff 09 09 09 09     R.......R.......
    2976:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    2986:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2996:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    29a6:	52 09 09 09 ff ff 09 09 52 09 09 09 ff ff 09 09     R.......R.......
    29b6:	52 52 52 52 52 52 52 00 09 09 09 09 09 09 09 00     RRRRRRR.........
    29c6:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    29d6:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    29e6:	ff ff 09 09 09 09 09 00 ff ff 09 09 09 09 09 00     ................
    29f6:	52 52 52 52 52 52 52 00 09 09 09 09 09 09 09 00     RRRRRRR.........
    2a06:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2a16:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2a26:	09 09 ff ff 09 09 09 00 09 09 ff ff 09 09 09 00     ................
    2a36:	52 52 52 52 52 52 52 00 09 09 09 09 09 09 09 00     RRRRRRR.........
    2a46:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2a56:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2a66:	09 09 09 09 ff ff 09 00 09 09 09 09 ff ff 09 00     ................
    2a76:	52 52 52 52 52 52 52 00 09 09 09 09 09 09 09 00     RRRRRRR.........
    2a86:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2a96:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2aa6:	09 09 09 09 09 09 ff ff 09 09 09 09 09 09 ff ff     ................
    2ab6:	f0 f0 f0 f0 f0 f0 f0 f0 f0 ea ea ea ea ea ea ea     ................
    2ac6:	f0 ea f0 e3 ea ea ea ea f0 ea e3 e3 ea ea ea ea     ................
    2ad6:	f0 ea ea ea ea ea ea ea f0 ea ea ea ea ea ea ea     ................
    2ae6:	f0 ea ea ea ea ea ea ea f0 ea ea ea ea ea ea ea     ................
    2af6:	f0 f0 f0 f0 f0 f0 f0 e3 ea ea ea ea ea ea ea e3     ................
    2b06:	ea ea ea ea f0 e3 ea e3 ea ea ea ea e3 e3 ea e3     ................
    2b16:	ea ea ea ea ea ea ea e3 ea ea ea ea ea ea ea e3     ................
    2b26:	ea ea ea ea ea ea ea e3 ea ea ea ea ea ea ea e3     ................
    2b36:	f0 ea ea ea ea ea ea ea f0 ea ea ea ea ea ea ea     ................
    2b46:	f0 ea ea ea ea ea ea ea f0 ea ea ea ea ea ea ea     ................
    2b56:	f0 ea f0 e3 ea ea ea ea f0 ea e3 e3 ea ea ea ea     ................
    2b66:	f0 ea ea ea ea ea ea ea e3 e3 e3 e3 e3 e3 e3 e3     ................
    2b76:	ea ea ea ea ea ea ea e3 ea ea ea ea ea ea ea e3     ................
    2b86:	ea ea ea ea ea ea ea e3 ea ea ea ea ea ea ea e3     ................
    2b96:	ea ea ea ea f0 e3 ea e3 ea ea ea ea e3 e3 ea e3     ................
    2ba6:	ea ea ea ea ea ea ea e3 e3 e3 e3 e3 e3 e3 e3 e3     ................
    2bb6:	e8 e8 e8 e8 e8 e8 e8 e8 e8 d8 d8 d8 d8 d8 d8 d8     ................
    2bc6:	e8 d8 e8 d9 d8 d8 d8 d8 e8 d8 d9 d9 d8 d8 d8 d8     ................
    2bd6:	e8 d8 d8 d8 d8 d8 d8 d8 e8 d8 d8 d8 d8 d8 d8 d8     ................
    2be6:	e8 d8 d8 d8 d8 d8 d8 d8 e8 d8 d8 d8 d8 d8 d8 d8     ................
    2bf6:	e8 e8 e8 e8 e8 e8 e8 d9 d8 d8 d8 d8 d8 d8 d8 d9     ................
    2c06:	d8 d8 d8 d8 e8 d9 d8 d9 d8 d8 d8 d8 d9 d9 d8 d9     ................
    2c16:	d8 d8 d8 d8 d8 d8 d8 d9 d8 d8 d8 d8 d8 d8 d8 d9     ................
    2c26:	d8 d8 d8 d8 d8 d8 d8 d9 d8 d8 d8 d8 d8 d8 d8 d9     ................
    2c36:	e8 d8 d8 d8 d8 d8 d8 d8 e8 d8 d8 d8 d8 d8 d8 d8     ................
    2c46:	e8 d8 d8 d8 d8 d8 d8 d8 e8 d8 d8 d8 d8 d8 d8 d8     ................
    2c56:	e8 d8 e8 d9 d8 d8 d8 d8 e8 d8 d9 d9 d8 d8 d8 d8     ................
    2c66:	e8 d8 d8 d8 d8 d8 d8 d8 d9 d9 d9 d9 d9 d9 d9 d9     ................
    2c76:	d8 d8 d8 d8 d8 d8 d8 d9 d8 d8 d8 d8 d8 d8 d8 d9     ................
    2c86:	d8 d8 d8 d8 d8 d8 d8 d9 d8 d8 d8 d8 d8 d8 d8 d9     ................
    2c96:	d8 d8 d8 d8 e8 d9 d8 d9 d8 d8 d8 d8 d9 d9 d8 d9     ................
    2ca6:	d8 d8 d8 d8 d8 d8 d8 d9 d9 d9 d9 d9 d9 d9 d9 d9     ................
    2cb6:	98 98 98 98 98 98 98 98 98 90 90 90 90 90 90 90     ................
    2cc6:	98 90 98 88 90 90 90 90 98 90 88 88 90 90 90 90     ................
    2cd6:	98 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90     ................
    2ce6:	98 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90     ................
    2cf6:	98 98 98 98 98 98 98 88 90 90 90 90 90 90 90 88     ................
    2d06:	90 90 90 90 98 88 90 88 90 90 90 90 88 88 90 88     ................
    2d16:	90 90 90 90 90 90 90 88 90 90 90 90 90 90 90 88     ................
    2d26:	90 90 90 90 90 90 90 88 90 90 90 90 90 90 90 88     ................
    2d36:	98 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90     ................
    2d46:	98 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90     ................
    2d56:	98 90 98 88 90 90 90 90 98 90 88 88 90 90 90 90     ................
    2d66:	98 90 90 90 90 90 90 90 88 88 88 88 88 88 88 88     ................
    2d76:	90 90 90 90 90 90 90 88 90 90 90 90 90 90 90 88     ................
    2d86:	90 90 90 90 90 90 90 88 90 90 90 90 90 90 90 88     ................
    2d96:	90 90 90 90 98 88 90 88 90 90 90 90 88 88 90 88     ................
    2da6:	90 90 90 90 90 90 90 88 88 88 88 88 88 88 88 88     ................
    2db6:	52 52 52 52 52 52 52 52 52 09 09 09 09 09 09 09     RRRRRRRRR.......
    2dc6:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2dd6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2de6:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2df6:	52 52 52 52 52 52 52 00 09 09 09 09 09 09 09 00     RRRRRRR.........
    2e06:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2e16:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2e26:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2e36:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2e46:	52 09 09 09 09 09 09 09 52 09 09 09 09 09 09 09     R.......R.......
    2e56:	52 09 52 00 09 09 09 09 52 09 00 00 09 09 09 09     R.R.....R.......
    2e66:	52 09 09 09 09 09 09 09 00 00 00 00 00 00 00 00     R...............
    2e76:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2e86:	09 09 09 09 09 09 09 00 09 09 09 09 09 09 09 00     ................
    2e96:	09 09 09 09 52 00 09 00 09 09 09 09 00 00 09 00     ....R...........
    2ea6:	09 09 09 09 09 09 09 00 00 00 00 00 00 00 00 00     ................
    2eb6:	00 00 00 00 5b 00 00 00 00 00 00 5b 00 00 00 00     ....[......[....
    2ec6:	00 00 07 07 07 00 07 07 00 5b 00 00 00 00 00 00     .........[......
    2ed6:	5b 00 07 00 00 00 00 00 00 00 07 00 00 00 00 00     [...............
	...
    2eee:	00 00 07 00 00 00 00 00 00 00 00 5b 00 00 00 00     ...........[....
    2efe:	00 00 00 00 5b 00 00 00 00 07 07 00 07 07 00 00     ....[...........
    2f0e:	00 00 00 00 00 07 5b 00 00 00 00 00 00 07 00 5b     ......[........[
	...
    2f2a:	00 07 00 00 00 00 00 00 00 07 00 00 00 00 07 00     ................
	...
    2f46:	00 00 07 00 00 00 00 00 5b 00 07 00 00 00 00 00     ........[.......
    2f56:	00 5b 00 00 00 00 00 00 00 00 07 07 07 00 07 07     .[..............
    2f66:	00 00 00 5b 00 00 00 00 00 00 00 00 5b 00 00 00     ...[........[...
	...
    2f82:	00 07 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
    2f92:	00 00 00 5b 00 00 00 00 00 07 5b 00 00 07 07 00     ...[......[.....
    2fa2:	07 07 00 00 00 00 00 00 5b 00 00 00 00 00 00 5b     ........[......[
    2fb2:	00 00 00 00 52 52 52 52 52 52 52 52 52 09 09 09     ....RRRRRRRRR...
    2fc2:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    2fd2:	09 09 09 09 52 09 09 09 09 09 07 07 52 09 09 09     ....R.......R...
    2fe2:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    2ff2:	09 09 09 09 52 52 52 52 52 52 52 00 09 09 09 09     ....RRRRRRR.....
    3002:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    3012:	00 00 09 00 09 07 09 09 09 09 09 00 09 09 09 09     ................
    3022:	09 09 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3032:	09 09 09 00 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3042:	09 09 09 09 52 09 09 09 07 09 09 09 52 09 09 09     ....R.......R...
    3052:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3062:	09 09 09 09 52 09 09 09 09 09 09 09 00 00 00 00     ....R...........
    3072:	00 00 00 00 09 09 09 09 09 09 09 00 09 09 07 09     ................
    3082:	07 09 09 00 09 09 09 09 09 09 09 00 07 09 09 09     ................
    3092:	09 09 09 00 09 09 09 07 52 00 09 00 09 09 09 09     ........R.......
    30a2:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
    30b2:	00 00 00 00 52 52 52 52 52 52 52 52 52 09 09 09     ....RRRRRRRRR...
    30c2:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    30d2:	09 09 09 09 52 09 09 09 09 09 07 09 52 09 09 09     ....R.......R...
    30e2:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    30f2:	09 09 07 09 52 52 52 52 52 52 52 00 09 09 09 09     ....RRRRRRR.....
    3102:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    3112:	00 00 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3122:	07 09 09 00 09 09 07 09 09 09 09 00 09 09 09 07     ................
    3132:	09 09 09 00 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3142:	09 09 09 09 52 09 09 09 09 09 07 09 52 09 09 09     ....R.......R...
    3152:	09 09 09 07 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3162:	09 09 09 09 52 09 09 09 09 09 09 09 00 00 00 00     ....R...........
    3172:	00 00 00 00 09 09 07 09 09 09 09 00 09 09 09 09     ................
    3182:	09 09 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3192:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    31a2:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
    31b2:	00 00 00 00 52 52 52 52 52 52 52 52 52 09 09 09     ....RRRRRRRRR...
    31c2:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    31d2:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    31e2:	09 09 07 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    31f2:	09 09 07 09 52 52 52 52 52 52 52 00 09 09 09 09     ....RRRRRRR.....
    3202:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    3212:	00 00 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3222:	09 09 09 00 07 09 09 09 09 09 09 00 09 09 09 09     ................
    3232:	09 09 09 00 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3242:	09 09 09 09 52 09 09 09 09 07 09 09 52 09 09 09     ....R.......R...
    3252:	09 09 09 07 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3262:	09 09 09 09 52 09 09 09 09 09 09 09 00 00 00 00     ....R...........
    3272:	00 00 00 00 09 09 09 07 09 09 09 00 09 07 09 09     ................
    3282:	09 09 09 00 09 07 09 09 09 09 09 00 09 09 09 09     ................
    3292:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    32a2:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
    32b2:	00 00 00 00 52 52 52 52 52 52 52 52 52 09 09 09     ....RRRRRRRRR...
    32c2:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    32d2:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    32e2:	07 09 09 09 52 09 09 09 09 09 09 07 52 09 09 09     ....R.......R...
    32f2:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3302:	09 09 09 09 52 09 09 09 09 09 09 07 52 09 09 09     ....R.......R...
    3312:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3322:	09 09 09 09 52 09 09 09 09 09 09 09 00 00 00 00     ....R...........
    3332:	00 00 00 00 07 09 09 09 09 09 09 00 07 09 09 07     ................
    3342:	09 09 09 00 09 07 09 09 09 09 09 00 09 09 09 09     ................
    3352:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    3362:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
    3372:	00 00 00 00 52 52 52 52 52 52 52 52 52 09 09 09     ....RRRRRRRRR...
    3382:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3392:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    33a2:	07 09 07 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    33b2:	09 09 09 09 52 52 52 52 52 52 52 00 09 09 09 09     ....RRRRRRR.....
    33c2:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    33d2:	00 00 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    33e2:	07 09 09 00 09 09 09 09 09 09 09 00 09 09 07 09     ................
    33f2:	09 09 09 00 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3402:	07 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3412:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3422:	09 09 09 09 52 09 09 09 09 09 09 09 00 00 00 00     ....R...........
    3432:	00 00 00 00 09 09 09 09 09 09 09 00 09 09 09 07     ................
    3442:	09 09 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3452:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    3462:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
    3472:	00 00 00 00 52 52 52 52 52 52 52 52 52 09 09 09     ....RRRRRRRRR...
    3482:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3492:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    34a2:	09 09 09 09 52 09 09 09 07 09 09 09 52 09 09 09     ....R.......R...
    34b2:	09 09 07 09 52 52 52 52 52 52 52 00 09 09 09 09     ....RRRRRRR.....
    34c2:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    34d2:	00 00 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    34e2:	09 09 09 00 09 09 09 09 09 09 09 00 07 09 07 09     ................
    34f2:	07 09 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3502:	09 09 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3512:	09 09 09 00 09 09 07 09 07 00 09 00 09 09 09 09     ................
    3522:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
    3532:	00 00 00 00 52 52 52 52 52 52 52 52 52 09 09 09     ....RRRRRRRRR...
    3542:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    3552:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3562:	09 09 09 09 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3572:	09 09 07 09 52 52 52 52 52 52 52 00 09 09 09 09     ....RRRRRRR.....
    3582:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    3592:	00 00 09 00 09 09 09 09 09 09 09 00 09 07 09 09     ................
    35a2:	09 09 09 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    35b2:	09 09 09 00 52 09 09 09 09 09 09 07 52 09 09 09     ....R.......R...
    35c2:	09 09 09 09 52 09 09 09 09 07 09 07 52 09 09 09     ....R.......R...
    35d2:	09 09 09 09 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    35e2:	09 09 09 09 52 09 09 09 09 09 09 09 00 00 00 00     ....R...........
    35f2:	00 00 00 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    3602:	09 09 09 00 09 09 07 09 07 09 09 00 09 09 09 09     ................
    3612:	09 09 09 00 09 09 09 09 07 00 09 00 09 09 09 09     ................
    3622:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
    3632:	00 00 00 00 52 52 52 52 52 52 52 00 09 09 09 09     ....RRRRRRR.....
    3642:	09 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    3652:	00 00 09 00 09 09 09 09 09 09 09 00 09 09 09 07     ................
    3662:	07 09 09 00 07 09 09 09 09 09 09 00 09 09 09 09     ................
    3672:	09 09 09 00 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3682:	09 09 09 07 52 09 09 09 09 09 09 09 52 09 09 09     ....R.......R...
    3692:	09 09 09 07 52 09 52 00 09 09 09 09 52 09 00 00     ....R.R.....R...
    36a2:	09 09 09 09 52 09 09 09 09 09 09 09 00 00 00 00     ....R...........
    36b2:	00 00 00 00 09 09 09 09 09 09 09 00 09 09 09 09     ................
    36c2:	09 09 09 00 09 09 07 07 09 09 09 00 09 09 09 09     ................
    36d2:	07 09 09 00 09 09 09 09 52 00 09 00 09 09 09 09     ........R.......
    36e2:	00 00 09 00 09 09 09 09 09 09 09 00 00 00 00 00     ................
	...
    36fe:	00 00 ee ee ee ee ee ee 00 ee 3f 3f 3f 3f 3f 3f     ..........??????
    370e:	ee 3f 3f 3f 3f 3f 3f 3f ee 3f 3f 3f 3f 3f 3f 3f     .???????.???????
    371e:	ee 3f 3f 3f 00 00 3f 3f ee 3f 3f 00 3f 3f 00 3f     .???..??.??.??.?
    372e:	ee 3f 3f 00 3f 3f 00 3f 00 00 00 00 00 00 00 00     .??.??.?........
    373e:	ee ee ee ee ee 00 00 00 3f 3f 3f 3f 3f ee 00 00     ........?????...
    374e:	3f 3f 3f 3f 3f 3f ee 52 3f 3f 3f 3f 3f 3f ee 52     ??????.R??????.R
    375e:	00 00 00 3f 3f 3f ee 52 3f 3f 3f 00 3f 3f ee 52     ...???.R???.??.R
    376e:	3f 00 00 3f 3f 3f ee 52 ee 3f 3f 00 3f 3f 00 3f     ?..???.R.??.??.?
    377e:	ee 3f 3f 3f 00 00 3f 3f ee 3f 3f 3f 3f 3f 3f 3f     .???..??.???????
    378e:	ee 3f 3f 3f 3f 3f 3f 3f 00 ee 3f 3f 3f 3f 3f 3f     .???????..??????
    379e:	00 00 ee ee ee ee ee ee 00 00 00 52 52 52 52 52     ...........RRRRR
    37ae:	00 00 00 00 00 52 52 52 00 3f 3f 3f 3f 3f ee 52     .....RRR.?????.R
    37be:	00 00 00 00 3f 3f ee 52 3f 3f 3f 3f 3f 3f ee 52     ....??.R??????.R
    37ce:	3f 3f 3f 3f 3f 3f ee 52 3f 3f 3f 3f 3f ee 52 52     ??????.R?????.RR
    37de:	ee ee ee ee ee 52 52 52 52 52 52 52 52 52 52 00     .....RRRRRRRRRR.
    37ee:	52 52 52 52 52 52 00 00 00 00 00 00 00 00 00 00     RRRRRR..........
	...
    380e:	00 c0 00 00 00 00 00 00 00 c0 00 00 00 00 c0 00     ................
	...
    3836:	00 00 c0 00 00 00 00 00 00 c0 00 00 00 00 00 00     ................
	...
    386a:	00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    388e:	00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38a6:	00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    38c2:	00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    38d2:	00 00 00 00 00 00 00 c0 00 00 00 c0 00 00 00 00     ................
	...
    391a:	00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    392a:	c0 00 00 00 00 00 00 00 00 00 c0 00 00 00 00 00     ................
    393a:	00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 c0     ................
	...
    396a:	00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    398e:	00 00 00 c0 00 00 00 c0 00 00 00 00 00 00 00 00     ................
	...
    39a6:	00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39b6:	00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39de:	00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    39ee:	00 00 00 00 00 c0 00 00                             ........

000039f6 <tsprite_table>:
    39f6:	e4 00 3a 01 7c 01 86 01 89 01 8c 01 92 01 98 01     ..:.|...........
    3a06:	9e 01 a4 01 aa 01 b0 01 b6 01 bc 01 bf 01 c2 01     ................
    3a16:	c5 01 c8 01 cb 01 ce 01 d1 01 d4 01 d7 01 da 01     ................
    3a26:	dd 01 e0 01 e3 01 e6 01 e9 01 ec 01 ef 01 f2 01     ................
    3a36:	f5 01 f8 01 fb 01 fe 01 04 02 0a 02 10 02 16 02     ................
    3a46:	1c 02 22 02 28 02 2e 02 34 02 3a 02 40 02 46 02     ..".(...4.:.@.F.
    3a56:	4c 02 52 02 58 02 5e 02 61 02 64 02 67 02 6a 02     L.R.X.^.a.d.g.j.
    3a66:	6d 02 70 02 73 02                                   m.p.s.

00003a6c <baddie_100_smap>:
    3a6c:	02 02 01 02 03 04                                   ......

00003a72 <baddie_400_smap>:
    3a72:	02 02 05 02 06 04                                   ......

00003a78 <baddie_d_a_smap>:
    3a78:	02 02 07 08 09 0a                                   ......

00003a7e <baddie_d_b_smap>:
    3a7e:	02 02 0b 0c 0d 0e                                   ......

00003a84 <baddie_l_a_smap>:
    3a84:	02 02 0f 10 11 12                                   ......

00003a8a <baddie_l_b_smap>:
    3a8a:	02 02 13 14 15 16                                   ......

00003a90 <baddie_r_a_smap>:
    3a90:	02 02 17 18 19 1a                                   ......

00003a96 <baddie_r_b_smap>:
    3a96:	02 02 1b 1c 1d 1e                                   ......

00003a9c <baddie_stun_a_smap>:
    3a9c:	02 02 1f 20 21 22                                   ... !"

00003aa2 <baddie_stun_b_smap>:
    3aa2:	02 02 23 24 25 26                                   ..#$%&

00003aa8 <baddie_u_a_smap>:
    3aa8:	02 02 07 08 09 0a                                   ......

00003aae <baddie_u_b_smap>:
    3aae:	02 02 0b 0c 0d 0e                                   ......

00003ab4 <beam_02_smap>:
    3ab4:	02 02 27 28 29 2a                                   ..'()*

00003aba <beam_06_smap>:
    3aba:	02 02 2b 2c 2d 2e                                   ..+,-.

00003ac0 <beam_10_smap>:
    3ac0:	02 02 2f 30 31 32                                   ../012

00003ac6 <beam_18_smap>:
    3ac6:	02 02 33 34 35 36                                   ..3456

00003acc <ch90_exp_a_smap>:
    3acc:	02 02 37 38 39 3a                                   ..789:

00003ad2 <ch90_exp_b_smap>:
    3ad2:	02 02 3b 3c 3d 3e                                   ..;<=>

00003ad8 <ch90_exp_c_smap>:
    3ad8:	02 02 3f 40 41 42                                   ..?@AB

00003ade <ch90_exp_d_smap>:
    3ade:	02 02 43 44 45 46                                   ..CDEF

00003ae4 <ch90_exp_e_smap>:
    3ae4:	02 02 47 44 48 46                                   ..GDHF

00003aea <ch90_exp_f_smap>:
    3aea:	02 02 49 44 4a 4b                                   ..IDJK

00003af0 <pengo_walk_down_a_smap>:
    3af0:	02 02 4c 4d 4e 4f                                   ..LMNO

00003af6 <pengo_walk_down_b_smap>:
    3af6:	02 02 4c 50 51 52                                   ..LPQR

00003afc <pengo_walk_down_c_smap>:
    3afc:	02 02 4c 50 53 54                                   ..LPST

00003b02 <pengo_walk_left_a_smap>:
    3b02:	02 02 55 56 57 58                                   ..UVWX

00003b08 <pengo_walk_left_b_smap>:
    3b08:	02 02 55 59 5a 5b                                   ..UYZ[

00003b0e <pengo_walk_left_c_smap>:
    3b0e:	02 02 5c 5d 5e 5f                                   ..\]^_

00003b14 <pengo_walk_right_a_smap>:
    3b14:	02 02 60 61 62 63                                   ..`abc

00003b1a <pengo_walk_right_b_smap>:
    3b1a:	02 02 64 61 65 66                                   ..daef

00003b20 <pengo_walk_right_c_smap>:
    3b20:	02 02 67 68 69 6a                                   ..ghij

00003b26 <pengo_walk_up_a_smap>:
    3b26:	02 02 6b 6c 6d 6e                                   ..klmn

00003b2c <pengo_walk_up_b_smap>:
    3b2c:	02 02 6b 6f 70 71                                   ..kopq

00003b32 <pengo_walk_up_c_smap>:
    3b32:	02 02 72 6c 73 74                                   ..rlst

00003b38 <sp_data>:
	...
    3b78:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b88:	fe fe fe ff fe fe fe ff fe fe fe ff fe fe ff fe     ................
    3b98:	fe fe ff ff fe fe ff fe fe ff fe ff fe fe ff fe     ................
    3ba8:	fe fe fe ff fe fe ff fe fe fe fe ff fe fe ff fe     ................
    3bb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bc8:	ff fe fe fe ff ff fe fe fe ff fe ff fe fe ff fe     ................
    3bd8:	fe ff fe ff fe fe ff fe fe ff fe ff fe fe ff fe     ................
    3be8:	fe ff fe ff fe fe ff fe fe ff fe ff fe fe ff fe     ................
    3bf8:	fe fe fe ff fe fe ff fe fe fe fe ff fe fe ff fe     ................
    3c08:	fe fe fe ff fe fe ff fe fe fe fe ff fe fe ff fe     ................
    3c18:	fe fe fe ff fe fe ff fe fe ff ff ff ff fe fe ff     ................
    3c28:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c38:	fe ff fe ff fe fe ff fe fe ff fe ff fe fe ff fe     ................
    3c48:	fe ff fe ff fe fe ff fe fe ff fe ff fe fe ff fe     ................
    3c58:	fe ff fe ff fe fe ff fe ff fe fe fe ff ff fe fe     ................
    3c68:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c78:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c88:	fe fe fe fe ff fe fe ff fe fe fe ff ff fe ff fe     ................
    3c98:	fe fe ff fe ff fe ff fe fe ff fe fe ff fe ff fe     ................
    3ca8:	fe ff fe fe ff fe ff fe fe ff fe fe ff fe ff fe     ................
    3cb8:	fe ff ff ff ff fe ff fe fe fe fe fe ff fe ff fe     ................
    3cc8:	fe fe fe fe ff fe ff fe fe fe fe fe ff fe ff fe     ................
    3cd8:	fe fe fe fe ff fe ff fe fe fe fe fe ff fe fe ff     ................
    3ce8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3cf8:	fe fe fe f7 f7 f7 f7 fe fe fe fe f7 00 00 f7 38     ...............8
    3d08:	fe fe 30 f7 00 00 f7 38 fe 30 30 f7 f7 f7 f7 38     ..0....8.00....8
    3d18:	fe 30 30 30 30 38 38 38 fe 30 07 07 07 07 07 06     .0000888.0......
    3d28:	fe 30 07 00 3f 3f 00 3f fe 30 07 00 3f 3f 00 3f     .0..??.?.0..??.?
    3d38:	fe f7 f7 f7 f7 fe fe fe 30 f7 00 00 f7 fe fe fe     ........0.......
    3d48:	30 f7 00 00 f7 30 fe fe 30 f7 f7 f7 f7 30 30 fe     0....0..0....00.
    3d58:	38 38 38 38 38 38 38 fe 06 07 07 06 06 07 30 fe     8888888.......0.
    3d68:	3f 00 3f 3f 00 07 30 fe 3f 00 3f 3f 00 07 30 fe     ?.??..0.?.??..0.
    3d78:	fe 30 07 00 3f 3f 00 3f fe 30 07 07 07 07 07 07     .0..??.?.0......
    3d88:	fe 30 30 30 30 30 30 30 fe fe 30 30 30 30 30 30     .0000000..000000
    3d98:	fe fe fe fe 30 fe fe fe fe fe 30 30 30 30 30 fe     ....0.....00000.
    3da8:	fe fe 30 fe 30 fe 30 fe fe fe fe fe fe fe fe fe     ..0.0.0.........
    3db8:	3f 00 3f 3f 00 07 30 fe 07 07 07 07 07 07 30 fe     ?.??..0.......0.
    3dc8:	30 30 30 30 30 30 30 fe 30 30 38 38 30 38 fe fe     0000000.008808..
    3dd8:	fe fe fe 30 fe fe fe fe fe fe fe 30 fe fe fe fe     ...0.......0....
    3de8:	fe 30 30 30 30 30 fe fe fe 30 fe 30 fe 30 fe fe     .00000...0.0.0..
    3df8:	fe fe fe f7 f7 f7 f7 fe fe fe fe f7 00 00 f7 30     ...............0
    3e08:	fe fe 30 f7 00 00 f7 30 fe 30 30 f7 f7 f7 f7 30     ..0....0.00....0
    3e18:	fe 38 38 38 38 38 38 38 fe 30 07 06 06 07 07 06     .8888888.0......
    3e28:	fe 30 07 00 3f 3f 00 3f fe 30 07 00 00 00 00 00     .0..??.?.0......
    3e38:	fe f7 f7 f7 f7 fe fe fe 38 f7 00 00 f7 fe fe fe     ........8.......
    3e48:	38 f7 00 00 f7 30 fe fe 38 f7 f7 f7 f7 30 30 fe     8....0..8....00.
    3e58:	38 38 38 30 30 30 30 fe 06 07 07 07 07 07 30 fe     8880000.......0.
    3e68:	3f 00 3f 3f 00 07 30 fe 00 00 00 00 00 07 30 fe     ?.??..0.......0.
    3e78:	fe 30 07 00 3f 3f 00 3f fe 30 07 07 07 07 07 07     .0..??.?.0......
    3e88:	fe 30 30 30 30 30 30 30 fe fe 38 30 38 38 30 30     .0000000..808800
    3e98:	fe fe fe fe 30 fe fe fe fe fe fe fe 30 fe fe fe     ....0.......0...
    3ea8:	fe fe 30 30 30 30 30 fe fe fe 30 fe 30 fe 30 fe     ..00000...0.0.0.
    3eb8:	3f 00 3f 3f 00 07 30 fe 07 07 07 07 07 07 30 fe     ?.??..0.......0.
    3ec8:	30 30 30 30 30 30 30 fe 30 30 30 30 30 30 fe fe     0000000.000000..
    3ed8:	fe fe fe 30 fe fe fe fe fe 30 30 30 30 30 fe fe     ...0.....00000..
    3ee8:	fe 30 fe 30 fe 30 fe fe fe fe fe fe fe fe fe fe     .0.0.0..........
    3ef8:	fe ff ff ff ff fe fe ff fe ff 00 00 ff 38 38 ff     .............88.
    3f08:	fe ff 00 00 ff 38 38 ff fe ff ff ff ff 38 38 ff     .....88......88.
    3f18:	fe 38 38 38 38 38 38 38 fe 07 07 06 06 07 07 06     .8888888........
    3f28:	fe 3e 3d 00 00 3e 3e 00 fe 00 00 00 00 00 00 00     .>=..>>.........
    3f38:	ff ff ff fe fe fe fe fe 00 00 ff 38 38 fe fe fe     ...........88...
    3f48:	00 00 ff 38 30 30 fe fe ff ff ff 30 30 30 30 fe     ...800.....0000.
    3f58:	38 38 38 30 30 30 30 fe 06 07 07 07 30 30 30 fe     8880000.....000.
    3f68:	00 3f 3e 07 38 30 30 fe 00 00 00 07 38 30 30 fe     .?>.800.....800.
    3f78:	fe 3e 3e 00 00 3e 3e 00 fe 3e 3f 00 00 3f 3f 00     .>>..>>..>?..??.
    3f88:	fe 06 06 06 06 06 06 06 fe 38 38 30 38 38 38 38     .........8808888
    3f98:	fe fe fe 30 30 30 30 30 fe fe fe fe 30 fe fe fe     ...00000....0...
    3fa8:	fe 28 28 28 30 28 fe fe fe 30 fe 30 fe 30 fe fe     .(((0(...0.0.0..
    3fb8:	00 3e 3e 07 38 30 30 fe 00 3f 3f 07 38 30 30 fe     .>>.800..??.800.
    3fc8:	06 06 06 06 30 30 30 fe 38 38 38 30 30 30 fe fe     ....000.888000..
    3fd8:	38 30 30 30 30 fe fe fe fe fe 30 fe fe fe fe fe     80000.....0.....
    3fe8:	28 28 30 28 28 fe fe fe 30 fe 30 fe 30 fe fe fe     ((0((...0.0.0...
    3ff8:	fe ff ff ff ff fe fe ff fe ff 00 00 ff 38 38 ff     .............88.
    4008:	fe ff 00 00 ff 38 38 ff fe ff ff ff ff 38 38 ff     .....88......88.
    4018:	fe 38 38 38 38 38 38 38 fe 07 07 06 06 07 07 06     .8888888........
    4028:	fe 06 06 06 06 06 06 06 fe 3e 3e 00 00 3e 3e 00     .........>>..>>.
    4038:	ff ff ff fe fe fe fe fe 00 00 ff 38 38 fe fe fe     ...........88...
    4048:	00 00 ff 38 30 30 fe fe ff ff ff 30 30 30 30 fe     ...800.....0000.
    4058:	38 38 38 30 30 30 30 fe 06 07 07 07 30 30 30 fe     8880000.....000.
    4068:	06 06 06 07 38 30 30 fe 00 3e 3e 07 38 30 30 fe     ....800..>>.800.
    4078:	fe 3e 3e 00 00 3e 3e 00 fe 06 06 06 06 06 06 06     .>>..>>.........
    4088:	fe 06 06 06 06 06 06 06 fe 38 38 30 38 38 38 38     .........8808888
    4098:	fe fe fe 30 30 30 30 30 fe fe fe fe 30 fe fe fe     ...00000....0...
    40a8:	30 30 30 30 30 fe fe fe 30 fe 30 fe 30 fe fe fe     00000...0.0.0...
    40b8:	00 3e 3e 07 38 30 30 fe 06 06 06 07 38 30 30 fe     .>>.800.....800.
    40c8:	06 06 06 06 30 30 30 fe 38 38 38 30 30 30 fe fe     ....000.888000..
    40d8:	38 30 30 30 30 fe fe fe fe fe 30 fe fe fe fe fe     80000.....0.....
    40e8:	fe 30 30 30 30 30 fe fe fe 30 fe 30 fe 30 fe fe     .00000...0.0.0..
    40f8:	fe fe fe fe fe ff ff ff fe fe fe 38 38 ff 00 00     ...........88...
    4108:	fe fe 30 30 38 ff 00 00 fe 30 30 30 30 ff ff ff     ..008....0000...
    4118:	fe 30 30 30 30 38 38 38 fe 30 30 30 07 07 07 06     .0000888.000....
    4128:	fe 30 30 38 07 3e 3f 00 fe 30 30 38 07 00 00 00     .008.>?..008....
    4138:	ff fe fe ff ff ff ff fe ff 38 38 ff 00 00 ff fe     .........88.....
    4148:	ff 38 38 ff 00 00 ff fe ff 38 38 ff ff ff ff fe     .88......88.....
    4158:	38 38 38 38 38 38 38 fe 06 07 07 06 06 07 07 fe     8888888.........
    4168:	00 3e 3e 00 00 3d 3e fe 00 00 00 00 00 00 00 fe     .>>..=>.........
    4178:	fe 30 30 38 07 3e 3e 00 fe 30 30 38 07 3f 3f 00     .008.>>..008.??.
    4188:	fe 30 30 30 06 06 06 06 fe fe 30 30 30 38 38 38     .000......000888
    4198:	fe fe fe 30 30 30 30 38 fe fe fe fe fe 30 fe fe     ...00008.....0..
    41a8:	fe fe fe 28 28 30 28 28 fe fe fe 30 fe 30 fe 30     ...((0((...0.0.0
    41b8:	00 3e 3e 00 00 3e 3e fe 00 3f 3f 00 00 3f 3e fe     .>>..>>..??..?>.
    41c8:	06 06 06 06 06 06 06 fe 38 38 38 38 30 38 38 fe     ........8888088.
    41d8:	30 30 30 30 30 fe fe fe fe fe fe 30 fe fe fe fe     00000......0....
    41e8:	fe fe 28 30 28 28 28 fe fe fe 30 fe 30 fe 30 fe     ..(0(((...0.0.0.
    41f8:	fe fe fe fe fe ff ff ff fe fe fe 38 38 ff 00 00     ...........88...
    4208:	fe fe 30 30 38 ff 00 00 fe 30 30 30 30 ff ff ff     ..008....0000...
    4218:	fe 30 30 30 30 38 38 38 fe 30 30 30 07 07 07 06     .0000888.000....
    4228:	fe 30 30 38 07 06 06 06 fe 30 30 38 07 3e 3e 00     .008.....008.>>.
    4238:	ff fe fe ff ff ff ff fe ff 38 38 ff 00 00 ff fe     .........88.....
    4248:	ff 38 38 ff 00 00 ff fe ff 38 38 ff ff ff ff fe     .88......88.....
    4258:	38 38 38 38 38 38 38 fe 06 07 07 06 06 07 07 fe     8888888.........
    4268:	06 06 06 06 06 06 06 fe 00 3e 3e 00 00 3e 3e fe     .........>>..>>.
    4278:	fe 30 30 38 07 3e 3e 00 fe 30 30 38 07 06 06 06     .008.>>..008....
    4288:	fe 30 30 30 06 06 06 06 fe fe 30 30 30 38 38 38     .000......000888
    4298:	fe fe fe 30 30 30 30 38 fe fe fe fe fe 30 fe fe     ...00008.....0..
    42a8:	fe fe 30 30 30 30 30 fe fe fe 30 fe 30 fe 30 fe     ..00000...0.0.0.
    42b8:	00 3e 3e 00 00 3e 3e fe 06 06 06 06 06 06 06 fe     .>>..>>.........
    42c8:	06 06 06 06 06 06 06 fe 38 38 38 38 30 38 38 fe     ........8888088.
    42d8:	30 30 30 30 30 fe fe fe fe fe fe 30 fe fe fe fe     00000......0....
    42e8:	fe fe fe 30 30 30 30 30 fe fe fe 30 fe 30 fe 30     ...00000...0.0.0
    42f8:	fe fe fe fe fe fe fe fe fe fe fe f7 fe fe fe fe     ................
    4308:	fe fe fe fe fe fe fe fe fe f7 fe fe fe fe fe fe     ................
    4318:	fe fe fe 00 00 f7 f7 fe fe fe fe 00 00 f7 f7 38     ...............8
    4328:	fe fe 30 f7 f7 f7 f7 38 fe 30 30 f7 f7 f7 f7 38     ..0....8.00....8
    4338:	fe fe fe fe fe fe fe fe f7 fe fe fe fe fe fe fe     ................
    4348:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe f7 fe     ................
    4358:	fe 00 00 f7 f7 fe fe fe 30 00 00 f7 f7 fe fe fe     ........0.......
    4368:	30 f7 f7 f7 f7 30 fe fe 30 f7 f7 f7 f7 30 30 fe     0....0..0....00.
    4378:	fe 30 30 30 30 38 38 38 fe 30 07 07 07 07 07 06     .0000888.0......
    4388:	fe 30 07 00 3f 3f 00 3f fe 30 07 00 3f 3f 00 3f     .0..??.?.0..??.?
    4398:	fe 30 07 00 3f 3f 00 3f fe 30 07 07 07 07 07 07     .0..??.?.0......
    43a8:	fe 30 30 30 30 30 30 30 fe fe 30 30 30 30 30 30     .0000000..000000
    43b8:	38 38 38 38 38 38 38 fe 06 07 07 06 06 07 30 fe     8888888.......0.
    43c8:	3f 00 3f 3f 00 07 30 fe 3f 00 3f 3f 00 07 30 fe     ?.??..0.?.??..0.
    43d8:	3f 00 3f 3f 00 07 30 fe 07 07 07 07 07 07 30 fe     ?.??..0.......0.
    43e8:	30 30 30 30 30 30 30 fe 30 30 38 38 30 38 fe fe     0000000.008808..
    43f8:	fe fe fe fe fe fe fe fe fe fe fe f7 fe fe fe fe     ................
    4408:	fe fe fe fe fe fe fe fe fe f7 fe fe fe fe fe fe     ................
    4418:	fe fe fe f7 f7 00 00 fe fe fe fe f7 f7 00 00 30     ...............0
    4428:	fe fe 30 f7 f7 f7 f7 30 fe 30 30 f7 f7 f7 f7 30     ..0....0.00....0
    4438:	fe fe fe fe fe fe fe fe f7 fe fe fe fe fe fe fe     ................
    4448:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe f7 fe     ................
    4458:	fe f7 f7 00 00 fe fe fe 38 f7 f7 00 00 fe fe fe     ........8.......
    4468:	38 f7 f7 f7 f7 30 fe fe 38 f7 f7 f7 f7 30 30 fe     8....0..8....00.
    4478:	fe 38 38 38 38 38 38 38 fe 30 07 06 06 07 07 06     .8888888.0......
    4488:	fe 30 07 00 3f 3f 00 3f fe 30 07 00 3f 3f 00 3f     .0..??.?.0..??.?
    4498:	fe 30 07 00 3f 3f 00 3f fe 30 07 07 07 07 07 07     .0..??.?.0......
    44a8:	fe 30 30 30 30 30 30 30 fe fe 38 30 38 38 30 30     .0000000..808800
    44b8:	38 38 38 30 30 30 30 fe 06 07 07 07 07 07 30 fe     8880000.......0.
    44c8:	3f 00 3f 3f 00 07 30 fe 3f 00 3f 3f 00 07 30 fe     ?.??..0.?.??..0.
    44d8:	3f 00 3f 3f 00 07 30 fe 07 07 07 07 07 07 30 fe     ?.??..0.......0.
    44e8:	30 30 30 30 30 30 30 fe 30 30 30 30 30 30 fe fe     0000000.000000..
    44f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4508:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe 38     ...............8
    4518:	fe fe fe 07 fe fe fe fe fe fe fe fe 3f fe 38 38     ............?.88
    4528:	fe fe fe fe fe fe fe 38 fe fe fe fe fe fe fe fe     .......8........
    4538:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4548:	38 fe fe fe fe fe fe fe 38 38 fe fe fe fe fe fe     8.......88......
    4558:	38 fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     8...............
    4568:	fe fe fe fe fe fe fe fe 07 fe 3f fe fe fe fe fe     ..........?.....
    4578:	fe fe fe fe 38 fe fe 07 fe fe fe fe fe fe fe fe     ....8...........
    4588:	fe fe fe fe fe fe 3f fe fe fe fe fe fe fe fe fe     ......?.........
    4598:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    45a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    45b8:	07 07 fe fe fe fe fe fe 07 fe fe 3f fe fe fe fe     ...........?....
    45c8:	fe fe 3f 3f 3f fe fe fe fe fe fe 3f fe 38 fe fe     ..???......?.8..
    45d8:	fe fe fe fe 38 fe fe fe fe fe fe fe fe fe fe fe     ....8...........
    45e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    45f8:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    4608:	fe 07 07 07 07 07 fe fe 07 07 07 07 07 07 07 fe     ................
    4618:	fe 07 07 07 07 07 fe fe fe fe 07 07 07 fe 38 38     ..............88
    4628:	fe fe fe 07 fe 38 38 38 fe fe fe fe 38 fe 38 38     .....888....8.88
    4638:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4648:	38 fe fe fe fe fe fe fe 38 38 fe fe fe fe fe fe     8.......88......
    4658:	38 fe fe fe fe fe fe fe fe 38 fe fe fe fe fe fe     8........8......
    4668:	38 fe 3f fe fe fe fe fe fe 3f 3f 3f fe fe fe fe     8.?......???....
    4678:	fe fe fe 38 38 38 fe 38 fe fe fe fe 38 fe 3f fe     ...888.8....8.?.
    4688:	fe fe fe fe fe 3f 3f 3f fe fe fe fe fe fe 3f fe     .....???......?.
    4698:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46b8:	fe fe 3f fe fe fe fe fe 07 fe fe 3f fe fe fe fe     ..?........?....
    46c8:	fe fe 3f 3f 3f fe fe fe 07 fe fe 3f fe 38 38 fe     ..???......?.88.
    46d8:	fe fe fe fe 38 38 fe fe fe fe fe fe 38 fe fe fe     ....88......8...
    46e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4708:	fe fe fe 07 fe fe fe fe fe fe 07 07 07 fe fe fe     ................
    4718:	fe fe fe 07 fe 3f fe 38 fe fe 3f fe fe fe 38 38     .....?.8..?...88
    4728:	fe fe fe fe 38 fe fe 38 fe fe fe 38 38 38 fe fe     ....8..8...888..
    4738:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4748:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4758:	fe fe fe fe fe fe fe fe 38 fe 3f fe fe fe fe fe     ........8.?.....
    4768:	fe 3f 3f 3f fe fe fe fe 3f 3f 3f 3f 3f fe fe fe     .???....?????...
    4778:	fe fe 38 38 38 38 38 fe fe fe fe 38 38 38 fe 3f     ..88888....888.?
    4788:	fe fe fe fe 38 fe 3f fe fe fe fe fe fe 3f 3f 3f     ....8.?......???
    4798:	fe fe fe fe fe fe 3f fe fe fe fe fe fe fe fe fe     ......?.........
    47a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    47b8:	fe 3f 3f 3f fe fe fe fe fe fe 3f fe fe fe fe fe     .???......?.....
    47c8:	3f 3f fe 3f 3f fe fe fe fe 3f 3f 3f fe fe fe fe     ??.??....???....
    47d8:	fe fe 3f fe fe fe fe fe fe fe fe fe fe fe fe fe     ..?.............
    47e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    47f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4808:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4818:	fe fe fe fe 3f fe fe fe fe fe fe 3f 3f 3f fe fe     ....?......???..
    4828:	fe fe fe fe fe fe fe fe fe fe fe fe 38 fe fe fe     ............8...
    4838:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4848:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4858:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4868:	fe fe 3f fe fe fe fe fe fe 3f 3f 3f fe fe fe fe     ..?......???....
    4878:	fe fe fe 38 38 38 fe fe fe fe fe fe 38 fe 3f fe     ...888......8.?.
    4888:	fe fe fe fe fe 3f 3f 3f fe fe fe fe fe fe 3f fe     .....???......?.
    4898:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48b8:	fe fe 3f fe fe fe fe fe fe fe fe fe fe fe fe fe     ..?.............
    48c8:	fe 3f 3f 3f fe fe fe fe fe fe 3f fe fe fe fe fe     .???......?.....
    48d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    48f8:	fe fe f6 f6 f7 f7 f7 fe fe fe f6 00 00 00 f7 38     ...............8
    4908:	fe fe f6 00 00 00 f7 38 fe 30 f6 00 00 00 f7 38     .......8.0.....8
    4918:	fe 38 f6 f6 f6 f6 f6 38 fe 30 38 06 06 07 07 06     .8.....8.08.....
    4928:	fe 30 06 06 00 00 00 00 fe 30 07 00 00 00 00 00     .0.......0......
    4938:	fe f7 f7 f7 f7 f6 fe fe 38 f6 00 00 00 f6 fe fe     ........8.......
    4948:	38 f6 00 00 00 f6 fe fe 38 f6 00 00 00 f6 30 fe     8.......8.....0.
    4958:	38 f6 f6 f6 f6 f6 30 fe 06 07 07 07 06 38 30 fe     8.....0......80.
    4968:	00 00 00 00 06 07 30 fe 00 00 00 00 00 07 30 fe     ......0.......0.
    4978:	fe 30 07 00 00 00 00 00 fe 30 07 06 00 00 00 00     .0.......0......
    4988:	fe 30 30 06 06 06 06 06 fe fe 38 30 38 38 30 30     .00.......808800
    4998:	fe fe fe fe 30 fe fe fe fe fe fe fe 30 fe fe fe     ....0.......0...
    49a8:	fe fe 30 30 30 30 30 fe fe fe 30 fe 30 fe 30 fe     ..00000...0.0.0.
    49b8:	00 00 00 00 00 07 30 fe 00 00 00 00 07 07 30 fe     ......0.......0.
    49c8:	06 06 06 06 06 30 30 fe 30 30 30 30 30 30 fe fe     .....00.000000..
    49d8:	fe fe fe 30 fe fe fe fe fe 30 30 30 30 30 fe fe     ...0.....00000..
    49e8:	fe 30 fe 30 fe 30 fe fe fe fe fe fe fe fe fe fe     .0.0.0..........
    49f8:	fe f7 f6 f6 f7 f7 f7 fe fe f7 00 00 00 00 f7 fe     ................
    4a08:	fe f7 00 00 00 00 f7 fe fe f7 00 00 00 00 f7 fe     ................
    4a18:	fe f7 00 00 07 07 07 07 fe f7 f7 07 07 00 00 00     ................
    4a28:	fe 30 06 07 00 00 00 00 fe 30 07 00 00 00 00 00     .0.......0......
    4a38:	fe f7 f7 f7 f7 f6 f7 fe fe f6 00 00 00 00 f7 fe     ................
    4a48:	fe f6 00 00 00 00 f7 fe fe f6 00 00 00 00 f7 fe     ................
    4a58:	07 07 07 07 00 00 f7 fe 00 00 00 07 07 f7 f7 fe     ................
    4a68:	00 00 00 00 06 07 30 fe 00 00 00 00 00 07 30 fe     ......0.......0.
    4a78:	fe 30 07 00 00 00 00 00 fe 30 07 06 00 00 00 00     .0.......0......
    4a88:	fe 30 30 06 06 00 00 00 fe fe 38 30 07 07 07 07     .00.......80....
    4a98:	fe fe fe 38 30 38 38 38 fe fe fe fe 30 38 38 38     ...80888....0888
    4aa8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4ab8:	00 00 00 00 00 07 30 fe 00 00 00 00 07 07 30 fe     ......0.......0.
    4ac8:	00 00 00 06 06 30 30 fe 07 07 07 07 30 30 fe fe     .....00.....00..
    4ad8:	38 38 38 30 38 fe fe fe 38 38 30 38 fe fe fe fe     88808...8808....
    4ae8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4af8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4b08:	fe fe fe fe 06 06 06 06 fe fe fe 06 fe fe fe fe     ................
    4b18:	fe fe 06 fe fe fe fe fe fe 06 fe fe fe fe fe fe     ................
    4b28:	06 fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe     ................
    4b38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4b48:	06 06 06 06 fe fe fe fe fe fe fe fe 06 fe fe fe     ................
    4b58:	fe fe fe fe fe 06 fe fe fe fe fe fe fe fe 06 fe     ................
    4b68:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe 06     ................
    4b78:	06 fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe     ................
    4b88:	06 fe fe fe fe fe fe fe fe 06 fe fe fe fe fe fe     ................
    4b98:	fe fe 06 fe fe fe fe fe fe fe fe 06 fe fe fe fe     ................
    4ba8:	fe fe fe fe 06 06 06 06 fe fe fe fe fe fe fe fe     ................
    4bb8:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe 06     ................
    4bc8:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe 06 fe     ................
    4bd8:	fe fe fe fe fe 06 fe fe fe fe fe fe 06 fe fe fe     ................
    4be8:	06 06 06 06 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4bf8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c18:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe 06     ................
    4c28:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe fe     ................
    4c38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c48:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c58:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c68:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4c78:	fe fe 06 06 06 06 fe fe fe fe fe fe fe fe fe fe     ................
    4c88:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe 06     ................
    4c98:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe fe     ................
    4ca8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4cb8:	fe 06 06 06 06 fe fe fe fe fe fe fe fe fe fe fe     ................
    4cc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4cd8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4ce8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4cf8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4d08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4d18:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe 06     ................
    4d28:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4d38:	fe fe 06 06 06 06 fe fe fe fe fe fe fe fe fe fe     ................
    4d48:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 06     ................
    4d58:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe fe     ................
    4d68:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4d78:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4d88:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4d98:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe fe     ................
    4da8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4db8:	fe fe 06 06 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4dc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4dd8:	fe fe fe fe fe fe fe 06 fe fe fe fe fe fe fe fe     ................
    4de8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4df8:	fe fe fe 06 06 fe fe fe fe fe fe fe fe fe fe fe     ................
    4e08:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4e18:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4e28:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4e38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe f6 f6     ................
    4e48:	fe fe fe fe f6 f6 f6 f6 fe fe fe f6 f6 f6 f6 f6     ................
    4e58:	fe fe f6 f6 f6 f6 f6 f6 fe fe f6 f6 f6 f6 f6 f6     ................
    4e68:	fe fe f6 af af af 01 af fe fe f6 af af af 01 af     ................
    4e78:	fe fe eb f6 fe fe fe fe f6 07 eb f6 07 fe fe fe     ................
    4e88:	f6 f6 f6 07 e7 07 fe fe f6 f6 f6 f6 07 e7 fe fe     ................
    4e98:	f6 f6 f6 f6 f6 07 fe fe f6 f6 f6 f6 f6 07 fe fe     ................
    4ea8:	01 af af af f6 fe 2f fe 01 af af af f6 fe fe 2f     ....../......../
    4eb8:	fe fe fe f6 af af af af fe fe eb f6 f6 f6 f6 f6     ................
    4ec8:	fe fe eb f6 f6 f6 f6 f6 fe fe eb f6 f6 f6 f6 f6     ................
    4ed8:	fe fe fe f6 f6 f6 f6 f6 fe fe fe 01 f6 f6 f6 f6     ................
    4ee8:	fe fe fe 01 01 f6 f6 01 fe fe fe fe fe 01 01 01     ................
    4ef8:	af af af f6 fe fe fe 2f f6 f6 f6 f6 eb fe 2f fe     ......./....../.
    4f08:	f6 f6 f6 f6 eb fe fe 2f f6 f6 f6 f6 eb fe fe fe     ......./........
    4f18:	f6 f6 f6 f6 fe fe fe fe f6 f6 f6 01 fe fe fe fe     ................
    4f28:	f6 f6 01 01 fe fe fe fe 01 01 fe fe fe fe fe fe     ................
    4f38:	fe fe eb f6 fe fe fe fe f6 07 eb f6 07 fe fe fe     ................
    4f48:	f6 f6 f6 07 e7 07 fe fe f6 f6 f6 f6 07 e7 fe fe     ................
    4f58:	f6 f6 f6 f6 f6 07 fe fe f6 f6 f6 f6 f6 07 fe fe     ................
    4f68:	01 af af af f6 fe 2f fe 01 af af af f6 fe 2f fe     ....../......./.
    4f78:	fe fe fe f6 af af af af fe fe fe eb f6 f6 f6 f6     ................
    4f88:	fe fe fe f6 f6 f6 f6 f6 fe fe fe f6 f6 f6 f6 f6     ................
    4f98:	fe fe fe f6 f6 f6 f6 f6 fe fe fe 01 f6 f6 f6 f6     ................
    4fa8:	fe fe fe 01 01 f6 f6 01 fe fe fe fe 01 f6 f6 01     ................
    4fb8:	af af af f6 fe fe 2f fe f6 f6 f6 eb eb fe fe 2f     ....../......../
    4fc8:	f6 f6 f6 f6 eb eb fe 2f f6 f6 f6 f6 eb eb fe fe     ......./........
    4fd8:	f6 f6 f6 eb eb eb fe fe f6 f6 01 01 eb fe fe fe     ................
    4fe8:	01 01 01 fe fe fe fe fe 01 01 fe fe fe fe fe fe     ................
    4ff8:	fe fe fe f6 af af af af fe fe eb eb f6 f6 f6 f6     ................
    5008:	fe eb eb f6 f6 f6 f6 f6 fe eb eb f6 f6 f6 f6 f6     ................
    5018:	fe eb eb eb f6 f6 f6 f6 fe fe eb 01 01 f6 f6 f6     ................
    5028:	fe fe fe fe 01 01 01 01 fe fe fe fe fe 01 01 01     ................
    5038:	af af af f6 fe 2f fe fe f6 f6 f6 eb fe fe 2f fe     ...../......../.
    5048:	f6 f6 f6 f6 fe fe 2f fe f6 f6 f6 f6 fe fe fe fe     ....../.........
    5058:	f6 f6 f6 f6 fe fe fe fe f6 f6 f6 01 fe fe fe fe     ................
    5068:	f6 f6 01 01 fe fe fe fe f6 f6 01 fe fe fe fe fe     ................
    5078:	fe fe fe fe f6 f6 f6 fe fe fe fe fe f6 f6 f6 f6     ................
    5088:	fe fe f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    5098:	af 01 af 01 af af af af af 01 af 01 af af af af     ................
    50a8:	fe af af af af af af f6 fe fe f6 f6 f6 f6 f6 eb     ................
    50b8:	fe fe fe fe eb f6 fe fe f6 fe fe fe eb f6 fe fe     ................
    50c8:	f6 f6 fe fe eb f6 fe fe f6 f6 f6 fe eb f6 fe fe     ................
    50d8:	f6 f6 f6 07 eb eb 07 fe f6 f6 f6 07 07 e7 e7 07     ................
    50e8:	f6 f6 f6 07 07 07 e7 07 eb fe 07 07 07 07 e7 07     ................
    50f8:	fe f6 f6 f6 f6 f6 f6 eb fe f6 f6 f6 f6 f6 f6 eb     ................
    5108:	fe f6 f6 f6 f6 f6 eb eb fe fe f6 f6 f6 f6 eb eb     ................
    5118:	fe fe 01 01 f6 f6 f6 01 fe 01 f6 f6 f6 f6 f6 01     ................
    5128:	fe 01 01 01 01 01 01 01 fe fe 01 01 01 01 01 01     ................
    5138:	eb f6 07 07 07 07 07 07 eb f6 07 07 07 07 07 07     ................
    5148:	eb fe fe fe 07 e7 fe fe f6 fe 07 07 07 07 07 07     ................
    5158:	01 fe fe fe 2f fe fe fe 01 01 fe 01 2f 01 01 fe     ..../......./...
    5168:	01 01 01 01 2f 01 01 01 01 fe fe 01 01 2f 2f fe     ..../........//.
    5178:	fe fe fe fe eb f6 fe fe f6 fe fe fe eb f6 fe fe     ................
    5188:	f6 f6 fe fe eb f6 fe fe f6 f6 f6 fe eb f6 fe fe     ................
    5198:	f6 f6 f6 07 eb eb 07 fe f6 f6 f6 07 07 e7 e7 07     ................
    51a8:	f6 f6 f6 07 07 07 e7 07 eb f6 07 07 07 07 e7 07     ................
    51b8:	fe f6 f6 f6 eb eb f6 eb fe f6 f6 f6 eb eb eb eb     ................
    51c8:	fe fe f6 f6 eb eb eb f6 f6 fe f6 f6 f6 f6 f6 f6     ................
    51d8:	fe f6 f6 f6 01 01 01 01 01 01 f6 01 01 01 f6 f6     ................
    51e8:	01 01 01 01 01 01 01 01 fe 01 01 01 01 01 01 01     ................
    51f8:	eb f6 07 07 07 07 07 07 f6 f6 07 07 07 07 07 07     ................
    5208:	f6 fe fe fe 07 e7 fe fe f6 f6 07 07 07 07 07 07     ................
    5218:	f6 f6 fe fe 2f fe fe fe f6 f6 fe 01 01 2f 01 fe     ..../......../..
    5228:	01 01 01 01 01 2f 01 01 01 fe fe 01 2f 2f 01 fe     ...../......//..
    5238:	fe fe fe fe f6 f6 f6 fe fe fe fe fe f6 f6 f6 f6     ................
    5248:	fe fe f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    5258:	af 01 af 01 af af af af af 01 af 01 af af af af     ................
    5268:	fe af af af af af af f6 eb eb f6 f6 f6 f6 f6 f6     ................
    5278:	fe fe fe fe eb f6 fe fe f6 fe fe fe eb f6 fe fe     ................
    5288:	f6 f6 fe fe eb f6 fe fe f6 f6 f6 fe eb f6 fe fe     ................
    5298:	f6 f6 f6 07 eb eb 07 fe f6 f6 f6 07 07 e7 e7 07     ................
    52a8:	f6 f6 f6 07 07 07 e7 07 eb eb eb 07 07 07 e7 07     ................
    52b8:	eb f6 f6 f6 f6 f6 f6 f6 fe f6 f6 f6 f6 f6 f6 f6     ................
    52c8:	fe f6 f6 f6 f6 f6 f6 f6 fe fe f6 f6 f6 f6 f6 f6     ................
    52d8:	fe 01 01 f6 f6 01 01 01 01 f6 f6 f6 f6 01 f6 f6     ................
    52e8:	01 01 01 01 01 01 01 01 fe 01 01 01 01 01 01 01     ................
    52f8:	f6 eb eb eb 07 07 07 07 f6 f6 eb eb 07 07 07 07     ................
    5308:	f6 eb eb eb e7 e7 fe fe f6 eb eb 07 07 07 07 07     ................
    5318:	f6 f6 fe fe 2f fe fe fe f6 01 fe 2f 01 01 01 fe     ..../....../....
    5328:	01 01 01 2f 01 01 01 01 01 fe fe 01 2f 2f 2f 2f     .../........////
    5338:	fe fe f6 eb fe fe fe fe fe fe f6 eb fe fe fe f6     ................
    5348:	fe fe f6 eb fe fe f6 f6 fe fe f6 eb fe f6 f6 f6     ................
    5358:	fe 07 eb eb 07 f6 f6 f6 07 e7 e7 07 07 f6 f6 f6     ................
    5368:	07 e7 07 07 07 f6 f6 f6 07 e7 07 07 07 07 fe eb     ................
    5378:	fe f6 f6 f6 fe fe fe fe f6 f6 f6 f6 fe fe fe fe     ................
    5388:	f6 f6 f6 f6 f6 f6 fe fe f6 f6 f6 f6 f6 f6 f6 f6     ................
    5398:	af af af af 01 af 01 af af af af af 01 af 01 af     ................
    53a8:	f6 af af af af af af fe eb f6 f6 f6 f6 f6 fe fe     ................
    53b8:	07 07 07 07 07 07 f6 eb 07 07 07 07 07 07 f6 eb     ................
    53c8:	fe fe e7 07 fe fe fe eb 07 07 07 07 07 07 fe f6     ................
    53d8:	fe fe fe 2f fe fe fe 01 fe 01 01 2f 01 fe 01 01     .../......./....
    53e8:	01 01 01 2f 01 01 01 01 fe 2f 2f 01 01 fe fe 01     .../.....//.....
    53f8:	eb f6 f6 f6 f6 f6 f6 fe eb f6 f6 f6 f6 f6 f6 fe     ................
    5408:	eb eb f6 f6 f6 f6 f6 fe eb eb f6 f6 f6 f6 fe fe     ................
    5418:	01 f6 f6 f6 01 01 fe fe 01 f6 f6 f6 f6 f6 01 fe     ................
    5428:	01 01 01 01 01 01 01 fe 01 01 01 01 01 01 fe fe     ................
    5438:	fe fe f6 eb fe fe fe fe fe fe f6 eb fe fe fe f6     ................
    5448:	fe fe f6 eb fe fe f6 f6 fe fe f6 eb fe f6 f6 f6     ................
    5458:	fe 07 eb eb 07 f6 f6 f6 07 e7 e7 07 07 f6 f6 f6     ................
    5468:	07 e7 07 07 07 f6 f6 f6 07 e7 07 07 07 07 f6 eb     ................
    5478:	07 07 07 07 07 07 f6 eb 07 07 07 07 07 07 f6 f6     ................
    5488:	fe fe e7 07 fe fe fe f6 07 07 07 07 07 07 f6 f6     ................
    5498:	fe fe fe 2f fe fe f6 f6 fe 01 2f 01 01 fe f6 f6     .../....../.....
    54a8:	01 01 2f 01 01 01 01 01 fe 01 2f 2f 01 fe fe 01     ../.......//....
    54b8:	eb f6 eb eb f6 f6 f6 fe eb eb eb eb f6 f6 f6 fe     ................
    54c8:	f6 eb eb eb f6 f6 fe fe f6 f6 f6 f6 f6 f6 fe f6     ................
    54d8:	01 01 01 01 f6 f6 f6 fe f6 f6 01 01 01 f6 01 01     ................
    54e8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 fe     ................
    54f8:	fe fe f6 eb fe fe fe fe fe fe f6 eb fe fe fe f6     ................
    5508:	fe fe f6 eb fe fe f6 f6 fe fe f6 eb fe f6 f6 f6     ................
    5518:	fe 07 eb eb 07 f6 f6 f6 07 e7 e7 07 07 f6 f6 f6     ................
    5528:	07 e7 07 07 07 f6 f6 f6 07 e7 07 07 07 eb eb eb     ................
    5538:	fe f6 f6 f6 fe fe fe fe f6 f6 f6 f6 fe fe fe fe     ................
    5548:	f6 f6 f6 f6 f6 f6 fe fe f6 f6 f6 f6 f6 f6 f6 f6     ................
    5558:	af af af af 01 af 01 af af af af af 01 af 01 af     ................
    5568:	f6 af af af af af af fe f6 f6 f6 f6 f6 f6 eb eb     ................
    5578:	07 07 07 07 eb eb eb f6 07 07 07 07 eb eb f6 f6     ................
    5588:	fe fe e7 e7 eb eb eb f6 07 07 07 07 07 eb eb f6     ................
    5598:	fe fe fe 2f fe fe f6 f6 fe 01 01 01 2f fe 01 f6     .../......../...
    55a8:	01 01 01 01 2f 01 01 01 2f 2f 2f 2f 01 fe fe 01     ..../...////....
    55b8:	f6 f6 f6 f6 f6 f6 f6 eb f6 f6 f6 f6 f6 f6 f6 fe     ................
    55c8:	f6 f6 f6 f6 f6 f6 f6 fe f6 f6 f6 f6 f6 f6 fe fe     ................
    55d8:	01 01 01 f6 f6 01 01 fe f6 f6 01 f6 f6 f6 f6 01     ................
    55e8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 fe     ................
    55f8:	fe fe fe fe fe fe fe f6 fe fe fe fe fe fe f6 f6     ................
    5608:	fe fe fe fe f6 f6 f6 f6 fe fe fe f6 f6 f6 f6 f6     ................
    5618:	fe fe fe f6 f6 f6 f6 07 fe fe fe f6 f6 f6 f6 07     ................
    5628:	fe fe fe f6 f6 f6 f6 07 fe fe fe fe eb af af 07     ................
    5638:	f6 eb eb fe fe fe fe fe f6 eb eb f6 fe fe fe fe     ................
    5648:	f6 eb eb f6 f6 fe fe fe 07 eb eb 07 f6 fe fe fe     ................
    5658:	07 eb eb 07 07 f6 fe fe 07 07 07 e7 07 f6 fe fe     ................
    5668:	07 07 e7 e7 07 f6 fe fe 07 07 07 e7 07 fe fe fe     ................
    5678:	fe fe fe eb eb f6 f6 07 fe fe fe eb f6 f6 f6 f6     ................
    5688:	fe fe fe fe f6 f6 f6 f6 fe fe fe fe 01 f6 f6 f6     ................
    5698:	fe fe fe 01 01 01 f6 f6 fe fe fe 01 01 01 01 01     ................
    56a8:	fe fe fe fe 01 01 01 01 fe fe fe fe fe fe 01 01     ................
    56b8:	07 07 07 07 07 eb fe fe 07 07 07 07 f6 eb fe fe     ................
    56c8:	f6 07 07 f6 f6 fe fe fe f6 07 2f f6 fe fe fe fe     ........../.....
    56d8:	01 f6 2f 01 01 fe fe fe 01 01 2f 01 01 fe fe fe     ../......./.....
    56e8:	01 2f 01 01 fe fe fe fe 01 01 2f 2f fe fe fe fe     ./........//....
    56f8:	f6 eb eb fe fe fe fe fe f6 eb eb f6 fe fe fe fe     ................
    5708:	f6 eb eb f6 f6 fe fe fe 07 eb eb 07 f6 fe fe fe     ................
    5718:	07 eb eb 07 07 f6 fe fe 07 07 07 e7 07 f6 eb fe     ................
    5728:	07 07 e7 e7 07 f6 eb fe 07 07 07 e7 07 eb eb fe     ................
    5738:	fe fe fe eb eb f6 f6 07 fe fe fe eb eb f6 f6 f6     ................
    5748:	fe fe fe eb eb f6 f6 f6 fe fe fe fe 01 f6 f6 f6     ................
    5758:	fe fe fe 01 01 01 01 f6 fe fe fe 01 01 01 01 01     ................
    5768:	fe fe fe fe 01 01 01 01 fe fe fe fe fe fe 01 01     ................
    5778:	07 07 07 07 07 eb fe fe 07 07 07 07 f6 eb fe fe     ................
    5788:	f6 07 07 f6 f6 fe fe fe f6 07 2f f6 fe fe fe fe     ........../.....
    5798:	f6 f6 2f 01 01 fe fe fe f6 2f f6 01 01 fe fe fe     ../....../......
    57a8:	f6 2f 01 01 fe fe fe fe 2f 2f fe fe fe fe fe fe     ./......//......
    57b8:	fe fe fe fe fe fe fe f6 fe fe fe fe fe f6 f6 f6     ................
    57c8:	fe fe fe fe f6 f6 f6 f6 fe fe fe f6 f6 f6 f6 f6     ................
    57d8:	fe fe fe f6 f6 f6 f6 07 fe fe fe f6 f6 f6 f6 07     ................
    57e8:	fe fe eb f6 f6 f6 f6 07 fe fe eb eb f6 af af 07     ................
    57f8:	fe fe eb eb f6 f6 f6 07 fe fe fe f6 f6 f6 f6 f6     ................
    5808:	fe fe fe fe f6 f6 f6 f6 fe fe fe fe f6 f6 f6 f6     ................
    5818:	fe fe fe 01 01 f6 f6 f6 fe fe fe 01 01 f6 f6 f6     ................
    5828:	fe fe fe fe 01 01 f6 f6 fe fe fe fe fe fe 01 01     ................
    5838:	07 07 07 07 07 eb fe fe 07 07 07 07 eb eb fe fe     ................
    5848:	f6 07 07 f6 eb eb fe fe f6 07 2f 01 fe fe fe fe     ........../.....
    5858:	f6 01 2f 01 01 fe fe fe 01 2f 01 01 01 fe fe fe     ../....../......
    5868:	2f 01 01 01 fe fe fe fe 01 2f 2f 2f 2f 2f fe fe     /......../////..

00005878 <sprite_table>:
    5878:	6c 3a 72 3a 78 3a 7e 3a 84 3a 8a 3a 90 3a 96 3a     l:r:x:~:.:.:.:.:
    5888:	9c 3a a2 3a a8 3a ae 3a b4 3a ba 3a c0 3a c6 3a     .:.:.:.:.:.:.:.:
    5898:	cc 3a d2 3a d8 3a de 3a e4 3a ea 3a f0 3a f6 3a     .:.:.:.:.:.:.:.:
    58a8:	fc 3a 02 3b 08 3b 0e 3b 14 3b 1a 3b 20 3b 26 3b     .:.;.;.;.;.; ;&;
    58b8:	2c 3b 32 3b                                         ,;2;

000058bc <levels>:
    58bc:	11 11 11 11 11 11 11 01 21 22 22 72 22 22 22 01     ........!""r""".
    58cc:	21 24 22 66 26 22 24 01 21 22 22 22 22 22 22 01     !$"f&"$.!"""""".
    58dc:	21 22 26 22 22 26 22 01 21 22 26 25 25 26 22 01     !"&""&".!"&%%&".
    58ec:	71 22 26 22 22 26 72 01 21 22 26 25 25 26 22 01     q"&""&r.!"&%%&".
    58fc:	21 22 26 22 22 26 22 01 21 22 22 22 22 22 22 01     !"&""&".!"""""".
    590c:	21 24 22 66 26 22 24 01 21 22 22 72 22 22 22 01     !$"f&"$.!""r""".
    591c:	11 11 11 11 11 11 11 01 33 33 33 33 33 33 33 33     ........33333333
    592c:	33 33 11 11 11 31 33 33 33 33 21 52 22 31 33 33     33...13333!R"133
    593c:	13 11 21 72 22 11 11 33 13 22 22 66 26 22 12 33     ..!r"..3.""f&".3
    594c:	13 22 46 22 42 26 12 33 13 75 26 22 22 76 15 33     ."F"B&.3.u&""v.3
    595c:	13 22 46 22 42 26 12 33 13 22 22 66 26 22 12 33     ."F"B&.3.""f&".3
    596c:	13 11 21 72 22 11 11 33 33 33 21 52 22 31 33 33     ..!r"..333!R"133
    597c:	33 33 11 11 11 31 33 33 33 33 33 33 33 33 33 33     33...13333333333
    598c:	33 33 33 33 33 33 33 33 33 13 11 11 11 11 33 33     333333333.....33
    599c:	33 11 22 72 22 12 31 33 13 21 62 66 66 22 11 33     3."r".13.!bff".3
    59ac:	13 22 24 22 22 24 12 33 13 62 22 25 25 62 12 33     ."$""$.3.b"%%b.3
    59bc:	13 67 22 22 22 62 17 33 13 62 22 25 25 62 12 33     .g"""b.3.b"%%b.3
    59cc:	13 22 24 22 22 24 12 33 13 21 62 66 66 22 11 33     ."$""$.3.!bff".3
    59dc:	33 11 22 72 22 12 31 33 33 13 11 11 11 11 33 33     3."r".133.....33
    59ec:	33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33     3333333333333333
    59fc:	11 11 11 11 11 11 11 31 21 22 11 72 12 21 22 31     .......1!".r.!"1
    5a0c:	21 24 11 22 12 21 24 31 21 22 11 22 12 21 22 31     !$.".!$1!".".!"1
    5a1c:	21 22 26 25 25 26 22 31 71 66 26 22 22 66 76 31     !"&%%&"1qf&""fv1
    5a2c:	21 22 26 25 25 26 22 31 21 22 11 22 12 21 22 31     !"&%%&"1!".".!"1
    5a3c:	21 24 11 22 12 21 24 31 21 22 11 72 12 21 22 31     !$.".!$1!".r.!"1
    5a4c:	11 11 11 11 11 11 11 31 33 33 33 33 33 33 33 33     .......133333333
    5a5c:	11 11 11 11 11 11 11 31 21 22 12 72 12 22 22 31     .......1!".r.""1
    5a6c:	21 24 12 22 12 22 24 31 21 62 16 22 12 66 22 31     !$."."$1!b.".f"1
    5a7c:	21 62 22 22 22 62 22 31 21 62 22 25 25 62 22 31     !b"""b"1!b"%%b"1
    5a8c:	11 11 27 22 22 17 11 31 21 62 22 25 25 62 22 31     ..'""..1!b"%%b"1
    5a9c:	21 62 22 22 22 62 22 31 21 62 16 22 12 66 22 31     !b"""b"1!b.".f"1
    5aac:	21 24 12 22 12 22 24 31 21 22 12 72 12 22 22 31     !$."."$1!".r.""1
    5abc:	11 11 11 11 11 11 11 31 33 33 33 33 33 33 33 33     .......133333333
    5acc:	11 11 11 11 11 11 11 31 51 22 22 72 22 22 52 31     .......1Q""r""R1
    5adc:	21 22 66 66 66 26 22 31 21 22 22 22 22 22 22 31     !"fff&"1!""""""1
    5aec:	21 26 22 42 22 22 26 31 71 26 22 24 24 22 76 31     !&"B""&1q&"$$"v1
    5afc:	21 26 22 42 22 22 26 31 21 22 22 22 22 22 22 31     !&"B""&1!""""""1
    5b0c:	21 22 66 66 66 26 22 31 51 22 22 72 22 22 52 31     !"fff&"1Q""r""R1
    5b1c:	11 11 11 11 11 11 11 31 33 33 33 33 33 33 33 33     .......133333333
    5b2c:	33 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33     3333333333333333
    5b3c:	33 13 11 11 11 11 33 33 33 13 27 52 22 17 33 33     3.....333.'R".33
    5b4c:	33 13 62 66 66 12 33 33 33 13 62 24 64 12 33 33     3.bff.333.b$d.33
    5b5c:	33 13 65 22 62 15 33 33 33 13 62 24 64 12 33 33     3.e"b.333.b$d.33
    5b6c:	33 13 62 66 66 12 33 33 33 13 27 52 22 17 33 33     3.bff.333.'R".33
    5b7c:	33 13 11 11 11 11 33 33 33 33 33 33 33 33 33 33     3.....3333333333
    5b8c:	33 33 33 33 33 33 33 33 33 33 13 11 11 33 33 33     3333333333...333
    5b9c:	33 33 13 72 12 33 33 33 33 33 13 42 12 33 33 33     33.r.33333.B.333
    5bac:	33 33 13 66 16 33 33 33 11 11 11 22 12 11 11 31     33.f.333..."...1
    5bbc:	21 62 26 25 25 66 22 31 71 64 26 22 22 66 74 31     !b&%%f"1qd&""ft1
    5bcc:	21 62 26 25 25 66 22 31 11 11 11 22 12 11 11 31     !b&%%f"1..."...1
    5bdc:	33 33 13 66 16 33 33 33 33 33 13 42 12 33 33 33     33.f.33333.B.333
    5bec:	33 33 13 72 12 33 33 33 33 33 13 11 11 33 33 33     33.r.33333...333
    5bfc:	33 11 11 11 11 11 31 23 13 21 22 22 22 22 11 23     3.....1#.!"""".#
    5c0c:	11 22 24 24 24 24 12 21 21 22 22 66 26 22 22 21     ."$$$$.!!""f&""!
    5c1c:	71 62 22 22 22 62 72 21 21 62 22 22 22 62 22 21     qb"""br!!b"""b"!
    5c2c:	21 62 66 22 62 66 22 21 21 62 22 22 22 62 22 21     !bf"bf"!!b"""b"!
    5c3c:	71 62 22 22 22 62 72 21 21 22 22 66 26 22 22 21     qb"""br!!""f&""!
    5c4c:	11 22 25 25 25 25 12 21 13 21 22 22 22 22 11 23     ."%%%%.!.!"""".#
    5c5c:	33 11 11 11 11 11 31 23 11 11 33 33 33 13 11 31     3.....1#..333..1
    5c6c:	71 12 33 33 33 13 72 31 21 12 11 33 13 11 22 31     q.333.r1!..3.."1
    5c7c:	21 22 12 33 13 22 22 31 21 22 12 11 11 22 22 31     !".3.""1!"...""1
    5c8c:	41 62 22 22 22 62 42 31 21 62 52 25 55 62 22 31     Ab"""bB1!bR%Ub"1
    5c9c:	41 62 22 22 22 62 42 31 21 22 12 11 11 22 22 31     Ab"""bB1!"...""1
    5cac:	21 22 12 33 13 22 22 31 21 12 11 33 13 11 22 31     !".3.""1!..3.."1
    5cbc:	71 12 33 33 33 13 72 31 11 11 33 33 33 13 11 31     q.333.r1..333..1
    5ccc:	11 11 11 11 11 11 11 31 41 22 22 22 22 22 42 31     .......1A"""""B1
    5cdc:	21 22 22 52 22 22 22 31 11 11 61 66 66 11 11 31     !""R"""1..aff..1
    5cec:	71 22 22 52 22 22 72 31 21 22 22 22 22 22 22 31     q""R""r1!""""""1
    5cfc:	11 11 61 26 66 11 11 31 21 22 22 22 22 22 22 31     ..a&f..1!""""""1
    5d0c:	71 22 22 52 22 22 72 31 11 11 61 66 66 11 11 31     q""R""r1..aff..1
    5d1c:	21 22 22 52 22 22 22 31 41 22 22 22 22 22 42 31     !""R"""1A"""""B1
    5d2c:	11 11 11 11 11 11 11 31 11 11 11 11 11 11 11 31     .......1.......1
    5d3c:	71 22 22 17 27 22 72 31 21 22 22 12 22 22 22 31     q"".'"r1!""."""1
    5d4c:	21 26 21 12 22 21 26 31 21 26 21 12 22 21 26 31     !&!."!&1!&!."!&1
    5d5c:	21 26 21 12 22 21 26 31 21 26 21 22 22 21 26 31     !&!."!&1!&!""!&1
    5d6c:	21 26 21 12 22 21 26 31 21 24 21 12 22 21 24 31     !&!."!&1!$!."!$1
    5d7c:	21 22 21 12 22 21 22 31 21 24 21 52 22 21 24 31     !"!."!"1!$!R"!$1
    5d8c:	21 22 21 55 25 21 22 31 11 11 11 11 11 11 11 31     !"!U%!"1.......1
    5d9c:	11 11 11 11 11 11 11 31 71 22 22 22 22 22 72 31     .......1q"""""r1
    5dac:	21 62 26 22 22 66 22 31 21 22 26 42 22 26 22 31     !b&""f"1!"&B"&"1
    5dbc:	21 25 26 22 22 26 25 31 21 22 26 42 22 26 22 31     !%&""&%1!"&B"&"1
    5dcc:	21 22 26 22 22 26 22 31 21 22 26 42 22 26 22 31     !"&""&"1!"&B"&"1
    5ddc:	21 25 26 22 22 26 25 31 21 22 26 42 22 26 22 31     !%&""&%1!"&B"&"1
    5dec:	21 62 26 22 22 66 22 31 71 22 22 22 22 22 72 31     !b&""f"1q"""""r1
    5dfc:	11 11 11 11 11 11 11 31 33 33 11 11 11 31 33 33     .......133...133
    5e0c:	33 33 51 72 52 31 33 33 33 33 21 22 22 31 33 33     33QrR13333!""133
    5e1c:	33 33 21 42 22 31 33 33 33 33 61 66 66 31 33 33     33!B"13333aff133
    5e2c:	33 33 21 42 22 31 33 33 33 33 71 22 72 31 33 33     33!B"13333q"r133
    5e3c:	33 33 21 42 22 31 33 33 33 33 61 66 66 31 33 33     33!B"13333aff133
    5e4c:	33 33 21 42 22 31 33 33 33 33 21 22 22 31 33 33     33!B"13333!""133
    5e5c:	33 33 51 72 52 31 33 33 33 33 11 11 11 31 33 33     33QrR13333...133
    5e6c:	11 11 01 33 33 33 33 33 51 72 31 33 33 33 33 33     ...33333Qr133333
    5e7c:	21 22 11 11 11 33 33 33 21 22 26 22 17 33 33 33     !"...333!"&".333
    5e8c:	21 24 26 22 12 33 33 33 61 26 42 22 15 11 11 31     !$&".333a&B"...1
    5e9c:	21 22 25 22 22 22 22 31 11 11 21 22 24 22 66 31     !"%""""1..!"$"f1
    5eac:	33 33 21 22 26 22 24 31 33 33 71 22 26 22 22 31     33!"&"$133q"&""1
    5ebc:	33 33 11 11 11 51 22 31 33 33 33 33 33 21 72 31     33...Q"133333!r1
    5ecc:	33 33 33 33 33 11 11 31 33 33 33 11 31 33 33 33     33333..1333.1333
    5edc:	33 33 33 51 31 33 33 33 33 33 11 51 11 31 33 33     333Q133333.Q.133
    5eec:	33 33 21 52 22 31 33 33 33 11 21 52 22 11 31 33     33!R"1333.!R".13
    5efc:	33 21 62 66 66 22 31 33 11 21 22 22 22 22 11 31     3!bff"13.!"""".1
    5f0c:	21 22 27 27 27 27 22 31 21 22 22 22 22 22 22 31     !"''''"1!""""""1
    5f1c:	21 66 66 66 66 66 26 31 21 22 24 24 24 24 22 31     !fffff&1!"$$$$"1
    5f2c:	21 22 22 22 22 22 22 31 11 11 11 11 11 11 11 31     !""""""1.......1
    5f3c:	33 33 13 11 11 33 33 33 33 33 13 72 12 33 33 33     33...33333.r.333
    5f4c:	33 11 11 22 12 11 31 33 33 21 22 42 22 22 31 33     3.."..133!"B""13
    5f5c:	11 21 66 66 66 26 11 31 21 22 26 52 22 26 22 31     .!fff&.1!"&R"&"1
    5f6c:	71 42 56 22 52 46 72 31 21 22 26 52 22 26 22 31     qBV"RFr1!"&R"&"1
    5f7c:	11 21 66 66 66 26 11 31 33 21 22 42 22 22 31 33     .!fff&.13!"B""13
    5f8c:	33 11 11 22 12 11 31 33 33 33 13 72 12 33 33 33     3.."..1333.r.333
    5f9c:	33 33 13 11 11 33 33 33 11 11 11 11 11 11 11 31     33...333.......1
    5fac:	21 22 22 22 22 22 22 31 21 65 22 27 22 24 27 31     !""""""1!e"'"$'1
    5fbc:	21 62 22 22 22 22 22 31 21 62 12 11 11 11 11 31     !b"""""1!b.....1
    5fcc:	21 64 22 22 22 22 22 31 21 62 52 22 52 62 27 31     !d"""""1!bR"Rb'1
    5fdc:	21 22 22 22 22 62 24 31 11 11 11 11 11 62 22 31     !""""b$1.....b"1
    5fec:	21 22 22 22 22 62 22 31 21 42 22 72 22 62 25 31     !""""b"1!B"r"b%1
    5ffc:	21 22 22 22 22 22 22 31 11 11 11 11 11 11 11 31     !""""""1.......1
    600c:	11 11 11 11 11 11 11 31 21 22 66 26 22 22 72 31     .......1!"f&""r1
    601c:	21 22 66 26 22 22 22 31 21 12 11 11 11 11 72 31     !"f&"""1!.....r1
    602c:	51 12 22 22 22 12 22 31 51 12 44 22 22 22 22 31     Q."""."1Q.D""""1
    603c:	51 12 22 21 11 22 22 31 51 12 44 22 22 22 22 31     Q."!.""1Q.D""""1
    604c:	21 12 22 22 22 12 22 31 21 12 11 11 11 11 72 31     !."""."1!.....r1
    605c:	21 22 66 26 22 22 22 31 21 22 66 26 22 22 72 31     !"f&"""1!"f&""r1
    606c:	11 11 11 11 11 11 11 31 11 11 11 11 11 11 11 31     .......1.......1
    607c:	71 22 22 12 22 22 72 31 21 62 22 12 22 62 22 31     q"".""r1!b"."b"1
    608c:	21 66 26 22 22 66 26 31 21 62 22 22 22 62 22 31     !f&""f&1!b"""b"1
    609c:	21 22 22 24 25 22 22 31 11 21 42 24 55 22 11 31     !""$%""1.!B$U".1
    60ac:	21 22 22 24 25 22 22 31 21 62 22 22 22 62 22 31     !""$%""1!b"""b"1
    60bc:	21 66 26 22 22 66 26 31 21 62 22 12 22 62 22 31     !f&""f&1!b"."b"1
    60cc:	71 22 22 12 22 22 72 31 11 11 11 11 11 11 11 31     q"".""r1.......1

000060dc <patch_bass>:
    60dc:	00 02 03 00 07 64 00 00 ec 00 ff                    .....d.....

000060e7 <patch_lead2>:
    60e7:	00 02 03 00 07 64 00 06 00 00 09 b4 00 0a 3c 00     .....d........<.
    60f7:	ff                                                  .

000060f8 <patch_lead>:
    60f8:	00 02 00 00 07 c8 00 ff                             ........

00006100 <sfx_pengo_baddie_die>:
    6100:	00 02 04 00 08 46 00 07 f0 01 08 46 00 07 e0 01     .....F.....F....
    6110:	08 47 00 07 e0 01 08 48 00 07 e0 01 08 49 00 07     .G.....H.....I..
    6120:	d0 01 08 4a 00 07 d0 01 08 4c 00 07 c0 01 08 4d     ...J.....L.....M
    6130:	00 07 c0 01 08 4f 00 07 b0 01 08 46 00 07 f0 01     .....O.....F....
    6140:	08 46 00 07 e0 01 08 47 00 07 e0 01 08 48 00 07     .F.....G.....H..
    6150:	e0 01 08 49 00 07 d0 01 08 4a 00 07 d0 01 08 4c     ...I.....J.....L
    6160:	00 07 c0 01 08 4d 00 07 c0 01 08 4f 00 07 b0 01     .....M.....O....
    6170:	08 46 00 07 f0 01 08 46 00 07 e0 01 08 47 00 07     .F.....F.....G..
    6180:	e0 01 08 48 00 07 e0 01 08 49 00 07 d0 01 08 4a     ...H.....I.....J
    6190:	00 07 d0 01 08 4c 00 07 c0 01 08 4d 00 07 c0 01     .....L.....M....
    61a0:	08 4f 00 07 b0 01 07 00 01 07 00 01 07 00 01 07     .O..............
    61b0:	00 01 07 00 01 07 00 01 07 00 00 07 00 01 07 00     ................
    61c0:	02 05 00 00 ff 00                                   ......

000061c6 <sfx_pengo_crush_block>:
    61c6:	00 02 04 00 08 39 00 07 c0 00 08 39 00 07 90 01     .....9.....9....
    61d6:	08 39 00 07 c0 00 08 39 00 07 90 01 08 39 00 07     .9.....9.....9..
    61e6:	c0 00 08 39 00 07 90 01 08 39 00 07 c0 00 08 39     ...9.....9.....9
    61f6:	00 07 90 01 08 39 00 07 c0 00 08 39 00 07 90 01     .....9.....9....
    6206:	08 39 00 07 c0 00 08 39 00 07 90 01 08 39 00 07     .9.....9.....9..
    6216:	c0 00 08 39 00 07 90 01 08 39 00 07 c0 00 08 39     ...9.....9.....9
    6226:	00 07 90 01 08 39 00 07 c0 00 08 39 00 07 90 01     .....9.....9....
    6236:	08 39 00 07 c0 00 08 39 00 07 90 01 08 46 00 07     .9.....9.....F..
    6246:	d0 00 08 45 00 07 a0 01 08 45 00 07 c0 00 08 45     ...E.....E.....E
    6256:	00 07 90 01 08 46 00 07 c0 00 08 45 00 07 90 01     .....F.....E....
    6266:	08 45 00 07 c0 00 08 45 00 07 90 01 08 46 00 07     .E.....E.....F..
    6276:	c0 00 08 45 00 07 90 01 08 45 00 07 c0 00 08 45     ...E.....E.....E
    6286:	00 07 90 01 08 46 00 07 c0 00 08 45 00 07 90 01     .....F.....E....
    6296:	08 45 00 07 c0 00 08 45 00 07 90 01 08 46 00 07     .E.....E.....F..
    62a6:	c0 00 08 46 00 07 80 01 08 45 00 07 c0 00 08 46     ...F.....E.....F
    62b6:	00 07 70 01 08 46 00 07 c0 00 08 46 00 07 70 01     ..p..F.....F..p.
    62c6:	08 45 00 07 c0 00 08 46 00 07 70 01 08 46 00 07     .E.....F..p..F..
    62d6:	c0 00 08 46 00 07 70 01 08 45 00 07 c0 00 08 46     ...F..p..E.....F
    62e6:	00 07 70 01 08 46 00 07 c0 00 08 46 00 07 70 01     ..p..F.....F..p.
    62f6:	08 45 00 07 c0 00 08 46 00 07 70 01 07 00 00 07     .E.....F..p.....
    6306:	00 01 08 36 00 07 40 00 08 4a 00 07 20 01 08 36     ...6..@..J.. ..6
    6316:	00 07 30 00 08 4a 00 07 10 01 08 36 00 07 20 00     ..0..J.....6.. .
    6326:	08 4a 00 07 00 01 07 00 00 05 00 00 ff 00           .J............

00006334 <sfx_pengo_die>:
    6334:	00 02 04 00 07 f0 00 08 48 0b 07 f0 00 08 51 0b     ........H.....Q.
    6344:	07 f0 00 08 48 0b 07 f0 00 08 47 0b 07 f0 00 08     ....H.....G.....
    6354:	51 0b 07 f0 00 08 48 0b 07 f0 00 08 46 0b 07 f0     Q.....H.....F...
    6364:	00 08 4f 0b 07 f0 00 08 48 0b 07 00 00 07 c0 00     ..O.....H.......
    6374:	08 48 00 07 00 00 07 00 00 07 00 00 07 00 00 07     .H..............
    6384:	00 00 07 00 00 07 00 00 07 00 00 07 00 00 07 00     ................
    6394:	00 07 00 00 07 c0 00 08 45 00 07 c0 00 08 41 32     ........E.....A2
    63a4:	07 00 00 07 00 00 07 00 02 07 00 00 07 b0 00 08     ................
    63b4:	48 00 07 00 00 07 00 0b 07 b0 00 08 4a 0b 07 b0     H...........J...
    63c4:	00 08 4c 0b 07 b0 00 08 4d 0b 07 00 00 07 00 00     ..L.....M.......
    63d4:	07 00 38 05 00 00 ff 00                             ..8.....

000063dc <sfx_pengo_egg_hatch>:
    63dc:	00 02 04 00 08 64 00 07 e0 01 07 00 00 07 00 00     .....d..........
    63ec:	08 5f 00 07 f0 01 08 64 00 07 e0 01 08 64 00 07     ._.....d.....d..
    63fc:	e0 01 08 64 00 07 e0 01 08 64 00 07 e0 01 08 64     ...d.....d.....d
    640c:	00 07 e0 01 08 64 00 07 e0 01 08 64 00 07 e0 01     .....d.....d....
    641c:	08 64 00 07 e0 01 08 64 00 07 e0 01 08 64 00 07     .d.....d.....d..
    642c:	e0 01 08 64 00 07 e0 01 08 64 00 07 e0 01 08 64     ...d.....d.....d
    643c:	00 07 e0 01 08 64 00 07 e0 01 08 6b 00 07 e0 01     .....d.....k....
    644c:	08 6b 00 07 e0 01 08 6b 00 07 e0 01 08 6b 00 07     .k.....k.....k..
    645c:	e0 01 08 6b 00 07 e0 01 08 6b 00 07 e0 01 08 6b     ...k.....k.....k
    646c:	00 07 e0 01 08 6b 00 07 e0 01 08 6b 00 07 e0 01     .....k.....k....
    647c:	08 6b 00 07 e0 01 08 6b 00 07 e0 01 08 6b 00 07     .k.....k.....k..
    648c:	e0 01 08 6b 00 07 e0 01 08 6b 00 07 e0 01 08 77     ...k.....k.....w
    649c:	00 07 e0 01 08 77 00 07 e0 01 08 77 00 07 e0 01     .....w.....w....
    64ac:	08 77 00 07 e0 01 08 77 00 07 e0 01 08 77 00 07     .w.....w.....w..
    64bc:	e0 01 08 77 00 07 e0 01 08 77 00 07 e0 01 08 77     ...w.....w.....w
    64cc:	00 07 e0 01 08 77 00 07 e0 01 08 77 00 07 e0 01     .....w.....w....
    64dc:	08 77 00 07 e0 01 08 77 00 07 e0 00 08 00 00 07     .w.....w........
    64ec:	e0 02 08 00 00 07 e0 00 08 00 00 07 e0 02 08 00     ................
    64fc:	00 07 e0 00 08 00 00 07 e0 02 07 00 00 07 00 01     ................
    650c:	05 00 00 ff 00                                      .....

00006511 <sfx_pengo_hitwall>:
    6511:	00 02 04 03 08 34 00 07 f0 01 07 e0 00 08 39 00     .....4........9.
    6521:	07 f0 01 07 e0 01 07 d0 00 08 34 00 07 f0 01 07     ..........4.....
    6531:	e0 01 07 d0 00 08 39 00 07 f0 01 07 e0 01 07 d0     ......9.........
    6541:	00 08 34 00 07 f0 01 07 e0 01 07 d0 00 08 39 00     ..4...........9.
    6551:	07 f0 01 07 e0 01 07 d0 00 08 34 00 07 f0 01 07     ..........4.....
    6561:	e0 01 07 00 00 08 2f 00 07 00 00 07 00 00 07 00     ....../.........
    6571:	00 05 00 00 ff 00                                   ......

00006577 <sfx_pengo_kick>:
    6577:	00 02 04 00 07 c0 00 08 58 03 08 5b 03 08 5e 03     ........X..[..^.
    6587:	07 00 00 08 2f 00 07 00 00 07 00 00 07 00 00 05     ..../...........
    6597:	00 00 ff 00                                         ....

0000659b <sfx_pengo_stun>:
    659b:	00 02 04 00 07 f0 00 08 41 01 08 41 01 07 e0 00     ........A..A....
    65ab:	08 3f 01 08 3e 01 07 d0 00 08 3d 01 08 3d 01 07     .?..>.....=..=..
    65bb:	c0 00 08 3d 01 08 3d 01 07 b0 00 08 3d 01 08 3c     ...=..=.....=..<
    65cb:	01 07 a0 00 08 3c 01 08 3d 01 07 90 00 08 3d 01     .....<..=.....=.
    65db:	08 3d 01 07 80 00 08 3e 01 08 3e 01 08 3f 01 07     .=.....>..>..?..
    65eb:	70 00 08 3f 01 07 60 00 08 40 01 08 41 01 07 50     p..?..`..@..A..P
    65fb:	00 08 41 01 07 40 00 08 41 01 08 42 01 07 30 00     ..A..@..A..B..0.
    660b:	08 42 01 08 43 01 07 20 00 08 44 01 07 10 00 08     .B..C.. ..D.....
    661b:	44 01 08 45 01 07 00 00 08 45 01 08 46 01 08 46     D..E.....E..F..F
    662b:	01 08 47 03 08 48 01 08 48 01 08 49 01 08 49 01     ..G..H..H..I..I.
    663b:	08 49 01 08 4a 01 08 42 01 08 41 00 07 00 00 05     .I..J..B..A.....
    664b:	00 00 ff 00                                         ....

0000664f <sfx_hiscore_click>:
    664f:	00 02 04 00 00 d8 00 08 54 0a ff                    ........T..

0000665a <sfx_hiscore_enter>:
    665a:	00 02 04 00 00 d8 00 08 3c 0a ff                    ........<..

00006665 <sfx_bonus_click>:
    6665:	00 02 04 00 00 d8 00 08 48 14 ff                    ........H..

00006670 <sfx_bonus_clickb>:
    6670:	00 02 04 00 00 d8 00 08 4c 14 ff                    ........L..

0000667b <echo>:
    667b:	00 00 f4 05 03 0c 05 04 0c 05 03 0c 05 04 0c 05     ................
    668b:	05 00 00 ff                                         ....

0000668f <noise_drop_floor>:
    668f:	00 01 0a 00 00 e2 02 01 05 01 01 03 01 01 01 02     ................
    669f:	05 00 00 ff                                         ....

000066a3 <noise_hihat>:
    66a3:	00 01 01 00 07 90 00 00 e2 08 05 00 00 ff           ..............

000066b1 <noise_cymbal>:
    66b1:	00 01 00 00 07 a0 00 00 ec 01 00 fe 00 01 01 00     ................
    66c1:	ff                                                  .

000066c2 <noise_drop_floor_b>:
    66c2:	00 01 03 00 00 e2 03 01 06 04 01 09 03 05 00 00     ................
    66d2:	ff                                                  .

000066d3 <noise_snare>:
    66d3:	00 00 ed 00 01 06 02 01 01 00 ff                    ...........

000066de <noise_clap>:
    66de:	00 00 ec 00 01 02 01 07 00 02 07 ff 00 01 03 00     ................
    66ee:	ff                                                  .

000066ef <line_clear>:
    66ef:	00 02 04 00 00 f8 00 08 50 03 08 4e 03 08 54 02     ........P..N..T.
    66ff:	08 4c 02 08 58 02 08 4a 01 08 5c 00 00 fc 03 08     .L..X..J..\.....
    670f:	60 03 08 5a 03 08 60 03 08 5a 03 08 60 03 08 5a     `..Z..`..Z..`..Z
    671f:	01 05 00 00 ff                                      .....

00006724 <bonus>:
    6724:	00 02 04 00 00 fb 00 08 3e 01 03 02 01 03 02 01     ........>.......
    6734:	03 02 01 03 02 01 03 02 01 04 0a 01 03 02 01 03     ................
    6744:	02 01 03 02 01 03 02 01 03 02 01 04 02 01 03 02     ................
    6754:	01 03 02 01 03 02 01 03 02 01 03 02 01 04 0a 01     ................
    6764:	03 02 01 03 02 01 03 02 01 03 02 01 03 02 01 04     ................
    6774:	05 01 03 02 01 03 02 01 03 02 01 03 02 01 03 02     ................
    6784:	01 04 05 01 03 02 01 03 02 01 03 02 01 03 02 01     ................
    6794:	03 02 01 04 05 01 03 02 01 03 02 01 03 02 01 03     ................
    67a4:	02 01 03 02 01 05 00 00 ff                          .........

000067ad <dead>:
    67ad:	00 02 04 00 00 fb 00 08 34 01 03 02 01 03 04 01     ........4.......
    67bd:	03 06 01 04 0a 01 03 02 01 03 04 01 03 06 01 04     ................
    67cd:	0a 01 03 02 01 03 04 01 03 06 01 04 05 01 03 02     ................
    67dd:	01 03 04 01 03 06 02 03 02 02 03 04 02 03 06 03     ................
    67ed:	04 05 03 03 02 03 03 04 03 03 06 04 04 05 04 03     ................
    67fd:	02 04 03 04 04 03 06 01 05 00 00 ff                 ............

00006809 <buzz>:
    6809:	00 02 03 00 08 28 00 07 c8 00 09 b4 00 0a 0a 00     .....(..........
    6819:	ff                                                  .

0000681a <buzzoff>:
    681a:	00 02 03 00 08 28 00 07 64 00 09 b4 00 0a 0a 01     .....(..d.......
    682a:	05 00 00 ff                                         ....

0000682e <shoot>:
    682e:	00 02 04 00 08 50 00 07 ff 00 09 b4 00 0a 50 00     .....P........P.
    683e:	0c 28 00 0b 9c 32 05 00 00 ff                       .(...2....

00006848 <beam2>:
    6848:	00 02 00 00 08 01 00 07 ff 00 09 b4 00 0a 50 00     ..............P.
    6858:	0c 28 00 0b 64 64 05 00 00 ff                       .(..dd....

00006862 <alarm>:
    6862:	00 02 04 00 08 01 00 07 ff 00 0c ff 00 0b 64 1e     ..............d.
    6872:	08 01 1e 08 01 1e 08 01 1e 05 00 00 ff              .............

0000687f <death>:
    687f:	00 02 04 00 08 32 00 07 ff 00 0c 64 00 0b 64 1e     .....2.....d..d.
    688f:	0b 9c 1e 0b 64 1e 0b 9c 1e 05 00 00 ff              ....d........

0000689c <up_down>:
    689c:	00 02 04 00 08 1e 00 07 ff 00 0c 64 1e 0b 14 1e     ...........d....
    68ac:	0b d8 1e 0b 14 1e 0b d8 1e 0b 14 1e 0b d8 1e 05     ................
    68bc:	00 00 ff                                            ...

000068bf <splat>:
    68bf:	00 02 03 00 08 28 00 09 b4 00 0a 0a 00 00 fb 00     .....(..........
    68cf:	08 3e 01 03 02 01 03 02 01 03 02 01 03 02 01 03     .>..............
    68df:	02 01 04 0a 01 03 02 01 03 02 01 03 02 01 03 02     ................
    68ef:	01 03 02 01 04 02 01 03 02 01 03 02 01 03 02 01     ................
    68ff:	03 02 01 03 02 01 04 0a 01 03 02 01 03 02 01 03     ................
    690f:	02 01 03 02 01 03 02 01 04 0a 01 03 02 01 03 02     ................
    691f:	01 03 02 01 03 02 01 03 02 01 04 0a 01 03 02 01     ................
    692f:	03 02 01 03 02 01 03 02 01 03 02 01 04 0a 01 03     ................
    693f:	02 01 03 02 01 03 02 01 03 02 01 03 02 01 05 00     ................
    694f:	00 ff                                               ..

00006951 <bonus2a>:
    6951:	00 02 04 00 00 fb 00 08 3e 01 03 02 01 03 02 01     ........>.......
    6961:	03 02 01 03 02 01 03 02 01 04 0a 01 03 02 01 03     ................
    6971:	02 01 03 02 01 03 02 01 03 02 01 04 02 01 03 02     ................
    6981:	01 03 02 01 03 02 01 03 02 01 03 02 01 04 0a 01     ................
    6991:	03 02 01 03 02 01 03 02 01 03 02 01 03 02 01 04     ................
    69a1:	0a 01 03 02 01 03 02 01 03 02 01 03 02 01 03 02     ................
    69b1:	01 04 0a 01 03 02 01 03 02 01 03 02 01 03 02 01     ................
    69c1:	03 02 01 04 0a 01 03 02 01 03 02 01 03 02 01 03     ................
    69d1:	02 01 03 02 01 05 00 00 ff                          .........

000069da <bonus_down>:
    69da:	00 02 04 00 00 f6 00 08 3e 01 04 02 01 04 02 01     ........>.......
    69ea:	04 02 01 04 02 01 04 02 01 03 0a 01 04 02 01 04     ................
    69fa:	02 01 04 02 01 04 02 01 04 02 01 03 0a 01 04 02     ................
    6a0a:	01 04 02 01 04 02 01 04 02 01 04 02 01 03 0a 01     ................
    6a1a:	04 02 01 04 02 01 04 02 01 04 02 00 ff              .............

00006a27 <splatb>:
    6a27:	00 02 03 00 08 28 00 00 f6 00 08 3e 01 03 02 01     .....(.....>....
    6a37:	03 02 01 03 02 01 03 02 01 03 02 01 04 14 01 03     ................
    6a47:	02 01 03 02 01 03 02 01 03 02 01 03 02 01 04 02     ................
    6a57:	01 03 02 01 03 02 01 03 02 01 03 02 01 03 02 01     ................
    6a67:	04 0a 01 03 02 01 03 02 01 03 02 01 03 02 01 03     ................
    6a77:	02 01 04 0a 01 03 02 01 03 02 01 03 02 01 03 02     ................
    6a87:	01 03 02 01 04 0a 01 03 02 01 03 02 01 03 02 01     ................
    6a97:	03 02 01 03 02 01 04 0a 01 03 02 01 03 02 01 03     ................
    6aa7:	02 01 03 02 01 03 02 01 05 00 00 ff                 ............

00006ab3 <patches>:
    6ab3:	00 00 00 f8 60 00 00 00 00 00 00 00 dc 60 00 00     ....`........`..
    6ac3:	00 00 00 00 00 e7 60 00 00 00 00 00 00 00 dc 60     ......`........`
    6ad3:	00 00 00 00 00 00 00 7b 66 00 00 00 00 00 00 00     .......{f.......
    6ae3:	09 68 00 00 00 00 00 00 00 1a 68 00 00 00 00 00     .h........h.....
    6af3:	00 00 27 6a 00 00 00 00 00 00 00 bf 68 00 00 00     ..'j........h...
    6b03:	00 00 00 00 27 6a 00 00 00 00 00 00 00 ef 66 00     ....'j........f.
    6b13:	00 00 00 00 00 00 48 68 00 00 00 00 00 00 00 9b     ......Hh........
    6b23:	65 00 00 00 00 00 00 00 4f 66 00 00 00 00 00 00     e.......Of......
    6b33:	00 5a 66 00 00 00 00 00 00 00 65 66 00 00 00 00     .Zf.......ef....
    6b43:	00 00 00 70 66 00 00 00 00 00 00 00 ef 66 00 00     ...pf........f..
    6b53:	00 00 00 00 00 24 67 00 00 00 00 00 00 00 ad 67     .....$g........g
	...
    6b6b:	61 00 00 00 00 00 00 00 c6 61 00 00 00 00 00 00     a........a......
    6b7b:	00 11 65 00 00 00 00 00 00 00 77 65 00 00 00 00     ..e.......we....

00006b8b <music_pengo_music_die>:
    6b8b:	00 90 4e 00 00 91 4e 00 00 92 4e 00 00 c0 00 00     ..N...N...N.....
    6b9b:	c1 01 00 c2 02 00 90 4e 50 00 92 4e 58 02 90 45     .......NP..NX..E
    6bab:	50 00 91 3e 48 06 90 45 30 00 90 4e 50 00 91 3e     P..>H..E0..NP..>
    6bbb:	28 01 92 51 58 06 90 4e 30 01 90 45 50 00 91 3e     (..QX..N0..EP..>
    6bcb:	48 00 92 4e 58 06 90 45 30 00 91 3e 28 01 90 44     H..NX..E0..>(..D
    6bdb:	50 00 91 3d 48 00 92 4d 58 06 90 44 30 00 91 3d     P..=H..MX..D0..=
    6beb:	28 01 90 4d 50 00 92 50 58 06 90 4d 30 01 90 44     (..MP..PX..M0..D
    6bfb:	50 00 91 3d 48 00 92 4d 58 07 90 44 30 00 91 3d     P..=H..MX..D0..=
    6c0b:	28 00 90 43 50 00 91 3c 48 00 92 4c 58 07 90 43     (..CP..<H..LX..C
    6c1b:	30 00 91 3c 28 01 90 4c 50 00 92 4f 58 06 90 4c     0..<(..LP..OX..L
    6c2b:	30 01 90 43 50 00 91 3c 48 00 92 4c 58 06 90 43     0..CP..<H..LX..C
    6c3b:	30 00 91 3c 28 01 90 4a 50 00 91 39 48 00 92 4e     0..<(..JP..9H..N
    6c4b:	58 06 90 4a 30 00 91 39 28 01 90 4c 50 00 91 39     X..J0..9(..LP..9
    6c5b:	48 00 92 4f 58 06 90 4c 30 00 91 39 28 01 90 4d     H..OX..L0..9(..M
    6c6b:	50 00 91 39 50 00 92 50 58 06 90 4d 30 00 91 39     P..9P..PX..M0..9
    6c7b:	28 01 90 4e 50 00 91 32 48 00 92 51 58 06 90 4e     (..NP..2H..QX..N
    6c8b:	30 00 91 32 28 00 92 51 00 06 91 32 00 06 90 4e     0..2(..Q...2...N
    6c9b:	00 30 ff 2f 00                                      .0./.

00006ca0 <music_pengo_music_start>:
    6ca0:	00 90 4e 00 00 91 4e 00 00 92 4e 00 00 c0 00 00     ..N...N...N.....
    6cb0:	c1 01 00 c2 02 00 90 45 58 00 91 39 50 00 92 3e     .......EX..9P..>
    6cc0:	58 05 90 45 50 00 91 39 28 00 92 3e 58 07 90 4a     X..EP..9(..>X..J
    6cd0:	50 00 92 45 58 06 90 4e 50 00 92 4a 58 0d 90 4a     P..EX..NP..JX..J
    6ce0:	50 00 91 39 48 00 92 45 58 06 90 4e 50 00 91 39     P..9H..EX..NP..9
    6cf0:	48 00 92 4a 58 07 90 4e 30 00 91 39 28 0c 90 4a     H..JX..N0..9(..J
    6d00:	50 00 91 3e 48 00 92 45 58 07 90 4a 50 00 91 3e     P..>H..EX..JP..>
    6d10:	28 00 92 45 58 06 90 4e 50 00 92 4a 58 07 90 51     (..EX..NP..JX..Q
    6d20:	50 00 92 4e 58 0c 90 4e 50 00 91 3e 48 00 92 4a     P..NX..NP..>H..J
    6d30:	58 07 90 51 50 00 91 3e 48 00 92 4e 58 06 90 51     X..QP..>H..NX..Q
    6d40:	30 00 91 3e 28 06 92 4e 00 00 90 51 00 00 91 3e     0..>(..N...Q...>
    6d50:	00 30 ff 2f 00                                      .0./.

00006d55 <music_pengo_ch0_a>:
    6d55:	00 90 4e 00 00 91 4e 00 00 92 4e 00 00 c0 00 00     ..N...N...N.....
    6d65:	c1 01 00 c2 02 00 ff 06 01 53 00 90 53 58 00 91     .........S..SX..
    6d75:	36 50 00 92 4e 58 05 90 53 30 00 91 36 28 03 90     6P..NX..S0..6(..
    6d85:	51 50 00 92 4a 58 07 90 51 30 03 90 53 50 00 91     QP..JX..Q0..SP..
    6d95:	3b 48 00 92 47 58 06 90 53 30 00 91 3b 28 04 90     ;H..GX..S0..;(..
    6da5:	4e 50 00 92 4e 58 06 90 4e 30 03 90 4a 50 00 91     NP..NX..N0..JP..
    6db5:	36 48 00 92 4a 58 07 90 4a 30 00 91 36 28 03 90     6H..JX..J0..6(..
    6dc5:	4e 50 00 92 4e 58 06 90 4e 30 03 90 47 50 00 91     NP..NX..N0..GP..
    6dd5:	3b 48 00 92 47 58 07 90 47 30 00 91 3b 28 03 92     ;H..GX..G0..;(..
    6de5:	4e 58 09 90 53 50 00 91 36 48 01 92 4a 58 05 90     NX..SP..6H..JX..
    6df5:	53 30 00 91 36 28 03 90 51 50 00 92 4e 58 07 90     S0..6(..QP..NX..
    6e05:	51 30 03 90 53 50 00 91 3b 48 00 92 47 58 06 90     Q0..SP..;H..GX..
    6e15:	53 30 00 91 3b 28 04 90 4e 50 00 92 4e 58 06 90     S0..;(..NP..NX..
    6e25:	4e 30 03 90 4a 50 00 91 36 48 00 92 4a 58 07 90     N0..JP..6H..JX..
    6e35:	4a 30 00 91 36 28 03 90 4e 50 00 92 4e 58 06 90     J0..6(..NP..NX..
    6e45:	4e 30 03 90 47 50 00 91 3b 48 00 92 47 58 07 90     N0..GP..;H..GX..
    6e55:	47 30 00 91 3b 28 03 92 4e 58 09 90 53 50 00 91     G0..;(..NX..SP..
    6e65:	36 48 00 92 4a 58 06 90 53 30 00 91 36 28 03 90     6H..JX..S0..6(..
    6e75:	55 50 00 92 4e 58 07 90 55 30 03 90 56 50 00 91     UP..NX..U0..VP..
    6e85:	3b 48 00 92 47 58 06 90 56 30 00 91 3b 28 04 90     ;H..GX..V0..;(..
    6e95:	55 50 00 92 4e 58 04 90 56 50 05 91 36 48 00 92     UP..NX..VP..6H..
    6ea5:	4a 58 05 90 56 50 02 91 36 28 03 90 53 50 00 92     JX..VP..6(..SP..
    6eb5:	4e 58 06 90 53 30 03 90 55 58 00 91 39 48 00 92     NX..S0..UX..9H..
    6ec5:	45 58 06 90 55 30 00 91 39 28 03 90 53 50 00 92     EX..U0..9(..SP..
    6ed5:	4c 58 05 90 55 50 05 91 34 48 00 92 49 58 05 90     LX..UP..4H..IX..
    6ee5:	55 50 01 91 34 28 03 90 51 50 00 92 4c 58 07 90     UP..4(..QP..LX..
    6ef5:	51 30 03 90 53 50 00 91 37 48 00 92 43 58 07 90     Q0..SP..7H..CX..
    6f05:	53 30 00 91 37 28 03 90 4f 50 00 92 4a 58 06 90     S0..7(..OP..JX..
    6f15:	4f 30 03 90 4a 50 00 91 32 48 00 92 47 58 07 90     O0..JP..2H..GX..
    6f25:	4a 30 00 91 32 28 03 90 4f 50 00 92 4a 58 06 90     J0..2(..OP..JX..
    6f35:	4f 30 03 90 53 50 00 91 37 48 00 92 43 58 06 90     O0..SP..7H..CX..
    6f45:	53 30 00 91 37 28 03 92 4a 58 0a 90 53 50 00 91     S0..7(..JX..SP..
    6f55:	37 48 00 92 47 58 06 90 53 30 00 91 37 28 04 90     7H..GX..S0..7(..
    6f65:	51 50 00 92 4a 58 06 90 51 30 03 90 53 50 00 91     QP..JX..Q0..SP..
    6f75:	3b 48 00 92 47 58 07 90 53 30 00 91 3b 28 03 90     ;H..GX..S0..;(..
    6f85:	4e 50 00 92 4e 58 06 90 4e 30 03 90 4a 50 00 91     NP..NX..N0..JP..
    6f95:	36 48 00 92 4a 58 07 90 4a 28 00 91 36 28 02 90     6H..JX..J(..6(..
    6fa5:	4e 50 01 92 4e 58 06 90 4e 30 03 90 47 50 00 91     NP..NX..N0..GP..
    6fb5:	3b 48 00 92 47 58 06 90 47 30 00 91 3b 28 03 92     ;H..GX..G0..;(..
    6fc5:	4e 58 0a 90 53 50 00 91 36 48 00 92 4a 58 06 90     NX..SP..6H..JX..
    6fd5:	53 30 00 91 36 28 04 90 51 50 00 92 4e 58 06 90     S0..6(..QP..NX..
    6fe5:	51 30 03 90 53 50 00 91 3b 48 00 92 47 58 07 90     Q0..SP..;H..GX..
    6ff5:	53 30 00 91 3b 28 03 90 4e 50 00 92 4e 58 06 90     S0..;(..NP..NX..
    7005:	4e 30 03 90 4a 58 00 91 36 48 00 92 4a 58 06 90     N0..JX..6H..JX..
    7015:	4a 30 00 91 36 28 03 90 4e 50 00 92 4e 58 07 90     J0..6(..NP..NX..
    7025:	4e 30 03 90 47 50 00 91 3b 48 00 92 47 58 06 90     N0..GP..;H..GX..
    7035:	47 30 00 91 3b 28 03 92 4e 58 0a 90 53 50 00 91     G0..;(..NX..SP..
    7045:	36 48 00 92 4a 58 06 90 53 30 00 91 36 28 04 90     6H..JX..S0..6(..
    7055:	55 50 00 92 4e 58 06 90 55 30 03 90 56 50 00 91     UP..NX..U0..VP..
    7065:	3b 48 00 92 47 58 07 90 56 30 00 91 3b 28 03 90     ;H..GX..V0..;(..
    7075:	55 50 00 92 4e 58 04 90 56 50 05 91 36 48 00 92     UP..NX..VP..6H..
    7085:	4a 58 05 90 56 50 01 91 36 28 03 90 53 50 00 92     JX..VP..6(..SP..
    7095:	4e 58 07 90 53 30 03 90 55 50 00 91 39 48 00 92     NX..S0..UP..9H..
    70a5:	45 58 06 90 55 30 00 91 39 28 04 90 53 50 00 92     EX..U0..9(..SP..
    70b5:	4c 58 04 90 55 50 05 91 34 48 00 92 49 58 05 90     LX..UP..4H..IX..
    70c5:	55 50 02 91 34 28 03 90 51 50 00 92 4c 58 06 90     UP..4(..QP..LX..
    70d5:	51 30 03 90 53 50 00 91 37 48 00 92 43 58 07 90     Q0..SP..7H..CX..
    70e5:	53 28 00 91 37 28 02 90 4f 50 01 92 4a 58 06 90     S(..7(..OP..JX..
    70f5:	4f 30 03 90 4a 50 00 91 32 48 00 92 47 58 06 90     O0..JP..2H..GX..
    7105:	4a 30 00 91 32 28 03 90 4f 50 00 92 4a 58 07 90     J0..2(..OP..JX..
    7115:	4f 30 03 90 53 50 00 91 37 48 00 92 43 58 06 90     O0..SP..7H..CX..
    7125:	53 30 00 91 37 28 04 92 4a 58 09 90 4e 50 00 91     S0..7(..JX..NP..
    7135:	39 48 00 92 47 58 07 90 4e 30 00 91 39 28 03 90     9H..GX..N0..9(..
    7145:	4c 50 00 92 4a 58 06 90 4c 30 03 90 4e 58 00 91     LP..JX..L0..NX..
    7155:	3e 48 00 92 3e 58 06 90 4e 30 00 91 3e 28 03 90     >H..>X..N0..>(..
    7165:	4a 50 00 92 45 58 07 90 4a 30 03 90 45 50 00 91     JP..EX..J0..EP..
    7175:	39 48 00 92 42 58 06 90 45 30 00 91 39 28 03 90     9H..BX..E0..9(..
    7185:	4a 50 00 92 45 58 07 90 4a 30 03 90 42 50 00 91     JP..EX..J0..BP..
    7195:	3e 48 00 92 3e 58 06 90 42 30 00 91 3e 28 04 92     >H..>X..B0..>(..
    71a5:	45 58 09 90 4e 50 00 91 39 48 00 92 42 58 07 90     EX..NP..9H..BX..
    71b5:	4e 30 00 91 39 28 03 90 4c 50 00 92 45 58 05 90     N0..9(..LP..EX..
    71c5:	4c 30 04 90 4e 50 00 91 3e 48 00 92 3e 58 06 90     L0..NP..>H..>X..
    71d5:	4e 30 00 91 3e 28 03 90 4a 50 00 92 45 58 07 90     N0..>(..JP..EX..
    71e5:	4a 30 03 90 45 50 00 91 39 48 00 92 42 58 06 90     J0..EP..9H..BX..
    71f5:	45 30 00 91 39 28 03 90 4a 50 00 92 45 58 07 90     E0..9(..JP..EX..
    7205:	4a 30 03 90 42 50 00 91 3e 48 00 92 3e 58 07 90     J0..BP..>H..>X..
    7215:	42 30 00 91 3e 28 03 92 45 58 09 90 4e 50 00 91     B0..>(..EX..NP..
    7225:	39 48 00 92 42 58 06 90 4e 30 01 91 39 28 02 90     9H..BX..N0..9(..
    7235:	50 50 01 92 45 58 06 90 50 30 03 90 51 50 00 91     PP..EX..P0..QP..
    7245:	3e 48 00 92 3e 58 06 90 51 30 00 91 3e 28 03 90     >H..>X..Q0..>(..
    7255:	50 50 00 92 45 58 05 90 51 50 05 91 39 48 00 92     PP..EX..QP..9H..
    7265:	42 58 02 90 51 30 03 90 51 50 01 91 39 28 04 90     BX..Q0..QP..9(..
    7275:	4e 50 00 92 45 58 06 90 4e 30 03 90 50 50 00 91     NP..EX..N0..PP..
    7285:	40 48 00 92 40 58 07 90 50 30 00 91 40 28 03 90     @H..@X..P0..@(..
    7295:	4e 50 00 92 47 58 05 90 50 58 04 91 3b 50 00 92     NP..GX..PX..;P..
    72a5:	44 58 04 90 50 50 02 91 3b 28 03 90 4c 50 00 92     DX..PP..;(..LP..
    72b5:	47 58 07 90 4c 30 03 90 4e 50 00 91 42 48 00 92     GX..L0..NP..BH..
    72c5:	3e 58 06 90 4e 30 00 91 42 28 03 90 4a 50 00 92     >X..N0..B(..JP..
    72d5:	45 58 07 90 4a 30 03 90 45 50 00 91 3e 48 00 92     EX..J0..EP..>H..
    72e5:	42 58 06 90 45 30 00 91 3e 28 04 90 4a 50 00 92     BX..E0..>(..JP..
    72f5:	45 58 06 90 4a 30 03 90 4e 50 00 91 42 48 00 92     EX..J0..NP..BH..
    7305:	3e 58 07 90 4e 30 00 91 42 28 03 92 45 58 08 ff     >X..N0..B(..EX..
    7315:	06 01 45 00 ff 2f 00                                ..E../.

0000731c <music_telstar>:
    731c:	00 90 4e 00 00 91 4e 00 00 92 4e 00 00 c0 00 00     ..N...N...N.....
    732c:	c1 01 00 c2 02 00 ff 06 01 53 00 91 2a 76 18 91     .........S..*v..
    733c:	25 78 18 91 2a 78 18 91 25 74 18 91 2a 73 18 91     %x..*x..%t..*s..
    734c:	25 77 18 91 2a 7a 18 91 25 79 18 91 2a 79 00 90     %w..*z..%y..*y..
    735c:	42 72 18 91 25 7b 18 91 2a 7b 18 91 25 7b 18 91     Br..%{..*{..%{..
    736c:	2b 7c 01 90 43 76 17 91 26 7b 18 91 2b 7d 18 91     +|..Cv..&{..+}..
    737c:	26 7a 18 91 2c 7a 00 90 44 78 18 91 27 7a 18 91     &z..,z..Dx..'z..
    738c:	2c 7b 18 91 27 78 18 91 2d 7d 00 90 45 76 18 91     ,{..'x..-}..Ev..
    739c:	28 78 18 91 28 7a 18 91 28 7b 18 91 2d 73 00 90     (x..(z..({..-s..
    73ac:	50 7c 00 90 51 7f 18 91 28 71 0c 91 2a 68 0c 91     P|..Q...(q..*h..
    73bc:	2d 72 17 90 4c 7b 01 91 28 72 0c 91 2d 73 0c 91     -r..L{..(r..-s..
    73cc:	2a 64 00 90 4e 7c 18 91 25 75 0c 91 28 6e 0c 91     *d..N|..%u..(n..
    73dc:	2a 67 15 90 4c 7d 03 91 25 76 0c 91 2a 6f 0b 90     *g..L}..%v..*o..
    73ec:	56 7c 01 91 26 76 04 90 58 74 03 90 56 73 10 90     V|..&v..Xt..Vs..
    73fc:	55 77 01 91 21 73 0c 91 23 74 0b 90 53 79 01 91     Uw..!s..#t..Sy..
    740c:	26 70 18 91 21 72 01 90 51 79 0b 91 26 73 0c 91     &p..!r..Qy..&s..
    741c:	28 72 00 90 53 7c 18 91 23 77 0c 91 25 78 0c 91     (r..S|..#w..%x..
    742c:	28 75 17 90 4c 7a 01 91 2a 6f 0c 91 28 70 0c 91     (u..Lz..*o..(p..
    743c:	2d 70 00 90 56 7d 05 90 58 7b 04 90 56 76 0f 91     -p..V}..X{..Vv..
    744c:	28 73 01 90 55 76 0b 91 2a 67 0c 91 2d 71 00 90     (s..Uv..*g..-q..
    745c:	53 78 18 91 28 73 00 90 51 78 0c 91 2d 70 0c 91     Sx..(s..Qx..-p..
    746c:	2a 67 00 90 53 7b 18 91 25 6f 0c 91 28 74 0b 90     *g..S{..%o..(t..
    747c:	4c 7a 01 91 2a 5e 18 91 25 71 0c 91 2a 6e 0c 91     Lz..*^..%q..*n..
    748c:	26 74 00 90 58 7c 18 91 21 6c 0c 91 23 70 0c 91     &t..X|..!l..#p..
    749c:	26 72 18 91 21 6f 0c 91 26 69 0c 91 28 6d 18 91     &r..!o..&i..(m..
    74ac:	23 72 0c 91 25 6c 0c 91 28 71 18 91 23 73 0c 91     #r..%l..(q..#s..
    74bc:	28 73 0c 91 25 79 01 90 58 72 00 90 5a 7b 17 91     (s..%y..Xr..Z{..
    74cc:	20 72 0c 91 23 76 0b 90 58 78 01 91 25 72 17 90      r..#v..Xx..%r..
    74dc:	51 72 01 91 20 74 0c 91 23 75 0c 91 25 73 01 90     Qr.. t..#u..%s..
    74ec:	58 7c 17 91 20 73 0c 91 23 79 0c 91 25 77 01 90     X|.. s..#y..%w..
    74fc:	56 7a 17 91 28 74 0c 91 29 72 02 90 55 72 04 90     Vz..(t..)r..Ur..
    750c:	56 71 03 90 55 69 03 91 2a 7b 18 91 25 77 0c 91     Vq..Ui..*{..%w..
    751c:	28 73 0c 91 2a 73 02 90 4d 77 16 91 25 77 00 90     (s..*s..Mw..%w..
    752c:	4e 77 0c 91 2a 6c 0c 91 26 7a 00 90 55 7a 18 91     Nw..*l..&z..Uz..
    753c:	21 74 0c 91 23 74 0c 91 28 79 00 90 53 7b 18 91     !t..#t..(y..S{..
    754c:	23 77 0c 91 28 63 0c 91 2d 74 00 90 55 7c 18 91     #w..(c..-t..U|..
    755c:	28 6c 0c 91 2a 78 0c 91 2d 75 18 91 28 75 00 90     (l..*x..-u..(u..
    756c:	55 7c 0c 91 2d 70 0c 91 2a 71 01 90 56 7c 17 91     U|..-p..*q..V|..
    757c:	25 77 00 90 55 79 0c 91 28 77 0c 91 2a 78 00 90     %w..Uy..(w..*x..
    758c:	53 78 18 91 25 75 00 90 51 76 0c 91 2a 6f 0c 91     Sx..%u..Qv..*o..
    759c:	23 7a 00 90 53 79 18 91 1e 78 0c 91 21 77 0c 91     #z..Sy...x..!w..
    75ac:	23 7a 18 91 1e 74 00 90 4e 7e 0c 91 23 77 00 90     #z...t..N~..#w..
    75bc:	51 7a 0c 91 28 7f 00 90 51 7a 18 91 23 79 00 90     Qz..(...Qz..#y..
    75cc:	50 7b 0c 91 25 64 0b 90 4e 7a 01 91 28 76 17 90     P{..%d..Nz..(v..
    75dc:	4c 79 01 91 23 77 0c 91 28 64 02 90 4c 6f 01 90     Ly..#w..(d..Lo..
    75ec:	4e 74 03 90 50 63 03 90 51 7e 03 91 2d 73 18 91     Nt..Pc..Q~..-s..
    75fc:	28 71 0c 91 2a 68 0c 91 2d 72 17 90 4c 79 01 91     (q..*h..-r..Ly..
    760c:	28 72 0c 91 2d 73 0c 91 2a 64 00 90 4e 7b 18 91     (r..-s..*d..N{..
    761c:	25 75 0c 91 28 6e 0c 91 2a 67 18 91 25 76 01 90     %u..(n..*g..%v..
    762c:	4c 78 0b 91 2a 6f 0c 91 26 76 01 90 56 7c 06 90     Lx..*o..&v..V|..
    763c:	58 79 04 90 56 6c 0d 91 21 73 01 90 55 74 0b 91     Xy..Vl..!s..Ut..
    764c:	23 74 0c 91 26 70 00 90 53 79 18 91 21 72 00 90     #t..&p..Sy..!r..
    765c:	51 7a 0c 91 26 73 0c 91 28 72 01 90 53 7b 17 91     Qz..&s..(r..S{..
    766c:	23 77 0c 91 25 78 0c 91 28 75 16 90 4c 7a 02 91     #w..%x..(u..Lz..
    767c:	2a 6f 0c 91 28 70 0a 90 56 74 02 91 2d 70 04 90     *o..(p..Vt..-p..
    768c:	58 77 03 90 56 6b 10 90 55 76 01 91 28 73 0c 91     Xw..Vk..Uv..(s..
    769c:	2a 67 0a 90 53 77 02 91 2d 71 17 90 51 76 01 91     *g..Sw..-q..Qv..
    76ac:	28 73 0c 91 2d 70 0b 90 53 7a 01 91 2a 67 18 91     (s..-p..Sz..*g..
    76bc:	25 6f 0c 91 28 74 0c 91 2a 5e 18 91 25 71 00 90     %o..(t..*^..%q..
    76cc:	4c 78 0c 91 2a 6e 0c 91 26 74 01 90 58 7a 17 91     Lx..*n..&t..Xz..
    76dc:	21 6c 0c 91 23 70 0c 91 26 72 18 91 21 6f 0c 91     !l..#p..&r..!o..
    76ec:	26 69 0c 91 28 6d 18 91 23 72 0c 91 25 6c 0c 91     &i..(m..#r..%l..
    76fc:	28 71 18 91 23 73 0c 91 28 73 0c 91 25 79 00 90     (q..#s..(s..%y..
    770c:	5a 7b 18 91 20 72 0c 91 23 76 0c 91 25 72 00 90     Z{.. r..#v..%r..
    771c:	58 7b 17 90 51 76 01 91 20 74 0c 91 23 75 0c 91     X{..Qv.. t..#u..
    772c:	25 73 01 90 58 7c 17 91 20 73 0c 91 23 79 0c 91     %s..X|.. s..#y..
    773c:	25 77 01 90 56 7a 17 91 28 74 0c 91 29 72 03 90     %w..Vz..(t..)r..
    774c:	55 78 03 90 56 6e 06 91 2a 7b 00 90 55 6d 18 91     Ux..Vn..*{..Um..
    775c:	25 77 0c 91 28 73 0c 91 2a 73 01 90 4d 71 17 91     %w..(s..*s..Mq..
    776c:	25 77 00 90 4e 74 0c 91 2a 6c 0b 90 55 78 01 91     %w..Nt..*l..Ux..
    777c:	26 7a 18 91 21 74 0c 91 23 74 0c 91 28 79 00 90     &z..!t..#t..(y..
    778c:	53 7a 18 91 23 77 0c 91 28 63 0c 91 2d 74 00 90     Sz..#w..(c..-t..
    779c:	55 77 18 91 28 6c 0c 91 2a 78 0c 91 2d 75 18 91     Uw..(l..*x..-u..
    77ac:	28 75 00 90 55 79 0c 91 2d 70 0c 91 2a 71 01 90     (u..Uy..-p..*q..
    77bc:	56 78 17 91 25 77 01 90 55 74 0b 91 28 77 0c 91     Vx..%w..Ut..(w..
    77cc:	2a 78 00 90 53 76 18 91 25 75 00 90 51 76 0c 91     *x..Sv..%u..Qv..
    77dc:	2a 6f 0b 90 53 76 01 91 23 7a 18 91 1e 78 0c 91     *o..Sv..#z...x..
    77ec:	21 77 0c 91 23 7a 18 91 1e 74 01 90 53 7f 0b 91     !w..#z...t..S...
    77fc:	23 77 0c 91 28 7f 00 90 55 7d 18 91 26 79 01 90     #w..(...U}..&y..
    780c:	53 7c 17 91 25 76 01 90 51 7b 17 91 23 77 00 90     S|..%v..Q{..#w..
    781c:	53 73 18 91 2d 79 00 90 51 5f 00 90 4c 7c 0c 90     Ss..-y..Q_..L|..
    782c:	4c 75 0c 91 28 78 0c 91 2a 76 00 90 4c 75 0c 91     Lu..(x..*v..Lu..
    783c:	2d 78 00 90 4c 7c 0c 90 4c 71 0c 91 28 74 00 90     -x..L|..Lq..(t..
    784c:	4e 79 0c 91 2d 79 0c 91 2a 7d 00 90 4c 6e 18 91     Ny..-y..*}..Ln..
    785c:	25 7a 0c 91 28 7b 0c 91 2a 6f 01 90 45 75 16 90     %z..({..*o..Eu..
    786c:	47 7d 01 91 25 72 0c 91 2a 78 0b 90 49 7c 01 91     G}..%r..*x..I|..
    787c:	26 7c 11 90 47 7c 07 91 21 77 0a 90 49 7c 02 91     &|..G|..!w..I|..
    788c:	26 7b 0c 91 28 79 02 90 40 73 16 91 23 72 0c 91     &{..(y..@s..#r..
    789c:	28 77 0c 91 26 76 18 91 21 73 0c 91 26 77 0b 90     (w..&v..!s..&w..
    78ac:	45 7a 01 91 28 75 18 91 23 74 01 90 47 7b 0b 91     Ez..(u..#t..G{..
    78bc:	28 72 0c 91 2d 79 01 90 49 7d 0e 90 49 73 09 91     (r..-y..I}..Is..
    78cc:	28 78 0c 91 2a 76 00 90 47 79 0c 91 2d 78 00 90     (x..*v..Gy..-x..
    78dc:	49 7c 18 91 28 74 03 90 4a 7b 09 91 2d 79 0c 91     I|..(t..J{..-y..
    78ec:	2a 7d 02 90 49 7c 16 91 25 7a 0c 91 28 7b 0c 91     *}..I|..%z..({..
    78fc:	2a 6f 00 90 49 79 18 91 25 72 01 90 47 7c 0b 91     *o..Iy..%r..G|..
    790c:	2a 78 0c 91 26 7c 00 90 45 79 13 90 47 76 05 91     *x..&|..Ey..Gv..
    791c:	21 77 0c 91 26 7b 01 90 49 79 0b 91 28 79 04 90     !w..&{..Iy..(y..
    792c:	47 7b 14 91 23 72 0c 91 28 77 0c 91 26 76 18 91     G{..#r..(w..&v..
    793c:	21 73 0c 91 26 77 0b 90 49 79 01 91 28 75 18 91     !s..&w..Iy..(u..
    794c:	23 74 00 90 4a 7b 0c 91 28 72 0c 91 2d 79 00 90     #t..J{..(r..-y..
    795c:	4c 7c 0c 90 4c 75 0c 91 28 78 0c 91 2a 76 00 90     L|..Lu..(x..*v..
    796c:	4c 75 0c 91 2d 78 00 90 4c 7c 0c 90 4c 71 0c 91     Lu..-x..L|..Lq..
    797c:	28 74 00 90 4e 79 0c 91 2d 79 0c 91 2a 7d 00 90     (t..Ny..-y..*}..
    798c:	4c 6e 18 91 25 7a 0c 91 28 7b 0c 91 2a 6f 01 90     Ln..%z..({..*o..
    799c:	45 75 16 90 47 7d 01 91 25 72 0c 91 2a 78 0b 90     Eu..G}..%r..*x..
    79ac:	49 7c 01 91 26 7c 11 90 47 7c 07 91 21 77 0a 90     I|..&|..G|..!w..
    79bc:	49 7c 02 91 26 7b 0c 91 28 79 02 90 40 73 16 91     I|..&{..(y..@s..
    79cc:	23 72 0c 91 28 77 0c 91 26 76 18 91 21 73 0c 91     #r..(w..&v..!s..
    79dc:	26 77 0b 90 45 7a 01 91 28 75 18 91 23 74 01 90     &w..Ez..(u..#t..
    79ec:	47 7b 0b 91 28 72 0c 91 2d 79 01 90 49 7d 0e 90     G{..(r..-y..I}..
    79fc:	49 73 09 91 28 78 0c 91 2a 76 00 90 47 79 0c 91     Is..(x..*v..Gy..
    7a0c:	2d 78 00 90 49 7c 18 91 28 74 03 90 4a 7b 09 91     -x..I|..(t..J{..
    7a1c:	2d 79 0c 91 2a 7d 02 90 49 7c 16 91 25 7a 0c 91     -y..*}..I|..%z..
    7a2c:	28 7b 0c 91 2a 6f 00 90 49 79 18 91 25 72 01 90     ({..*o..Iy..%r..
    7a3c:	47 7c 0b 91 2a 78 0c 91 26 7c 00 90 45 79 13 90     G|..*x..&|..Ey..
    7a4c:	47 76 05 91 21 77 0c 91 26 7b 01 90 49 79 0b 91     Gv..!w..&{..Iy..
    7a5c:	28 79 04 90 47 7b 14 91 23 72 0c 91 28 77 0c 91     (y..G{..#r..(w..
    7a6c:	26 76 00 90 40 7a 10 90 44 6e 08 91 21 73 08 90     &v..@z..Dn..!s..
    7a7c:	40 73 04 91 26 77 0c 91 28 75 00 90 4a 7a 18 91     @s..&w..(u..Jz..
    7a8c:	23 74 0c 91 28 72 0c 91 2d 73 00 90 51 7b 18 91     #t..(r..-s..Q{..
    7a9c:	28 71 0c 91 2a 68 0c 91 2d 72 17 90 4c 79 01 91     (q..*h..-r..Ly..
    7aac:	28 72 0c 91 2d 73 0c 91 2a 64 00 90 4e 7b 18 91     (r..-s..*d..N{..
    7abc:	25 75 0c 91 28 6e 0c 91 2a 67 18 91 25 76 01 90     %u..(n..*g..%v..
    7acc:	4c 78 0b 91 2a 6f 0c 91 26 76 01 90 56 7c 06 90     Lx..*o..&v..V|..
    7adc:	58 79 04 90 56 6c 0d 91 21 73 01 90 55 74 0b 91     Xy..Vl..!s..Ut..
    7aec:	23 74 0c 91 26 70 00 90 53 79 18 91 21 72 00 90     #t..&p..Sy..!r..
    7afc:	51 7a 0c 91 26 73 0c 91 28 72 01 90 53 7b 17 91     Qz..&s..(r..S{..
    7b0c:	23 77 0c 91 25 78 0c 91 28 75 16 90 4c 7a 02 91     #w..%x..(u..Lz..
    7b1c:	2a 6f 0c 91 28 70 0a 90 56 74 02 91 2d 70 04 90     *o..(p..Vt..-p..
    7b2c:	58 77 03 90 56 6b 10 90 55 76 01 91 28 73 0c 91     Xw..Vk..Uv..(s..
    7b3c:	2a 67 0a 90 53 77 02 91 2d 71 17 90 51 76 01 91     *g..Sw..-q..Qv..
    7b4c:	28 73 0c 91 2d 70 0b 90 53 7a 01 91 2a 67 18 91     (s..-p..Sz..*g..
    7b5c:	25 6f 0c 91 28 74 0c 91 2a 5e 18 91 25 71 00 90     %o..(t..*^..%q..
    7b6c:	4c 78 0c 91 2a 6e 0c 91 26 74 01 90 58 7a 17 91     Lx..*n..&t..Xz..
    7b7c:	21 6c 0c 91 23 70 0c 91 26 72 18 91 21 6f 0c 91     !l..#p..&r..!o..
    7b8c:	26 69 0c 91 28 6d 18 91 23 72 0c 91 25 6c 0c 91     &i..(m..#r..%l..
    7b9c:	28 71 18 91 23 73 0c 91 28 73 0c 91 25 79 00 90     (q..#s..(s..%y..
    7bac:	5a 7b 18 91 20 72 0c 91 23 76 0c 91 25 72 00 90     Z{.. r..#v..%r..
    7bbc:	58 7b 17 90 51 76 01 91 20 74 0c 91 23 75 0c 91     X{..Qv.. t..#u..
    7bcc:	25 73 01 90 58 7c 17 91 20 73 0c 91 23 79 0c 91     %s..X|.. s..#y..
    7bdc:	25 77 01 90 56 7a 17 91 28 74 0c 91 29 72 03 90     %w..Vz..(t..)r..
    7bec:	55 78 03 90 56 6e 06 91 2a 7b 00 90 55 6d 18 91     Ux..Vn..*{..Um..
    7bfc:	25 77 0c 91 28 73 0c 91 2a 73 01 90 4d 71 17 91     %w..(s..*s..Mq..
    7c0c:	25 77 00 90 4e 74 0c 91 2a 6c 0b 90 55 78 01 91     %w..Nt..*l..Ux..
    7c1c:	26 7a 18 91 21 74 0c 91 23 74 0c 91 28 79 00 90     &z..!t..#t..(y..
    7c2c:	53 7a 18 91 23 77 0c 91 28 63 0c 91 2d 74 00 90     Sz..#w..(c..-t..
    7c3c:	55 77 18 91 28 6c 0c 91 2a 78 0c 91 2d 75 18 91     Uw..(l..*x..-u..
    7c4c:	28 75 00 90 55 79 0c 91 2d 70 0c 91 2a 71 01 90     (u..Uy..-p..*q..
    7c5c:	56 78 17 91 25 77 01 90 55 74 0b 91 28 77 0c 91     Vx..%w..Ut..(w..
    7c6c:	2a 78 00 90 53 76 18 91 25 75 00 90 51 76 0c 91     *x..Sv..%u..Qv..
    7c7c:	2a 6f 0b 90 53 76 01 91 23 7a 18 91 1e 78 0c 91     *o..Sv..#z...x..
    7c8c:	21 77 0c 91 23 7a 18 91 1e 74 01 90 53 7f 0b 91     !w..#z...t..S...
    7c9c:	23 77 0c 91 28 7f 00 90 55 7d 18 91 26 79 01 90     #w..(...U}..&y..
    7cac:	53 7c 17 91 25 76 01 90 51 7b 17 91 23 77 00 90     S|..%v..Q{..#w..
    7cbc:	53 73 18 91 2d 79 00 90 4c 7c 0c 90 4c 75 0c 91     Ss..-y..L|..Lu..
    7ccc:	28 78 0c 91 2a 76 00 90 4c 75 0c 91 2d 78 00 90     (x..*v..Lu..-x..
    7cdc:	4c 7c 0c 90 4c 71 0c 91 28 74 00 90 4e 79 0c 91     L|..Lq..(t..Ny..
    7cec:	2d 79 0c 91 2a 7d 00 90 4c 6e 18 91 25 7a 0c 91     -y..*}..Ln..%z..
    7cfc:	28 7b 0c 91 2a 6f 01 90 45 75 16 90 47 7d 01 91     ({..*o..Eu..G}..
    7d0c:	25 72 0c 91 2a 78 0b 90 49 7c 01 91 26 7c 11 90     %r..*x..I|..&|..
    7d1c:	47 7c 07 91 21 77 0a 90 49 7c 02 91 26 7b 0c 91     G|..!w..I|..&{..
    7d2c:	28 79 02 90 40 73 16 91 23 72 0c 91 28 77 0c 91     (y..@s..#r..(w..
    7d3c:	26 76 18 91 21 73 0c 91 26 77 0b 90 45 7a 01 91     &v..!s..&w..Ez..
    7d4c:	28 75 18 91 23 74 01 90 47 7b 0b 91 28 72 0c 91     (u..#t..G{..(r..
    7d5c:	2d 79 01 90 49 7d 0e 90 49 73 09 91 28 78 0c 91     -y..I}..Is..(x..
    7d6c:	2a 76 00 90 47 79 0c 91 2d 78 00 90 49 7c 18 91     *v..Gy..-x..I|..
    7d7c:	28 74 03 90 4a 7b 09 91 2d 79 0c 91 2a 7d 02 90     (t..J{..-y..*}..
    7d8c:	49 7c 16 91 25 7a 0c 91 28 7b 0c 91 2a 6f 00 90     I|..%z..({..*o..
    7d9c:	49 79 18 91 25 72 01 90 47 7c 0b 91 2a 78 0c 91     Iy..%r..G|..*x..
    7dac:	26 7c 00 90 45 79 13 90 47 76 05 91 21 77 0c 91     &|..Ey..Gv..!w..
    7dbc:	26 7b 01 90 49 79 0b 91 28 79 04 90 47 7b 14 91     &{..Iy..(y..G{..
    7dcc:	23 72 0c 91 28 77 0c 91 26 76 00 90 40 7a 10 90     #r..(w..&v..@z..
    7ddc:	44 6e 08 91 21 73 08 90 40 73 04 91 26 77 0c 91     Dn..!s..@s..&w..
    7dec:	28 75 00 90 4a 7a 18 91 23 74 0c 91 28 72 0c 91     (u..Jz..#t..(r..
    7dfc:	2d 7b 18 91 28 7b 0c 91 2a 7c 0c 91 2d 78 18 91     -{..({..*|..-x..
    7e0c:	28 7b 0c 91 2a 7b 0c 91 2d 76 10 91 21 7f 10 91     ({..*{..-v..!...
    7e1c:	22 7f 10 91 23 7d 10 91 24 7e 10 91 25 7e 10 91     "...#}..$~..%~..
    7e2c:	32 76 00 90 55 7f 00 90 56 7f 18 91 2d 74 0c 91     2v..U...V...-t..
    7e3c:	2f 7b 0c 91 32 75 17 90 51 7e 01 91 2d 75 0c 91     /{..2u..Q~..-u..
    7e4c:	32 76 0c 91 2f 67 00 90 53 7f 18 91 2a 78 0c 91     2v../g..S...*x..
    7e5c:	2d 71 0c 91 2f 6a 15 90 51 7f 03 91 2a 79 0c 91     -q../j..Q...*y..
    7e6c:	2f 72 0b 90 5b 7f 01 91 2b 79 04 90 5d 77 03 90     /r..[...+y..]w..
    7e7c:	5b 76 10 90 5a 7a 01 91 26 76 0c 91 28 77 0b 90     [v..Zz..&v..(w..
    7e8c:	58 7c 01 91 2b 73 18 91 26 75 01 90 56 7c 0b 91     X|..+s..&u..V|..
    7e9c:	2b 76 0c 91 2d 75 00 90 58 7f 18 91 28 7a 0c 91     +v..-u..X...(z..
    7eac:	2a 7b 0c 91 2d 78 17 90 51 7d 01 91 2f 72 0c 91     *{..-x..Q}../r..
    7ebc:	2d 73 0c 91 32 73 00 90 5b 7f 05 90 5d 7e 04 90     -s..2s..[...]~..
    7ecc:	5b 79 0f 91 2d 76 01 90 5a 79 0b 91 2f 7a 0c 91     [y..-v..Zy../z..
    7edc:	32 74 00 90 58 7b 18 91 2d 76 00 90 56 7b 0c 91     2t..X{..-v..V{..
    7eec:	32 73 0c 91 2f 7a 00 90 58 7e 18 91 2a 72 0c 91     2s../z..X~..*r..
    7efc:	2d 77 0b 90 51 7d 01 91 2f 61 18 91 2a 74 0c 91     -w..Q}../a..*t..
    7f0c:	2f 71 0c 91 2b 77 00 90 5d 7f 18 91 26 6f 0c 91     /q..+w..]...&o..
    7f1c:	28 73 0c 91 2b 75 18 91 26 72 0c 91 2b 6c 0c 91     (s..+u..&r..+l..
    7f2c:	2d 70 18 91 28 75 0c 91 2a 6f 0c 91 2d 74 18 91     -p..(u..*o..-t..
    7f3c:	28 76 0c 91 2d 76 0c 91 2a 7c 01 90 5d 75 00 90     (v..-v..*|..]u..
    7f4c:	5f 7e 17 91 25 75 0c 91 28 79 0b 90 5d 7b 01 91     _~..%u..(y..]{..
    7f5c:	2a 75 17 90 56 75 01 91 25 77 0c 91 28 78 0c 91     *u..Vu..%w..(x..
    7f6c:	2a 76 01 90 5d 7f 17 91 25 76 0c 91 28 7c 0c 91     *v..]...%v..(|..
    7f7c:	2a 7a 01 90 5b 7d 17 91 2d 77 0c 91 2e 75 02 90     *z..[}..-w...u..
    7f8c:	5a 75 04 90 5b 74 03 90 5a 6c 03 91 2f 7e 18 91     Zu..[t..Zl../~..
    7f9c:	2a 7a 0c 91 2d 76 0c 91 2f 76 02 90 52 7a 16 91     *z..-v../v..Rz..
    7fac:	2a 7a 00 90 53 7a 0c 91 3f 7f 0c 91 2b 7d 00 90     *z..Sz..?...+}..
    7fbc:	5a 7d 18 91 26 77 0c 91 28 77 0c 91 2d 7c 00 90     Z}..&w..(w..-|..
    7fcc:	58 7e 18 91 28 7a 0c 91 2d 66 0c 91 32 76 00 90     X~..(z..-f..2v..
    7fdc:	5a 7c 18 91 2d 74 0c 91 2f 7b 0c 91 32 75 17 90     Z|..-t../{..2u..
    7fec:	5a 7c 01 91 2d 75 0c 91 32 76 0c 91 2f 67 00 90     Z|..-u..2v../g..
    7ffc:	5b 7c 18 91 2a 78 01 90 5a 7c 0b 91 2d 71 0c 91     [|..*x..Z|..-q..
    800c:	2f 7a 01 90 58 7c 17 91 2a 79 00 90 56 7d 0c 91     /z..X|..*y..V}..
    801c:	2f 72 0b 90 58 7d 01 91 2b 79 18 91 26 76 0c 91     /r..X}..+y..&v..
    802c:	28 77 0c 91 2b 73 18 91 26 75 02 90 58 7d 0a 91     (w..+s..&u..X}..
    803c:	2b 76 0c 91 2d 75 01 90 5a 7d 17 91 28 7a 01 90     +v..-u..Z}..(z..
    804c:	58 7d 0b 91 2a 7b 0c 91 2d 78 01 90 56 7d 17 91     X}..*{..-x..V}..
    805c:	2f 72 00 90 58 7e 0c 91 2d 73 0c 91 26 76 00 90     /r..X~..-s..&v..
    806c:	56 7e 18 91 21 79 0c 91 23 6d 0c 91 26 77 18 91     V~..!y..#m..&w..
    807c:	21 79 0c 91 23 76 0c 91 26 76 18 91 21 79 0c 91     !y..#v..&v..!y..
    808c:	23 6d 0c 91 26 77 18 91 21 79 0c 91 23 76 0c 91     #m..&w..!y..#v..
    809c:	26 76 01 90 4e 76 00 90 4a 68 17 91 21 79 0c 91     &v..Nv..Jh..!y..
    80ac:	23 6d 0c 91 26 77 18 91 21 79 0c 91 23 76 0c 91     #m..&w..!y..#v..
    80bc:	26 76 00 90 4e 60 00 90 51 64 18 91 21 79 0c 91     &v..N`..Qd..!y..
    80cc:	23 6d 0c 91 26 77 18 91 21 79 0c 91 23 76 0b 90     #m..&w..!y..#v..
    80dc:	51 67 00 90 56 58 01 91 26 76 18 91 21 79 0c 91     Qg..VX..&v..!y..
    80ec:	23 6d 0c 91 26 77 18 91 21 79 0c 91 23 76 0c 91     #m..&w..!y..#v..
    80fc:	26 76 18 91 21 79 0c 91 23 6d 0c 91 26 77 18 91     &v..!y..#m..&w..
    810c:	21 79 0c 91 23 76 0c 91 26 76 00 90 51 61 00 90     !y..#v..&v..Qa..
    811c:	56 66 18 91 21 79 0c 91 23 6d 0c 91 26 77 18 91     Vf..!y..#m..&w..
    812c:	21 79 0c 91 23 76 0c 91 26 76 00 90 51 60 00 90     !y..#v..&v..Q`..
    813c:	56 5a 18 91 21 79 0c 91 23 6d 0c 91 26 77 18 91     VZ..!y..#m..&w..
    814c:	21 79 0c 91 23 76 0c 91 26 76 00 90 51 5c 00 90     !y..#v..&v..Q\..
    815c:	56 5a 18 91 21 79 0c 91 23 6d 0c 91 26 77 18 91     VZ..!y..#m..&w..
    816c:	21 79 0c 91 23 76 0b 90 51 57 00 90 56 52 01 91     !y..#v..QW..VR..
    817c:	26 76 18 91 21 79 0c 91 23 6d 0c 91 26 77 18 91     &v..!y..#m..&w..
    818c:	21 79 14 ff 06 01 45 00 ff 2f 00                    !y....E../.

00008197 <music_stop>:
    8197:	00 90 10 00 00 91 10 00 00 92 10 00 00 93 10 00     ................
    81a7:	00 ff 2f 00                                         ../.

000081ab <txt_paused>:
    81ab:	50 41 55 53 45 44 00                                PAUSED.

000081b2 <txt_continue_exit1>:
    81b2:	20 43 4f 4e 54 49 4e 55 45 20 00                     CONTINUE .

000081bd <txt_continue_exit2>:
    81bd:	20 45 58 49 54 20 00                                 EXIT .

000081c4 <txt_pjones>:
    81c4:	40 20 4a 4f 4e 45 53 20 32 30 31 33 00              @ JONES 2013.

000081d1 <txt_get_ready>:
    81d1:	41 43 54 49 56 41 54 45 00                          ACTIVATE.

000081da <txt_blank10>:
    81da:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                    .

000081ea <txt_blank3>:
    81ea:	20 20 20 00                                            .

000081ee <txt_level>:
    81ee:	45 4e 54 45 52 49 4e 47 20 53 45 43 54 4f 52 00     ENTERING SECTOR.

000081fe <txt_youareinthetopten>:
    81fe:	59 4f 55 20 41 52 45 20 49 4e 20 54 48 45 20 54     YOU ARE IN THE T
    820e:	4f 50 20 46 49 56 45 00                             OP FIVE.

00008216 <txt_congratulations>:
    8216:	43 4f 4e 47 52 41 54 55 4c 41 54 49 4f 4e 53 00     CONGRATULATIONS.

00008226 <txt_playerone>:
    8226:	50 4c 41 59 45 52 20 4f 4e 45 00                    PLAYER ONE.

00008231 <txt_playertwo>:
    8231:	50 4c 41 59 45 52 20 54 57 4f 00                    PLAYER TWO.

0000823c <txt_1player>:
    823c:	31 20 50 4c 41 59 45 52 20 00                       1 PLAYER .

00008246 <txt_2player>:
    8246:	32 20 50 4c 41 59 45 52 20 00                       2 PLAYER .

00008250 <txt_please_enter_your_name>:
    8250:	50 4c 45 41 53 45 20 45 4e 54 45 52 20 59 4f 55     PLEASE ENTER YOU
    8260:	52 20 4e 41 4d 45 00                                R NAME.

00008267 <txt_game_over>:
    8267:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00008271 <his_lets>:
    8271:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    8281:	51 52 53 54 55 56 57 58 59 5a 2e 00                 QRSTUVWXYZ..

0000828d <txt_1up>:
    828d:	31 55 50 00                                         1UP.

00008291 <txt_2up>:
    8291:	32 55 50 00                                         2UP.

00008295 <txt_sector>:
    8295:	53 3a 00                                            S:.

00008298 <txt_lives>:
    8298:	4c 49 56 45 53 00                                   LIVES.

0000829e <txt_hi>:
    829e:	48 49 00                                            HI.

000082a1 <txt_sound>:
    82a1:	53 4f 55 4e 44 20 00                                SOUND .

000082a8 <txt_level_completed>:
    82a8:	53 45 43 54 4f 52 20 45 58 50 55 52 47 41 54 45     SECTOR EXPURGATE
    82b8:	44 00                                               D.

000082ba <txt_time_bonus>:
    82ba:	54 49 4d 45 20 42 4f 4e 55 53 00                    TIME BONUS.

000082c5 <txt_music_on>:
    82c5:	20 4d 55 53 49 43 20 4f 4e 20 00                     MUSIC ON .

000082d0 <txt_music_off>:
    82d0:	20 4d 55 53 49 43 20 4f 46 46 00                     MUSIC OFF.

000082db <txt_player>:
    82db:	26 82 31 82                                         &.1.

000082df <frames_pengo_walk>:
    82df:	1f 1c 16 19                                         ....

000082e3 <frames_baddie_walk>:
    82e3:	0a 06 02 04 00                                      .....

000082e8 <__ctors_end>:
    82e8:	11 24       	eor	r1, r1
    82ea:	1f be       	out	0x3f, r1	; 63
    82ec:	cf ef       	ldi	r28, 0xFF	; 255
    82ee:	d0 e1       	ldi	r29, 0x10	; 16
    82f0:	de bf       	out	0x3e, r29	; 62
    82f2:	cd bf       	out	0x3d, r28	; 61

000082f4 <wdt_init>:
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    MCUSR = 0;
    82f4:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    82f6:	88 e1       	ldi	r24, 0x18	; 24
    82f8:	0f b6       	in	r0, 0x3f	; 63
    82fa:	f8 94       	cli
    82fc:	80 93 60 00 	sts	0x0060, r24
    8300:	10 92 60 00 	sts	0x0060, r1
    8304:	0f be       	out	0x3f, r0	; 63

00008306 <__do_copy_data>:
    8306:	11 e0       	ldi	r17, 0x01	; 1
    8308:	a0 e0       	ldi	r26, 0x00	; 0
    830a:	b1 e0       	ldi	r27, 0x01	; 1
    830c:	e0 ef       	ldi	r30, 0xF0	; 240
    830e:	fe ed       	ldi	r31, 0xDE	; 222
    8310:	02 c0       	rjmp	.+4      	; 0x8316 <.do_copy_data_start>

00008312 <.do_copy_data_loop>:
    8312:	05 90       	lpm	r0, Z+
    8314:	0d 92       	st	X+, r0

00008316 <.do_copy_data_start>:
    8316:	a6 31       	cpi	r26, 0x16	; 22
    8318:	b1 07       	cpc	r27, r17
    831a:	d9 f7       	brne	.-10     	; 0x8312 <.do_copy_data_loop>

0000831c <__do_clear_bss>:
    831c:	10 e1       	ldi	r17, 0x10	; 16
    831e:	a0 e2       	ldi	r26, 0x20	; 32
    8320:	b1 e0       	ldi	r27, 0x01	; 1
    8322:	01 c0       	rjmp	.+2      	; 0x8326 <.do_clear_bss_start>

00008324 <.do_clear_bss_loop>:
    8324:	1d 92       	st	X+, r1

00008326 <.do_clear_bss_start>:
    8326:	a6 32       	cpi	r26, 0x26	; 38
    8328:	b1 07       	cpc	r27, r17
    832a:	e1 f7       	brne	.-8      	; 0x8324 <.do_clear_bss_loop>

0000832c <Initialize>:
	io_set(OCR1BL,0x4f),		//lo8(0x36e-31) eq pulse pulse restore
	io_set(OCR1BH,0x03)			//hi8(0x36e-31)	
};


void Initialize(void){
    832c:	0e 94 6f 46 	call	0x8cde	; 0x8cde <isEepromFormatted>
    8330:	88 23       	and	r24, r24
    8332:	11 f4       	brne	.+4      	; 0x8338 <Initialize+0xc>
    8334:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <FormatEeprom>
	int i;

	if(!isEepromFormatted()) FormatEeprom();

	cli();
    8338:	f8 94       	cli
    833a:	e1 ee       	ldi	r30, 0xE1	; 225
    833c:	fb e0       	ldi	r31, 0x0B	; 11
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(i=0;i<MIX_BANK_SIZE*2;i++){
			mix_buf[i]=0x80;//(i<128?i:128);
    833e:	80 e8       	ldi	r24, 0x80	; 128
    8340:	81 93       	st	Z+, r24

	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(i=0;i<MIX_BANK_SIZE*2;i++){
    8342:	9d e0       	ldi	r25, 0x0D	; 13
    8344:	ed 3e       	cpi	r30, 0xED	; 237
    8346:	f9 07       	cpc	r31, r25
    8348:	d9 f7       	brne	.-10     	; 0x8340 <Initialize+0x14>
			mix_buf[i]=0x80;//(i<128?i:128);
		}	
	
		mix_pos=mix_buf;
    834a:	81 ee       	ldi	r24, 0xE1	; 225
    834c:	9b e0       	ldi	r25, 0x0B	; 11
    834e:	90 93 ee 0d 	sts	0x0DEE, r25
    8352:	80 93 ed 0d 	sts	0x0DED, r24
		mix_bank=0;
    8356:	10 92 ef 0d 	sts	0x0DEF, r1
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    835a:	91 e0       	ldi	r25, 0x01	; 1
    835c:	90 93 06 0e 	sts	0x0E06, r25
		tr4_barrel_hi=1;		
    8360:	90 93 07 0e 	sts	0x0E07, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    8364:	90 93 05 0e 	sts	0x0E05, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    8368:	10 92 f2 0d 	sts	0x0DF2, r1
    836c:	10 92 f8 0d 	sts	0x0DF8, r1
    8370:	10 92 fe 0d 	sts	0x0DFE, r1
    8374:	10 92 04 0e 	sts	0x0E04, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1
	sync_phase=0;
    8378:	10 92 b6 0b 	sts	0x0BB6, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    837c:	82 e1       	ldi	r24, 0x12	; 18
    837e:	80 93 b7 0b 	sts	0x0BB7, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    8382:	80 ed       	ldi	r24, 0xD0	; 208
    8384:	80 93 c0 0b 	sts	0x0BC0, r24
	render_lines_count=FRAME_LINES;
    8388:	80 93 be 0b 	sts	0x0BBE, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    838c:	8c e1       	ldi	r24, 0x1C	; 28
    838e:	80 93 bf 0b 	sts	0x0BBF, r24
	first_render_line=FIRST_RENDER_LINE;
    8392:	80 93 bd 0b 	sts	0x0BBD, r24

	joypad1_status_hi=0;
    8396:	10 92 c4 0b 	sts	0x0BC4, r1
    839a:	10 92 c3 0b 	sts	0x0BC3, r1
	joypad2_status_hi=0;
    839e:	10 92 c8 0b 	sts	0x0BC8, r1
    83a2:	10 92 c7 0b 	sts	0x0BC7, r1
	sound_enabled=1;
    83a6:	90 93 f1 0d 	sts	0x0DF1, r25

	InitializeVideoMode();
    83aa:	0e 94 d8 4f 	call	0x9fb0	; 0x9fb0 <InitializeVideoMode>
    83ae:	20 e9       	ldi	r18, 0x90	; 144
    83b0:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    83b2:	f9 01       	movw	r30, r18
    83b4:	85 91       	lpm	r24, Z+
    83b6:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    83b8:	fc 01       	movw	r30, r24
    83ba:	f0 70       	andi	r31, 0x00	; 0
    83bc:	90 83       	st	Z, r25
    83be:	2e 5f       	subi	r18, 0xFE	; 254
    83c0:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    83c2:	80 e0       	ldi	r24, 0x00	; 0
    83c4:	2e 3b       	cpi	r18, 0xBE	; 190
    83c6:	38 07       	cpc	r19, r24
    83c8:	a1 f7       	brne	.-24     	; 0x83b2 <Initialize+0x86>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    83ca:	78 94       	sei
	
	DisplayLogo();
    83cc:	0e 94 d7 4f 	call	0x9fae	; 0x9fae <DisplayLogo>
    83d0:	0e 94 f4 6d 	call	0xdbe8	; 0xdbe8 <main>
    83d4:	0c 94 76 6f 	jmp	0xdeec	; 0xdeec <_exit>

000083d8 <__bad_interrupt>:
    83d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000083dc <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		ldi r16,6
    83dc:	06 e0       	ldi	r16, 0x06	; 6
		dec r16
    83de:	0a 95       	dec	r16
		brne .-4		
    83e0:	f1 f7       	brne	.-4      	; 0x83de <sub_video_mode3+0x2>
		;rjmp .


		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    83e2:	ec e3       	ldi	r30, 0x3C	; 60
		ldi ZH,hi8(ram_tiles_restore);
    83e4:	fb e0       	ldi	r31, 0x0B	; 11

		ldi YL,lo8(vram)
    83e6:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    83e8:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    83ea:	20 91 7a 0e 	lds	r18, 0x0E7A


		clr r16
    83ee:	00 27       	eor	r16, r16

000083f0 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    83f0:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    83f2:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    83f4:	ac 0f       	add	r26, r28
		adc XH,YH
    83f6:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    83f8:	1c 91       	ld	r17, X
		std Z+2,r17
    83fa:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    83fc:	02 17       	cp	r16, r18
		brsh noov
    83fe:	08 f4       	brcc	.+2      	; 0x8402 <noov>
		mov r17,r16
    8400:	10 2f       	mov	r17, r16

00008402 <noov>:
	noov:
		st X,r17
    8402:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    8404:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    8406:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    8408:	0b 31       	cpi	r16, 0x1B	; 27
		brlo upd_loop ;23
    840a:	90 f3       	brcs	.-28     	; 0x83f0 <upd_loop>



		ldi r16,63-RAM_TILES_COUNT ;222*7 
    840c:	04 e2       	ldi	r16, 0x24	; 36

0000840e <wait_loop>:
	wait_loop:
	
		ldi r17,6
    840e:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    8410:	1a 95       	dec	r17
		brne .-4
    8412:	f1 f7       	brne	.-4      	; 0x8410 <wait_loop+0x2>

		dec r16
    8414:	0a 95       	dec	r16
		brne wait_loop
    8416:	d9 f7       	brne	.-10     	; 0x840e <wait_loop>

	


		ldi YL,lo8(vram)
    8418:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    841a:	d1 e0       	ldi	r29, 0x01	; 1

		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    841c:	00 ed       	ldi	r16, 0xD0	; 208
		mov r10,r16
    841e:	a0 2e       	mov	r10, r16
		clr r22
    8420:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    8422:	78 e0       	ldi	r23, 0x08	; 8

00008424 <next_text_line>:




	next_text_line:	
		rcall hsync_pulse
    8424:	7b d2       	rcall	.+1270   	; 0x891c <hsync_pulse>

		WAIT r19,245 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT
    8426:	34 e2       	ldi	r19, 0x24	; 36
    8428:	3a 95       	dec	r19
    842a:	f1 f7       	brne	.-4      	; 0x8428 <next_text_line+0x4>
    842c:	00 00       	nop
    842e:	00 00       	nop

		;***draw line***
		call render_tile_line
    8430:	0e 94 40 42 	call	0x8480	; 0x8480 <render_tile_line>

		ldi r19,7 + 4 - CENTER_ADJUSTMENT	
    8434:	3b e0       	ldi	r19, 0x0B	; 11
		dec r19			
    8436:	3a 95       	dec	r19
		brne .-4
    8438:	f1 f7       	brne	.-4      	; 0x8436 <next_text_line+0x12>
	
		;rjmp .

		dec r10
    843a:	aa 94       	dec	r10
		breq text_frame_end
    843c:	89 f0       	breq	.+34     	; 0x8460 <text_frame_end>
	
		inc r22
    843e:	63 95       	inc	r22
		lpm ;3 nop
    8440:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    8442:	68 30       	cpi	r22, 0x08	; 8
		breq next_text_row 
    8444:	29 f0       	breq	.+10     	; 0x8450 <next_text_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		lpm ;3 nop
    8446:	c8 95       	lpm
		lpm ;3 nop
    8448:	c8 95       	lpm
		lpm ;3 nop
    844a:	c8 95       	lpm
		nop
    844c:	00 00       	nop
		rjmp next_text_line	
    844e:	ea cf       	rjmp	.-44     	; 0x8424 <next_text_line>

00008450 <next_text_row>:

	next_text_row:
		clr r22		;current char line			;1	
    8450:	66 27       	eor	r22, r22

		clr r0
    8452:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    8454:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    8456:	c3 0f       	add	r28, r19
		adc YH,r0
    8458:	d0 1d       	adc	r29, r0

		lpm
    845a:	c8 95       	lpm
		nop
    845c:	00 00       	nop

		rjmp next_text_line
    845e:	e2 cf       	rjmp	.-60     	; 0x8424 <next_text_line>

00008460 <text_frame_end>:

	text_frame_end:

		ldi r19,5
    8460:	35 e0       	ldi	r19, 0x05	; 5
		dec r19			
    8462:	3a 95       	dec	r19
		brne .-4
    8464:	f1 f7       	brne	.-4      	; 0x8462 <text_frame_end+0x2>
		rjmp .
    8466:	00 c0       	rjmp	.+0      	; 0x8468 <text_frame_end+0x8>

		rcall hsync_pulse ;145
    8468:	59 d2       	rcall	.+1202   	; 0x891c <hsync_pulse>
	
		clr r1
    846a:	11 24       	eor	r1, r1
		call RestoreBackground
    846c:	0e 94 80 4f 	call	0x9f00	; 0x9f00 <RestoreBackground>

		;set vsync flag if beginning of next frame
		ldi ZL,1
    8470:	e1 e0       	ldi	r30, 0x01	; 1
		sts vsync_flag,ZL
    8472:	e0 93 b8 0b 	sts	0x0BB8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8476:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8478:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    847c:	11 24       	eor	r1, r1


		ret
    847e:	08 95       	ret

00008480 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8480:	de 01       	movw	r26, r28

		mul r22,r23
    8482:	67 9f       	mul	r22, r23

		nop
    8484:	00 00       	nop

		lds r16,tile_table_lo 
    8486:	00 91 b3 0b 	lds	r16, 0x0BB3
		lds r17,tile_table_hi
    848a:	10 91 b4 0b 	lds	r17, 0x0BB4
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    848e:	00 5c       	subi	r16, 0xC0	; 192
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8490:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    8492:	00 0d       	add	r16, r0
		adc r17,r1
    8494:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    8496:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    8498:	0c e7       	ldi	r16, 0x7C	; 124
		ldi r17,hi8(ram_tiles)
    849a:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    849c:	00 0d       	add	r16, r0
		adc r17,r1
    849e:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    84a0:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    84a2:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    84a4:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    84a6:	2d 91       	ld	r18, X+
		cpi r18,RAM_TILES_COUNT
    84a8:	2b 31       	cpi	r18, 0x1B	; 27
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    84aa:	6f b6       	in	r6, 0x3f	; 63
		bst r6,SREG_C
    84ac:	60 fa       	bst	r6, 0

		mul r18,r19 	;tile*width*height
    84ae:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    84b0:	a1 01       	movw	r20, r2
		brtc .+2
    84b2:	0e f4       	brtc	.+2      	; 0x84b6 <render_tile_line+0x36>
		movw r20,r4		;ram tiles
    84b4:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    84b6:	04 0e       	add	r0, r20
	    adc r1,r21
    84b8:	15 1e       	adc	r1, r21

		movw ZL,r0
    84ba:	f0 01       	movw	r30, r0

		brts ramloop
    84bc:	f6 f0       	brts	.+60     	; 0x84fa <ramloop>

000084be <romloop>:
	

	romloop:
	    lpm r16,Z+
    84be:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    84c0:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    84c2:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    84c4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    84c6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    84c8:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    84ca:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    84cc:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    84ce:	2b 31       	cpi	r18, 0x1B	; 27
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    84d0:	6f b6       	in	r6, 0x3f	; 63


	    lpm r16,Z+
    84d2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    84d4:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    84d6:	08 f4       	brcc	.+2      	; 0x84da <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    84d8:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    84da:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    84dc:	08 b9       	out	0x08, r16	; 8
	    bst r6,SREG_C	;store carry state in T flag for later branch
    84de:	60 fa       	bst	r6, 0
		add r0,r20		;add title table address +row offset lsb
    84e0:	04 0e       	add	r0, r20
    
	    lpm r16,Z+
    84e2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    84e4:	08 b9       	out	0x08, r16	; 8
		adc r1,r21		;add title table address +row offset msb
    84e6:	15 1e       	adc	r1, r21
		dec r17			;decrement tiles to draw on line
    84e8:	1a 95       	dec	r17

   
	    lpm r16,Z+
    84ea:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    84ec:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    84ee:	05 91       	lpm	r16, Z+

		breq end	
    84f0:	39 f1       	breq	.+78     	; 0x8540 <end>
	    movw ZL,r0   	;copy next tile adress
    84f2:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    84f4:	08 b9       	out	0x08, r16	; 8
	    brtc romloop
    84f6:	1e f7       	brtc	.-58     	; 0x84be <romloop>
	
		rjmp .
    84f8:	00 c0       	rjmp	.+0      	; 0x84fa <ramloop>

000084fa <ramloop>:

	ramloop:

	    ld r16,Z+
    84fa:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    84fc:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    84fe:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    8500:	01 91       	ld	r16, Z+
		nop   
    8502:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    8504:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    8506:	23 9f       	mul	r18, r19


	    ld r16,Z+
    8508:	01 91       	ld	r16, Z+
		nop
    850a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    850c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    850e:	2b 31       	cpi	r18, 0x1B	; 27
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    8510:	6f b6       	in	r6, 0x3f	; 63
		bst r6,SREG_C
    8512:	60 fa       	bst	r6, 0
   

	    ld r16,Z+
    8514:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8516:	08 b9       	out	0x08, r16	; 8
		brts .+2 
    8518:	0e f0       	brts	.+2      	; 0x851c <ramloop+0x22>
		movw r20,r2 	;ROM title table address +row offset	
    851a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    851c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    851e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    8520:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    8522:	15 1e       	adc	r1, r21
		rjmp .
    8524:	00 c0       	rjmp	.+0      	; 0x8526 <ramloop+0x2c>
    
		ld r16,Z+		
    8526:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    8528:	08 b9       	out	0x08, r16	; 8
		nop
    852a:	00 00       	nop
		rjmp .  
    852c:	00 c0       	rjmp	.+0      	; 0x852e <ramloop+0x34>

	    ld r16,Z+	
    852e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8530:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    8532:	01 91       	ld	r16, Z+

	    dec r17
    8534:	1a 95       	dec	r17
	    breq end
    8536:	21 f0       	breq	.+8      	; 0x8540 <end>
	
		movw ZL,r0
    8538:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    853a:	08 b9       	out	0x08, r16	; 8
	
	    brtc romloop
    853c:	06 f6       	brtc	.-128    	; 0x84be <romloop>
		rjmp ramloop
    853e:	dd cf       	rjmp	.-70     	; 0x84fa <ramloop>

00008540 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8540:	08 b9       	out	0x08, r16	; 8
		clr r16	
    8542:	00 27       	eor	r16, r16
		lpm	
    8544:	c8 95       	lpm
		nop
    8546:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    8548:	08 b9       	out	0x08, r16	; 8

		;wait
		ldi r16,5
    854a:	05 e0       	ldi	r16, 0x05	; 5
		dec r16
    854c:	0a 95       	dec	r16
		brne .-4
    854e:	f1 f7       	brne	.-4      	; 0x854c <end+0xc>

	


		ret
    8550:	08 95       	ret

00008552 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8552:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    8554:	e0 91 b3 0b 	lds	r30, 0x0BB3
	lds ZH,tile_table_hi
    8558:	f0 91 b4 0b 	lds	r31, 0x0BB4
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    855c:	8b 51       	subi	r24, 0x1B	; 27
	mul r24,r18
    855e:	82 9f       	mul	r24, r18
	add ZL,r0
    8560:	e0 0d       	add	r30, r0
	adc ZH,r1
    8562:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8564:	ac e7       	ldi	r26, 0x7C	; 124
	ldi XH,hi8(ram_tiles)
    8566:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8568:	62 9f       	mul	r22, r18
	add XL,r0
    856a:	a0 0d       	add	r26, r0
	adc XH,r1
    856c:	b1 1d       	adc	r27, r1

	clr r0
    856e:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    8570:	05 90       	lpm	r0, Z+
    8572:	0d 92       	st	X+, r0
    8574:	05 90       	lpm	r0, Z+
    8576:	0d 92       	st	X+, r0
    8578:	05 90       	lpm	r0, Z+
    857a:	0d 92       	st	X+, r0
    857c:	05 90       	lpm	r0, Z+
    857e:	0d 92       	st	X+, r0
    8580:	05 90       	lpm	r0, Z+
    8582:	0d 92       	st	X+, r0
    8584:	05 90       	lpm	r0, Z+
    8586:	0d 92       	st	X+, r0
    8588:	05 90       	lpm	r0, Z+
    858a:	0d 92       	st	X+, r0
    858c:	05 90       	lpm	r0, Z+
    858e:	0d 92       	st	X+, r0
    8590:	05 90       	lpm	r0, Z+
    8592:	0d 92       	st	X+, r0
    8594:	05 90       	lpm	r0, Z+
    8596:	0d 92       	st	X+, r0
    8598:	05 90       	lpm	r0, Z+
    859a:	0d 92       	st	X+, r0
    859c:	05 90       	lpm	r0, Z+
    859e:	0d 92       	st	X+, r0
    85a0:	05 90       	lpm	r0, Z+
    85a2:	0d 92       	st	X+, r0
    85a4:	05 90       	lpm	r0, Z+
    85a6:	0d 92       	st	X+, r0
    85a8:	05 90       	lpm	r0, Z+
    85aa:	0d 92       	st	X+, r0
    85ac:	05 90       	lpm	r0, Z+
    85ae:	0d 92       	st	X+, r0
    85b0:	05 90       	lpm	r0, Z+
    85b2:	0d 92       	st	X+, r0
    85b4:	05 90       	lpm	r0, Z+
    85b6:	0d 92       	st	X+, r0
    85b8:	05 90       	lpm	r0, Z+
    85ba:	0d 92       	st	X+, r0
    85bc:	05 90       	lpm	r0, Z+
    85be:	0d 92       	st	X+, r0
    85c0:	05 90       	lpm	r0, Z+
    85c2:	0d 92       	st	X+, r0
    85c4:	05 90       	lpm	r0, Z+
    85c6:	0d 92       	st	X+, r0
    85c8:	05 90       	lpm	r0, Z+
    85ca:	0d 92       	st	X+, r0
    85cc:	05 90       	lpm	r0, Z+
    85ce:	0d 92       	st	X+, r0
    85d0:	05 90       	lpm	r0, Z+
    85d2:	0d 92       	st	X+, r0
    85d4:	05 90       	lpm	r0, Z+
    85d6:	0d 92       	st	X+, r0
    85d8:	05 90       	lpm	r0, Z+
    85da:	0d 92       	st	X+, r0
    85dc:	05 90       	lpm	r0, Z+
    85de:	0d 92       	st	X+, r0
    85e0:	05 90       	lpm	r0, Z+
    85e2:	0d 92       	st	X+, r0
    85e4:	05 90       	lpm	r0, Z+
    85e6:	0d 92       	st	X+, r0
    85e8:	05 90       	lpm	r0, Z+
    85ea:	0d 92       	st	X+, r0
    85ec:	05 90       	lpm	r0, Z+
    85ee:	0d 92       	st	X+, r0
    85f0:	05 90       	lpm	r0, Z+
    85f2:	0d 92       	st	X+, r0
    85f4:	05 90       	lpm	r0, Z+
    85f6:	0d 92       	st	X+, r0
    85f8:	05 90       	lpm	r0, Z+
    85fa:	0d 92       	st	X+, r0
    85fc:	05 90       	lpm	r0, Z+
    85fe:	0d 92       	st	X+, r0
    8600:	05 90       	lpm	r0, Z+
    8602:	0d 92       	st	X+, r0
    8604:	05 90       	lpm	r0, Z+
    8606:	0d 92       	st	X+, r0
    8608:	05 90       	lpm	r0, Z+
    860a:	0d 92       	st	X+, r0
    860c:	05 90       	lpm	r0, Z+
    860e:	0d 92       	st	X+, r0
    8610:	05 90       	lpm	r0, Z+
    8612:	0d 92       	st	X+, r0
    8614:	05 90       	lpm	r0, Z+
    8616:	0d 92       	st	X+, r0
    8618:	05 90       	lpm	r0, Z+
    861a:	0d 92       	st	X+, r0
    861c:	05 90       	lpm	r0, Z+
    861e:	0d 92       	st	X+, r0
    8620:	05 90       	lpm	r0, Z+
    8622:	0d 92       	st	X+, r0
    8624:	05 90       	lpm	r0, Z+
    8626:	0d 92       	st	X+, r0
    8628:	05 90       	lpm	r0, Z+
    862a:	0d 92       	st	X+, r0
    862c:	05 90       	lpm	r0, Z+
    862e:	0d 92       	st	X+, r0
    8630:	05 90       	lpm	r0, Z+
    8632:	0d 92       	st	X+, r0
    8634:	05 90       	lpm	r0, Z+
    8636:	0d 92       	st	X+, r0
    8638:	05 90       	lpm	r0, Z+
    863a:	0d 92       	st	X+, r0
    863c:	05 90       	lpm	r0, Z+
    863e:	0d 92       	st	X+, r0
    8640:	05 90       	lpm	r0, Z+
    8642:	0d 92       	st	X+, r0
    8644:	05 90       	lpm	r0, Z+
    8646:	0d 92       	st	X+, r0
    8648:	05 90       	lpm	r0, Z+
    864a:	0d 92       	st	X+, r0
    864c:	05 90       	lpm	r0, Z+
    864e:	0d 92       	st	X+, r0
    8650:	05 90       	lpm	r0, Z+
    8652:	0d 92       	st	X+, r0
    8654:	05 90       	lpm	r0, Z+
    8656:	0d 92       	st	X+, r0
    8658:	05 90       	lpm	r0, Z+
    865a:	0d 92       	st	X+, r0
    865c:	05 90       	lpm	r0, Z+
    865e:	0d 92       	st	X+, r0
    8660:	05 90       	lpm	r0, Z+
    8662:	0d 92       	st	X+, r0
    8664:	05 90       	lpm	r0, Z+
    8666:	0d 92       	st	X+, r0
    8668:	05 90       	lpm	r0, Z+
    866a:	0d 92       	st	X+, r0
    866c:	05 90       	lpm	r0, Z+
    866e:	0d 92       	st	X+, r0


	clr r1
    8670:	11 24       	eor	r1, r1
	ret
    8672:	08 95       	ret

00008674 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    8674:	0f 93       	push	r16
	push r17
    8676:	1f 93       	push	r17

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    8678:	95 e0       	ldi	r25, 0x05	; 5
	mul r24,r25
    867a:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    867c:	ec e2       	ldi	r30, 0x2C	; 44
	ldi ZH,hi8(sprites)	
    867e:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    8680:	e0 0d       	add	r30, r0
	adc ZH,r1
    8682:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    8684:	04 81       	ldd	r16, Z+4	; 0x04

	;8x16 multiply
	ldd r24,Z+sprTileIndex_lo
    8686:	82 81       	ldd	r24, Z+2	; 0x02
	ldd r25,Z+sprTileIndex_hi
    8688:	93 81       	ldd	r25, Z+3	; 0x03
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    868a:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    868c:	8e 9f       	mul	r24, r30
	movw r26,r0
    868e:	d0 01       	movw	r26, r0
	mul r25,r30
    8690:	9e 9f       	mul	r25, r30
	add r27,r0
    8692:	b0 0d       	add	r27, r0
	
	;get tile bank addr
	ldi r25,4*2
    8694:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    8696:	09 9f       	mul	r16, r25
	ldi ZL,lo8(sprites_tile_banks)	
    8698:	ed e8       	ldi	r30, 0x8D	; 141
	ldi ZH,hi8(sprites_tile_banks)	
    869a:	fb e0       	ldi	r31, 0x0B	; 11
	clr r0
    869c:	00 24       	eor	r0, r0
	add ZL,r1
    869e:	e1 0d       	add	r30, r1
	adc ZH,r0		
    86a0:	f0 1d       	adc	r31, r0
	ldd r0,Z+0
    86a2:	00 80       	ld	r0, Z
	ldd r1,Z+1
    86a4:	11 80       	ldd	r1, Z+1	; 0x01
	movw ZL,r0
    86a6:	f0 01       	movw	r30, r0

	//lds ZL,sprites_tile_banks
	//lds ZH,sprites_tile_banks+1
	add ZL,r26	;tile data src
    86a8:	ea 0f       	add	r30, r26
	adc ZH,r27
    86aa:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    86ac:	ac e7       	ldi	r26, 0x7C	; 124
	ldi XH,hi8(ram_tiles)
    86ae:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    86b0:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    86b2:	69 9f       	mul	r22, r25
	add XL,r0
    86b4:	a0 0d       	add	r26, r0
	adc XH,r1
    86b6:	b1 1d       	adc	r27, r1
	;	xdiff=dx;
	;}else{
	;	src+=(8-dx);
	;	xdiff=(8-dx);
	;}	
	clr r1
    86b8:	11 24       	eor	r1, r1

	cpi r20,0
    86ba:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    86bc:	51 f4       	brne	.+20     	; 0x86d2 <x_2nd_tile>
	
	add XL,r18
    86be:	a2 0f       	add	r26, r18
	adc XH,r1
    86c0:	b1 1d       	adc	r27, r1
	mov r24,r18	;xdiff for dest
    86c2:	82 2f       	mov	r24, r18
	mov r17,r18	;xdiff for src
    86c4:	12 2f       	mov	r17, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    86c6:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    86c8:	11 c0       	rjmp	.+34     	; 0x86ec <x_check_end>

	adiw ZL,(TILE_WIDTH-1);7
    86ca:	37 96       	adiw	r30, 0x07	; 7
	ldi r17,16
    86cc:	10 e1       	ldi	r17, 0x10	; 16
	sub r17,r18	;xdiff for src
    86ce:	12 1b       	sub	r17, r18
	rjmp x_check_end
    86d0:	0d c0       	rjmp	.+26     	; 0x86ec <x_check_end>

000086d2 <x_2nd_tile>:


x_2nd_tile:
	ldi r24,TILE_WIDTH
    86d2:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18	;8-DX = xdiff for dest
    86d4:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    86d6:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    86d8:	04 c0       	rjmp	.+8      	; 0x86e2 <x2_flip_x>

	mov r17,r24	;xdiff for src
    86da:	18 2f       	mov	r17, r24
	add ZL,r24
    86dc:	e8 0f       	add	r30, r24
	adc ZH,r1	
    86de:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    86e0:	05 c0       	rjmp	.+10     	; 0x86ec <x_check_end>

000086e2 <x2_flip_x>:

x2_flip_x:
	ldi r17,TILE_WIDTH
    86e2:	18 e0       	ldi	r17, 0x08	; 8
	add r17,r18	;xdiff for src
    86e4:	12 0f       	add	r17, r18
	
	add ZL,r18
    86e6:	e2 0f       	add	r30, r18
	adc ZH,r1
    86e8:	f1 1d       	adc	r31, r1
	sbiw ZL,1
    86ea:	31 97       	sbiw	r30, 0x01	; 1

000086ec <x_check_end>:
	;	ydiff=dy;
	;}else{
	;	src+=((8-dy)*TILE_WIDTH);
	;	ydiff=(8-dy);
	;}
	cpi r21,0
    86ec:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    86ee:	31 f4       	brne	.+12     	; 0x86fc <y_2nd_tile>
	ldi r25,TILE_WIDTH
    86f0:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19
    86f2:	93 9f       	mul	r25, r19
	add XL,r0
    86f4:	a0 0d       	add	r26, r0
	adc XH,r1
    86f6:	b1 1d       	adc	r27, r1
	mov r25,r19	;ydiff
    86f8:	93 2f       	mov	r25, r19
	rjmp y_check_end
    86fa:	06 c0       	rjmp	.+12     	; 0x8708 <y_check_end>

000086fc <y_2nd_tile>:
y_2nd_tile:
	ldi r25,TILE_HEIGHT
    86fc:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	;ydiff
    86fe:	93 1b       	sub	r25, r19
	ldi r21,TILE_WIDTH
    8700:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r25
    8702:	59 9f       	mul	r21, r25
	add ZL,r0
    8704:	e0 0d       	add	r30, r0
	adc ZH,r1	
    8706:	f1 1d       	adc	r31, r1

00008708 <y_check_end>:
		dest+=xdiff;

	}
*/

	clr r1
    8708:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    870a:	3e ef       	ldi	r19, 0xFE	; 254

	clt
    870c:	e8 94       	clt
	sbrc r16,SPRITE_FLIP_X_BIT
    870e:	00 fd       	sbrc	r16, 0
	set
    8710:	68 94       	set

	ldi r21,TILE_HEIGHT ;8
    8712:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 ;y2
    8714:	59 1b       	sub	r21, r25

00008716 <y2_loop>:

y2_loop:
	ldi r20,TILE_WIDTH ;8
    8716:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 ;x2
    8718:	48 1b       	sub	r20, r24

	brts x2_loop_flip
    871a:	3e f0       	brts	.+14     	; 0x872a <x2_loop_flip>

0000871c <x2_loop>:

	;normal X loop (11 cycles)
x2_loop:
	lpm r18,Z+
    871c:	25 91       	lpm	r18, Z+
	cpse r18,r19
    871e:	23 13       	cpse	r18, r19
	st X,r18
    8720:	2c 93       	st	X, r18
	adiw XL,1
    8722:	11 96       	adiw	r26, 0x01	; 1
	dec r20
    8724:	4a 95       	dec	r20
	brne x2_loop
    8726:	d1 f7       	brne	.-12     	; 0x871c <x2_loop>
	rjmp x2_loop_end
    8728:	07 c0       	rjmp	.+14     	; 0x8738 <x2_loop_end>

0000872a <x2_loop_flip>:

	;flipped X loop (13 cycles)
x2_loop_flip:
	lpm r18,Z
    872a:	24 91       	lpm	r18, Z+
	sbiw ZL,1
    872c:	31 97       	sbiw	r30, 0x01	; 1
	cpse r18,r19
    872e:	23 13       	cpse	r18, r19
	st X,r18
    8730:	2c 93       	st	X, r18
	adiw XL,1
    8732:	11 96       	adiw	r26, 0x01	; 1
	dec r20
    8734:	4a 95       	dec	r20
	brne x2_loop_flip
    8736:	c9 f7       	brne	.-14     	; 0x872a <x2_loop_flip>

00008738 <x2_loop_end>:

x2_loop_end:
	add ZL,r17
    8738:	e1 0f       	add	r30, r17
	adc ZH,r1
    873a:	f1 1d       	adc	r31, r1
	add XL,r24
    873c:	a8 0f       	add	r26, r24
	adc XH,r1
    873e:	b1 1d       	adc	r27, r1
	dec r21
    8740:	5a 95       	dec	r21
	brne y2_loop
    8742:	49 f7       	brne	.-46     	; 0x8716 <y2_loop>




	clr r1
    8744:	11 24       	eor	r1, r1

	pop r17
    8746:	1f 91       	pop	r17
	pop r16
    8748:	0f 91       	pop	r16
	ret
    874a:	08 95       	ret

0000874c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    874c:	0f 92       	push	r0
	push r1
    874e:	1f 92       	push	r1
	push ZL;2
    8750:	ef 93       	push	r30
	push ZH;2
    8752:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8754:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8756:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8758:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    875c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    875e:	f1 e0       	ldi	r31, 0x01	; 1

00008760 <latency_loop>:
latency_loop:
	cp ZL,ZH
    8760:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    8762:	00 f0       	brcs	.+0      	; 0x8764 <latency_loop+0x4>
	inc ZH
    8764:	f3 95       	inc	r31
	cpi ZH,10
    8766:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    8768:	d8 f3       	brcs	.-10     	; 0x8760 <latency_loop>
	jmp .
    876a:	0c 94 b7 43 	jmp	0x876e	; 0x876e <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    876e:	e0 91 b7 0b 	lds	r30, 0x0BB7
	dec ZL
    8772:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8774:	e0 93 b7 0b 	sts	0x0BB7, r30

	;process sync phases
	lds ZH,sync_phase
    8778:	f0 91 b6 0b 	lds	r31, 0x0BB6
	sbrc ZH,0
    877c:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    877e:	57 c0       	rjmp	.+174    	; 0x882e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8780:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8782:	98 f0       	brcs	.+38     	; 0x87aa <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    8784:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8786:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    878a:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    878c:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8790:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8792:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    8794:	26 f4       	brtc	.+8      	; 0x879e <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8796:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8798:	0e 94 73 45 	call	0x8ae6	; 0x8ae6 <update_sound>
	rjmp sync_end
    879c:	b8 c0       	rjmp	.+368    	; 0x890e <sync_end>

0000879e <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    879e:	e5 e1       	ldi	r30, 0x15	; 21
    87a0:	ea 95       	dec	r30
    87a2:	f1 f7       	brne	.-4      	; 0x87a0 <sync_pre_eq_no_sound_update+0x2>
    87a4:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    87a6:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    87a8:	b2 c0       	rjmp	.+356    	; 0x890e <sync_end>

000087aa <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    87aa:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    87ac:	38 f1       	brcs	.+78     	; 0x87fc <sync_post_eq>

	rjmp .
    87ae:	00 c0       	rjmp	.+0      	; 0x87b0 <sync_eq+0x6>
	rjmp .
    87b0:	00 c0       	rjmp	.+0      	; 0x87b2 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    87b2:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    87b4:	e0 fb       	bst	r30, 0
	ldi ZL,4
    87b6:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    87b8:	16 f4       	brtc	.+4      	; 0x87be <sync_eq_skip>
	
	call update_sound
    87ba:	0e 94 73 45 	call	0x8ae6	; 0x8ae6 <update_sound>

000087be <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    87be:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    87c0:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    87c4:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    87c6:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    87ca:	a1 c0       	rjmp	.+322    	; 0x890e <sync_end>

000087cc <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    87cc:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    87ce:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    87d0:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    87d2:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    87d6:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    87d8:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    87da:	00 f0       	brcs	.+0      	; 0x87dc <__vector_14+0x10>

	cpi ZL,2
    87dc:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    87de:	00 f0       	brcs	.+0      	; 0x87e0 <__vector_14+0x14>

	cpi ZL,3
    87e0:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    87e2:	00 f0       	brcs	.+0      	; 0x87e4 <__vector_14+0x18>

	cpi ZL,4
    87e4:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    87e6:	00 f0       	brcs	.+0      	; 0x87e8 <__vector_14+0x1c>

	cpi ZL,5
    87e8:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    87ea:	00 f0       	brcs	.+0      	; 0x87ec <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    87ec:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    87ee:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    87f0:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    87f4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    87f6:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    87f8:	ef 91       	pop	r30
	reti
    87fa:	18 95       	reti

000087fc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    87fc:	00 c0       	rjmp	.+0      	; 0x87fe <sync_post_eq+0x2>

	bst ZL,0
    87fe:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8800:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    8802:	26 f4       	brtc	.+8      	; 0x880c <sync_post_eq_no_sound_update>
	ldi ZL,1	
    8804:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8806:	0e 94 73 45 	call	0x8ae6	; 0x8ae6 <update_sound>
	rjmp sync_pre_eq_cont
    880a:	05 c0       	rjmp	.+10     	; 0x8816 <sync_pre_eq_cont>

0000880c <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    880c:	e5 e1       	ldi	r30, 0x15	; 21
    880e:	ea 95       	dec	r30
    8810:	f1 f7       	brne	.-4      	; 0x880e <sync_post_eq_no_sound_update+0x2>
    8812:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8814:	28 9a       	sbi	0x05, 0	; 5

00008816 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    8816:	e0 91 b7 0b 	lds	r30, 0x0BB7
	cpi ZL,0
    881a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    881c:	09 f0       	breq	.+2      	; 0x8820 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    881e:	77 c0       	rjmp	.+238    	; 0x890e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    8820:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    8822:	e0 93 b7 0b 	sts	0x0BB7, r30
	ldi ZL,1
    8826:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    8828:	e0 93 b6 0b 	sts	0x0BB6, r30
	
	rjmp sync_end
    882c:	70 c0       	rjmp	.+224    	; 0x890e <sync_end>

0000882e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    882e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8830:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    8834:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    8836:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    883a:	00 c0       	rjmp	.+0      	; 0x883c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    883c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    883e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8840:	00 c0       	rjmp	.+0      	; 0x8842 <sync_hsync+0x14>
	call update_sound
    8842:	0e 94 73 45 	call	0x8ae6	; 0x8ae6 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8846:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8848:	00 90 bd 0b 	lds	r0, 0x0BBD
	sub ZH,r0				
    884c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    884e:	e0 91 b7 0b 	lds	r30, 0x0BB7
	cp ZL,ZH
    8852:	ef 17       	cp	r30, r31
	brsh no_render
    8854:	e0 f4       	brcc	.+56     	; 0x888e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    8856:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8858:	00 90 bd 0b 	lds	r0, 0x0BBD
	sub ZH,r0				
    885c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    885e:	00 90 be 0b 	lds	r0, 0x0BBE
	sub ZH,r0			
    8862:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8864:	ef 17       	cp	r30, r31
	brlo no_render
    8866:	98 f0       	brcs	.+38     	; 0x888e <no_render>

	;push r1-r29
	ldi ZL,29
    8868:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    886a:	ff 27       	eor	r31, r31

0000886c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    886c:	00 80       	ld	r0, Z
	push r0
    886e:	0f 92       	push	r0
	dec ZL
    8870:	ea 95       	dec	r30
	brne push_loop	
    8872:	e1 f7       	brne	.-8      	; 0x886c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,18+212-AUDIO_OUT_HSYNC_CYCLES
    8874:	0f e1       	ldi	r16, 0x1F	; 31
    8876:	0a 95       	dec	r16
    8878:	f1 f7       	brne	.-4      	; 0x8876 <push_loop+0xa>
    887a:	00 00       	nop
    887c:	00 00       	nop

	call VMODE_FUNC		;TCNT1=0x234
    887e:	0e 94 ee 41 	call	0x83dc	; 0x83dc <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8882:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8884:	ff 27       	eor	r31, r31

00008886 <pop_loop>:
pop_loop:
	pop r0
    8886:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    8888:	01 92       	st	Z+, r0
	cpi ZL,30
    888a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    888c:	e0 f3       	brcs	.-8      	; 0x8886 <pop_loop>

0000888e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    888e:	e0 91 b7 0b 	lds	r30, 0x0BB7
	cpi ZL,0
    8892:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8894:	09 f0       	breq	.+2      	; 0x8898 <no_render+0xa>
	rjmp sync_end
    8896:	3b c0       	rjmp	.+118    	; 0x890e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    8898:	2f 93       	push	r18
	push r19
    889a:	3f 93       	push	r19
	push r20
    889c:	4f 93       	push	r20
	push r21
    889e:	5f 93       	push	r21
	push r22
    88a0:	6f 93       	push	r22
	push r23
    88a2:	7f 93       	push	r23
	push r24
    88a4:	8f 93       	push	r24
	push r25
    88a6:	9f 93       	push	r25
	push r26
    88a8:	af 93       	push	r26
	push r27
    88aa:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    88ac:	78 94       	sei
	clr r1
    88ae:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    88b0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    88b2:	e0 93 b6 0b 	sts	0x0BB6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    88b6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    88b8:	e0 93 b7 0b 	sts	0x0BB7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    88bc:	f0 91 bf 0b 	lds	r31, 0x0BBF
	sts first_render_line,ZH
    88c0:	f0 93 bd 0b 	sts	0x0BBD, r31
	
	lds ZH,render_lines_count_tmp
    88c4:	f0 91 c0 0b 	lds	r31, 0x0BC0
	sts render_lines_count,ZH
    88c8:	f0 93 be 0b 	sts	0x0BBE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    88cc:	e0 91 b9 0b 	lds	r30, 0x0BB9
	lds ZH,pre_vsync_user_callback+1
    88d0:	f0 91 ba 0b 	lds	r31, 0x0BBA
	cp  ZL,r1
    88d4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    88d6:	f1 05       	cpc	r31, r1
	breq .+2 
    88d8:	09 f0       	breq	.+2      	; 0x88dc <no_render+0x4e>
	icall
    88da:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    88dc:	0e 94 5e 46 	call	0x8cbc	; 0x8cbc <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    88e0:	0e 94 dc 50 	call	0xa1b8	; 0xa1b8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    88e4:	0e 94 99 44 	call	0x8932	; 0x8932 <process_music>
	clr r1
    88e8:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    88ea:	e0 91 bb 0b 	lds	r30, 0x0BBB
	lds ZH,post_vsync_user_callback+1
    88ee:	f0 91 bc 0b 	lds	r31, 0x0BBC
	cp  ZL,r1
    88f2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    88f4:	f1 05       	cpc	r31, r1
	breq .+2 
    88f6:	09 f0       	breq	.+2      	; 0x88fa <no_render+0x6c>
	icall
    88f8:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    88fa:	bf 91       	pop	r27
	pop r26
    88fc:	af 91       	pop	r26
	pop r25
    88fe:	9f 91       	pop	r25
	pop r24
    8900:	8f 91       	pop	r24
	pop r23
    8902:	7f 91       	pop	r23
	pop r22
    8904:	6f 91       	pop	r22
	pop r21
    8906:	5f 91       	pop	r21
	pop r20
    8908:	4f 91       	pop	r20
	pop r19
    890a:	3f 91       	pop	r19
	pop r18
    890c:	2f 91       	pop	r18

0000890e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    890e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8910:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8912:	ff 91       	pop	r31
	pop ZL
    8914:	ef 91       	pop	r30
	pop r1
    8916:	1f 90       	pop	r1
	pop r0
    8918:	0f 90       	pop	r0
	reti
    891a:	18 95       	reti

0000891c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    891c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    891e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8920:	00 c0       	rjmp	.+0      	; 0x8922 <hsync_pulse+0x6>
	call update_sound
    8922:	0e 94 73 45 	call	0x8ae6	; 0x8ae6 <update_sound>

	lds ZL,sync_pulse
    8926:	e0 91 b7 0b 	lds	r30, 0x0BB7
	dec ZL
    892a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    892c:	e0 93 b7 0b 	sts	0x0BB7, r30

	ret
    8930:	08 95       	ret

00008932 <process_music>:
process_music:

	//call update_sound
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8932:	e0 91 f1 0d 	lds	r30, 0x0DF1
	sbrc ZL,0
    8936:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8938:	0e 94 0a 49 	call	0x9214	; 0x9214 <ProcessMusic>
#endif


	;Flip mix bank & set target bank adress for mixing
	lds r0,mix_bank
    893c:	00 90 ef 0d 	lds	r0, 0x0DEF
	tst r0
    8940:	00 20       	and	r0, r0
	brne set_hi_bank
    8942:	19 f4       	brne	.+6      	; 0x894a <set_hi_bank>
	ldi XL,lo8(mix_buf)
    8944:	a1 ee       	ldi	r26, 0xE1	; 225
	ldi XH,hi8(mix_buf)
    8946:	bb e0       	ldi	r27, 0x0B	; 11
	rjmp end_set_bank
    8948:	02 c0       	rjmp	.+4      	; 0x894e <end_set_bank>

0000894a <set_hi_bank>:
set_hi_bank:
	ldi XL,lo8(mix_buf+MIX_BANK_SIZE)
    894a:	a7 ee       	ldi	r26, 0xE7	; 231
	ldi XH,hi8(mix_buf+MIX_BANK_SIZE)
    894c:	bc e0       	ldi	r27, 0x0C	; 12

0000894e <end_set_bank>:
end_set_bank:

	ldi r18,1
    894e:	21 e0       	ldi	r18, 0x01	; 1
	eor	r0,r18
    8950:	02 26       	eor	r0, r18
	sts mix_bank,r0
    8952:	00 92 ef 0d 	sts	0x0DEF, r0
	
	ldi r18,2
    8956:	22 e0       	ldi	r18, 0x02	; 2
	sts mix_block,r18	
    8958:	20 93 f0 0d 	sts	0x0DF0, r18


#if ENABLE_MIXER==1

	lds ZL,sound_enabled
    895c:	e0 91 f1 0d 	lds	r30, 0x0DF1
	sbrs ZL,0
    8960:	e0 ff       	sbrs	r30, 0
	ret
    8962:	08 95       	ret

	push r2
    8964:	2f 92       	push	r2
	push r3
    8966:	3f 92       	push	r3
	push r4
    8968:	4f 92       	push	r4
	push r5
    896a:	5f 92       	push	r5
	push r6
    896c:	6f 92       	push	r6
	push r7
    896e:	7f 92       	push	r7
	push r8
    8970:	8f 92       	push	r8
	push r9
    8972:	9f 92       	push	r9
	push r10
    8974:	af 92       	push	r10
	push r11
    8976:	bf 92       	push	r11
	push r12
    8978:	cf 92       	push	r12
	push r13
    897a:	df 92       	push	r13
	push r14
    897c:	ef 92       	push	r14
	push r15
    897e:	ff 92       	push	r15
	push r16
    8980:	0f 93       	push	r16
	push r17
    8982:	1f 93       	push	r17
	push r28
    8984:	cf 93       	push	r28
	push r29
    8986:	df 93       	push	r29
	;mix channels

	#if SOUND_CHANNEL_4_ENABLE == 1

		#if MIXER_CHAN4_TYPE == 0	
			lds r21,tr4_vol
    8988:	50 91 04 0e 	lds	r21, 0x0E04
			lds r22,tr4_barrel_lo
    898c:	60 91 06 0e 	lds	r22, 0x0E06
			lds r23,tr4_barrel_hi
    8990:	70 91 07 0e 	lds	r23, 0x0E07
			lds r24,tr4_divider
    8994:	80 91 08 0e 	lds	r24, 0x0E08





	lds r2,tr1_step_lo
    8998:	20 90 f3 0d 	lds	r2, 0x0DF3
	lds r3,tr1_step_hi
    899c:	30 90 f4 0d 	lds	r3, 0x0DF4
	lds r4,tr1_pos_lo
    89a0:	40 90 f6 0d 	lds	r4, 0x0DF6
	lds r5,tr1_pos_hi 
    89a4:	50 90 f7 0d 	lds	r5, 0x0DF7
	lds r6,tr1_pos_frac
    89a8:	60 90 f5 0d 	lds	r6, 0x0DF5
	lds r17,tr1_vol
    89ac:	10 91 f2 0d 	lds	r17, 0x0DF2
	
	lds r7,tr2_step_lo
    89b0:	70 90 f9 0d 	lds	r7, 0x0DF9
	lds r8,tr2_step_hi
    89b4:	80 90 fa 0d 	lds	r8, 0x0DFA
	lds r9,tr2_pos_frac
    89b8:	90 90 fb 0d 	lds	r9, 0x0DFB
	lds r10,tr2_pos_lo
    89bc:	a0 90 fc 0d 	lds	r10, 0x0DFC
	lds r11,tr2_pos_hi
    89c0:	b0 90 fd 0d 	lds	r11, 0x0DFD
	lds r18,tr2_vol	
    89c4:	20 91 f8 0d 	lds	r18, 0x0DF8

	lds r12,tr3_step_lo
    89c8:	c0 90 ff 0d 	lds	r12, 0x0DFF
	lds r13,tr3_step_hi
    89cc:	d0 90 00 0e 	lds	r13, 0x0E00
	lds r14,tr3_pos_lo
    89d0:	e0 90 02 0e 	lds	r14, 0x0E02
	lds r15,tr3_pos_hi
    89d4:	f0 90 03 0e 	lds	r15, 0x0E03
	lds r16,tr3_pos_frac
    89d8:	00 91 01 0e 	lds	r16, 0x0E01
	lds r19,tr3_vol	
    89dc:	30 91 fe 0d 	lds	r19, 0x0DFE



	

	ldi r25,0xff 
    89e0:	9f ef       	ldi	r25, 0xFF	; 255

000089e2 <mix_loop>:
		sbrc r28,7
		ser r29
	#endif

	;channel 1 - 12 cycles/sample
	add	r6,r2	;add step to fractional part of sample pos
    89e2:	62 0c       	add	r6, r2
	adc r4,r3	;add step to low byte of sample pos
    89e4:	43 1c       	adc	r4, r3
	movw ZL,r4
    89e6:	f2 01       	movw	r30, r4
	lpm	r20,Z	;load sample
    89e8:	44 91       	lpm	r20, Z+
	mulsu r20,r17;(sample*mixing vol)
    89ea:	41 03       	mulsu	r20, r17
	clr r0
    89ec:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    89ee:	00 08       	sbc	r0, r0

	#if MIXER_CHAN4_TYPE == 0 || SOUND_CHANNEL_4_ENABLE == 0
		mov r28,r1	;add (sample*vol>>8) to mix buffer lsb
    89f0:	c1 2d       	mov	r28, r1
		mov r29,r0	;ajust mix buffer msb
    89f2:	d0 2d       	mov	r29, r0
		adc r29,r0	;ajust mix buffer msb		
	#endif

	#if SOUND_CHANNEL_2_ENABLE == 1
		;channel 2
		add	r9,r7	;add step to fractional part of sample pos
    89f4:	97 0c       	add	r9, r7
		adc r10,r8	;add step to low byte of sample pos 
    89f6:	a8 1c       	adc	r10, r8
		movw ZL,r10
    89f8:	f5 01       	movw	r30, r10
		lpm	r20,Z	;load sample
    89fa:	44 91       	lpm	r20, Z+
		mulsu r20,r18;(sample*mixing vol)
    89fc:	42 03       	mulsu	r20, r18
		clr r0
    89fe:	00 24       	eor	r0, r0
		sbc r0,r0	;sign extend
    8a00:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8a02:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    8a04:	d0 1d       	adc	r29, r0
	#endif 

	#if SOUND_CHANNEL_3_ENABLE == 1
		;channel 3
		add	r16,r12	;add step to fractional part of sample pos
    8a06:	0c 0d       	add	r16, r12
		adc r14,r13	;add step to low byte of sample pos 
    8a08:	ed 1c       	adc	r14, r13
		movw ZL,r14
    8a0a:	f7 01       	movw	r30, r14
		lpm	r20,Z	;load sample
    8a0c:	44 91       	lpm	r20, Z+
		mulsu r20,r19;(sample*mixing vol)
    8a0e:	43 03       	mulsu	r20, r19
		clr r0
    8a10:	00 24       	eor	r0, r0
		sbc r0,r0	;sign extend
    8a12:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8a14:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    8a16:	d0 1d       	adc	r29, r0
	#endif

	#if MIXER_CHAN4_TYPE == 0 && SOUND_CHANNEL_4_ENABLE == 1	

		;channel 4 - 7/15 bit LFSR (12 cycles/24 cycles)
		dec r24
    8a18:	8a 95       	dec	r24
		brpl no_shift
    8a1a:	6a f4       	brpl	.+26     	; 0x8a36 <no_shift>

		lds r20,tr4_params
    8a1c:	40 91 05 0e 	lds	r20, 0x0E05
		mov r24,r20
    8a20:	84 2f       	mov	r24, r20
		lsr r24 ;keep bits7:1
    8a22:	86 95       	lsr	r24

		mov r0,r22  ;copy barrel shifter
    8a24:	06 2e       	mov	r0, r22
		lsr r0
    8a26:	06 94       	lsr	r0
		eor r0,r22  ;xor bit0 and bit1
    8a28:	06 26       	eor	r0, r22
		bst r0,0
    8a2a:	00 fa       	bst	r0, 0
		lsr r23
    8a2c:	76 95       	lsr	r23
		ror r22	
    8a2e:	67 95       	ror	r22
		bld r23,6	;15 bits mode
    8a30:	76 f9       	bld	r23, 6
		sbrs r20,0
    8a32:	40 ff       	sbrs	r20, 0
		bld r22,6	;7 bits mode
    8a34:	66 f9       	bld	r22, 6

00008a36 <no_shift>:

	no_shift:
		ldi r20,0x80 ;-128
    8a36:	40 e8       	ldi	r20, 0x80	; 128
		sbrc r22,0
    8a38:	60 fd       	sbrc	r22, 0
		ldi r20,0x7f ;+127
    8a3a:	4f e7       	ldi	r20, 0x7F	; 127

		mulsu r20,r21;(sample*mixing vol)
    8a3c:	45 03       	mulsu	r20, r21
		clr r0
    8a3e:	00 24       	eor	r0, r0
		sbc r0,r0	;sign extend
    8a40:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8a42:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    8a44:	d0 1d       	adc	r29, r0
	#endif

	;final processing

	;clip
	clr r0
    8a46:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8a48:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8a4a:	d0 05       	cpc	r29, r0
	brlt .+2
    8a4c:	0c f0       	brlt	.+2      	; 0x8a50 <no_shift+0x1a>
	ldi r28,127
    8a4e:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8a50:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8a52:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8a54:	d0 05       	cpc	r29, r0
	brge .+2
    8a56:	0c f4       	brge	.+2      	; 0x8a5a <no_shift+0x24>
	ldi r28,-128
    8a58:	c0 e8       	ldi	r28, 0x80	; 128


	subi r28,128	;convert to unsigned
    8a5a:	c0 58       	subi	r28, 0x80	; 128
	st X+,r28
    8a5c:	cd 93       	st	X+, r28


	dec r25
    8a5e:	9a 95       	dec	r25
	breq .+2
    8a60:	09 f0       	breq	.+2      	; 0x8a64 <no_shift+0x2e>
	rjmp mix_loop
    8a62:	bf cf       	rjmp	.-130    	; 0x89e2 <mix_loop>

	lds r20,mix_block
    8a64:	40 91 f0 0d 	lds	r20, 0x0DF0
	dec r20
    8a68:	4a 95       	dec	r20
	sts mix_block,r20
    8a6a:	40 93 f0 0d 	sts	0x0DF0, r20
	ldi r25,(MIX_BANK_SIZE-0xff)
    8a6e:	97 e0       	ldi	r25, 0x07	; 7
	breq .+2
    8a70:	09 f0       	breq	.+2      	; 0x8a74 <no_shift+0x3e>
	rjmp mix_loop
    8a72:	b7 cf       	rjmp	.-146    	; 0x89e2 <mix_loop>


	//save current positions
	sts tr1_pos_frac,r6
    8a74:	60 92 f5 0d 	sts	0x0DF5, r6
	sts tr1_pos_lo,r4	
    8a78:	40 92 f6 0d 	sts	0x0DF6, r4

	sts tr2_pos_frac,r9
    8a7c:	90 92 fb 0d 	sts	0x0DFB, r9
	sts tr2_pos_lo,r10
    8a80:	a0 92 fc 0d 	sts	0x0DFC, r10

	sts tr3_pos_frac,r16
    8a84:	00 93 01 0e 	sts	0x0E01, r16
	sts tr3_pos_lo,r14
    8a88:	e0 92 02 0e 	sts	0x0E02, r14

#if MIXER_CHAN4_TYPE == 0
	sts tr4_barrel_lo,r22
    8a8c:	60 93 06 0e 	sts	0x0E06, r22
	sts tr4_barrel_hi,r23
    8a90:	70 93 07 0e 	sts	0x0E07, r23
	sts tr4_divider,r24
    8a94:	80 93 08 0e 	sts	0x0E08, r24
	sts tr4_pos_hi,r23
	sts tr4_pos_frac,r24

#endif

	pop r29
    8a98:	df 91       	pop	r29
	pop r28
    8a9a:	cf 91       	pop	r28
	pop r17
    8a9c:	1f 91       	pop	r17
	pop r16
    8a9e:	0f 91       	pop	r16
	pop r15
    8aa0:	ff 90       	pop	r15
	pop r14
    8aa2:	ef 90       	pop	r14
	pop r13
    8aa4:	df 90       	pop	r13
	pop r12
    8aa6:	cf 90       	pop	r12
	pop r11
    8aa8:	bf 90       	pop	r11
	pop r10
    8aaa:	af 90       	pop	r10
	pop r9
    8aac:	9f 90       	pop	r9
	pop r8
    8aae:	8f 90       	pop	r8
	pop r7
    8ab0:	7f 90       	pop	r7
	pop r6
    8ab2:	6f 90       	pop	r6
	pop r5
    8ab4:	5f 90       	pop	r5
	pop r4
    8ab6:	4f 90       	pop	r4
	pop r3
    8ab8:	3f 90       	pop	r3
	pop r2
    8aba:	2f 90       	pop	r2

#endif // ENABLE_MIXER==1

	ret
    8abc:	08 95       	ret

00008abe <update_sound_buffer_fast>:
; NO MIDI
; Destroys: Z,r16,r17
; Cycles: 24
;**********************************
update_sound_buffer_fast:
	lds ZL,mix_pos
    8abe:	e0 91 ed 0d 	lds	r30, 0x0DED
	lds ZH,mix_pos+1
    8ac2:	f0 91 ee 0d 	lds	r31, 0x0DEE
			
	ld r16,Z+		;load next sample
    8ac6:	01 91       	ld	r16, Z+
	;subi r16,128	;convert to unsigned
	nop
    8ac8:	00 00       	nop
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    8aca:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    8ace:	0d e0       	ldi	r16, 0x0D	; 13
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    8ad0:	ed 3e       	cpi	r30, 0xED	; 237
	cpc ZH,r16
    8ad2:	f0 07       	cpc	r31, r16
	;12

	ldi r16,lo8(mix_buf)
    8ad4:	01 ee       	ldi	r16, 0xE1	; 225
	ldi r17,hi8(mix_buf)
    8ad6:	1b e0       	ldi	r17, 0x0B	; 11
	brlo .+2
    8ad8:	08 f0       	brcs	.+2      	; 0x8adc <update_sound_buffer_fast+0x1e>
	movw ZL,r16
    8ada:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    8adc:	e0 93 ed 0d 	sts	0x0DED, r30
	sts mix_pos+1,ZH		
    8ae0:	f0 93 ee 0d 	sts	0x0DEE, r31

	ret ;20+4=24
    8ae4:	08 95       	ret

00008ae6 <update_sound>:
; Destroys: ZH
; Cycles: VSYNC = 68
;         HSYNC = 135
;***********************
update_sound:
	push r16
    8ae6:	0f 93       	push	r16
	push r17
    8ae8:	1f 93       	push	r17
	push r18
    8aea:	2f 93       	push	r18
	push ZL
    8aec:	ef 93       	push	r30

	lds ZL,mix_pos
    8aee:	e0 91 ed 0d 	lds	r30, 0x0DED
	lds ZH,mix_pos+1
    8af2:	f0 91 ee 0d 	lds	r31, 0x0DEE
			
	ld r16,Z+
    8af6:	01 91       	ld	r16, Z+
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    8af8:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    8afc:	0d e0       	ldi	r16, 0x0D	; 13
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    8afe:	ed 3e       	cpi	r30, 0xED	; 237
	cpc ZH,r16
    8b00:	f0 07       	cpc	r31, r16

	ldi r16,lo8(mix_buf)
    8b02:	01 ee       	ldi	r16, 0xE1	; 225
	ldi r17,hi8(mix_buf)
    8b04:	1b e0       	ldi	r17, 0x0B	; 11

	brlo .+2
    8b06:	08 f0       	brcs	.+2      	; 0x8b0a <update_sound+0x24>
	movw ZL,r16
    8b08:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    8b0a:	e0 93 ed 0d 	sts	0x0DED, r30
	sts mix_pos+1,ZH	
    8b0e:	f0 93 ee 0d 	sts	0x0DEE, r31
	rjmp .
	rjmp .
	rjmp .
#else
	//alignment cycles
	ldi ZL,8
    8b12:	e8 e0       	ldi	r30, 0x08	; 8
	dec ZL
    8b14:	ea 95       	dec	r30
	brne .-4
    8b16:	f1 f7       	brne	.-4      	; 0x8b14 <update_sound+0x2e>
#endif

	pop ZL
    8b18:	ef 91       	pop	r30
	pop r18
    8b1a:	2f 91       	pop	r18
	pop r17
    8b1c:	1f 91       	pop	r17
	pop r16
    8b1e:	0f 91       	pop	r16

	;*** Video sync update ***
	sbrc ZL,0								;pre-eq/post-eq sync
    8b20:	e0 fd       	sbrc	r30, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8b22:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,0								
    8b24:	e0 ff       	sbrs	r30, 0
	rjmp .+2
    8b26:	01 c0       	rjmp	.+2      	; 0x8b2a <update_sound+0x44>
	ret
    8b28:	08 95       	ret

	ldi ZH,20
    8b2a:	f4 e1       	ldi	r31, 0x14	; 20
	dec ZH
    8b2c:	fa 95       	dec	r31
	brne .-4
    8b2e:	f1 f7       	brne	.-4      	; 0x8b2c <update_sound+0x46>
	rjmp .
    8b30:	00 c0       	rjmp	.+0      	; 0x8b32 <update_sound+0x4c>

	;*** Video sync update ***
	sbrc ZL,1								;hsync
    8b32:	e1 fd       	sbrc	r30, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8b34:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,1								
    8b36:	e1 ff       	sbrs	r30, 1
	rjmp .
    8b38:	00 c0       	rjmp	.+0      	; 0x8b3a <update_sound+0x54>

	ret 
    8b3a:	08 95       	ret

00008b3c <SetMixerNote>:
; r24: Channel
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
SetMixerNote:
	clr r25
    8b3c:	99 27       	eor	r25, r25
	clr r23
    8b3e:	77 27       	eor	r23, r23

#if MIXER_CHAN4_TYPE == 0 
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
    8b40:	83 30       	cpi	r24, 0x03	; 3
		brlo set_note_waves
    8b42:	08 f0       	brcs	.+2      	; 0x8b46 <set_note_waves>
		ret		
    8b44:	08 95       	ret

00008b46 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8b46:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8b48:	f7 e9       	ldi	r31, 0x97	; 151
	lsl r22
    8b4a:	66 0f       	add	r22, r22
	rol r23
    8b4c:	77 1f       	adc	r23, r23
	add ZL,r22
    8b4e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8b50:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8b52:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8b54:	b4 91       	lpm	r27, Z+

	ldi ZL,lo8(mixerStruct)
    8b56:	e2 ef       	ldi	r30, 0xF2	; 242
	ldi ZH,hi8(mixerStruct)
    8b58:	fd e0       	ldi	r31, 0x0D	; 13
	ldi r18,CHANNEL_STRUCT_SIZE
    8b5a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8b5c:	28 9f       	mul	r18, r24
	add ZL,r0
    8b5e:	e0 0d       	add	r30, r0
	adc ZH,r1
    8b60:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8b62:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8b64:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8b66:	11 24       	eor	r1, r1
	

	ret
    8b68:	08 95       	ret

00008b6a <SetMixerNoiseParams>:
;(C-call compatible)
; r24: noise divider
;*****************
SetMixerNoiseParams:
	;preserve wave type (7/15 bit)
	lds r25,tr4_params
    8b6a:	90 91 05 0e 	lds	r25, 0x0E05
	andi r25,1
    8b6e:	91 70       	andi	r25, 0x01	; 1
	lsl r24
    8b70:	88 0f       	add	r24, r24
	or r24,r25
    8b72:	89 2b       	or	r24, r25

	sts tr4_params,r24	
    8b74:	80 93 05 0e 	sts	0x0E05, r24
	ret
    8b78:	08 95       	ret

00008b7a <SetMixerWave>:
; r23:r22 Waves channels: patch (0x00-0xfd) 
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
SetMixerWave:
	clr r25
    8b7a:	99 27       	eor	r25, r25
	clr r23
    8b7c:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8b7e:	e2 ef       	ldi	r30, 0xF2	; 242
	ldi ZH,hi8(mixerStruct)
    8b80:	fd e0       	ldi	r31, 0x0D	; 13
	ldi r18,CHANNEL_STRUCT_SIZE
    8b82:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8b84:	28 9f       	mul	r18, r24
	add ZL,r0
    8b86:	e0 0d       	add	r30, r0
	adc ZH,r1
    8b88:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8b8a:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8b8c:	31 f4       	brne	.+12     	; 0x8b9a <smw1>
	lds r22,tr4_params
    8b8e:	60 91 05 0e 	lds	r22, 0x0E05
	andi r22,0xfe;
    8b92:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8b94:	60 93 05 0e 	sts	0x0E05, r22
	rjmp esmw	
    8b98:	0b c0       	rjmp	.+22     	; 0x8bb0 <esmw>

00008b9a <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8b9a:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8b9c:	31 f4       	brne	.+12     	; 0x8baa <smw2>
	lds r22,tr4_params
    8b9e:	60 91 05 0e 	lds	r22, 0x0E05
	ori r22,0xfe;
    8ba2:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8ba4:	60 93 05 0e 	sts	0x0E05, r22
	rjmp esmw
    8ba8:	03 c0       	rjmp	.+6      	; 0x8bb0 <esmw>

00008baa <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8baa:	79 e9       	ldi	r23, 0x99	; 153
	add r23,r22
    8bac:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8bae:	75 83       	std	Z+5, r23	; 0x05

00008bb0 <esmw>:

esmw:
	clr r1	
    8bb0:	11 24       	eor	r1, r1
	ret
    8bb2:	08 95       	ret

00008bb4 <SetMixerVolume>:
; (C-call compatible)
; r24 channel (0,1,2,3)
; r22 volume (0x00-0xff)
;***********************
SetMixerVolume:
	clr r25
    8bb4:	99 27       	eor	r25, r25
	clr r23
    8bb6:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8bb8:	e2 ef       	ldi	r30, 0xF2	; 242
	ldi ZH,hi8(mixerStruct)
    8bba:	fd e0       	ldi	r31, 0x0D	; 13
	ldi r18,CHANNEL_STRUCT_SIZE
    8bbc:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8bbe:	28 9f       	mul	r18, r24
	add ZL,r0
    8bc0:	e0 0d       	add	r30, r0
	adc ZH,r1
    8bc2:	f1 1d       	adc	r31, r1
	std Z+vol,r22 ;store vol
    8bc4:	60 83       	st	Z, r22

	clr r1	
    8bc6:	11 24       	eor	r1, r1
	ret
    8bc8:	08 95       	ret

00008bca <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    8bca:	80 93 8d 0b 	sts	0x0B8D, r24
	sts sprites_tile_banks+1,r25
    8bce:	90 93 8e 0b 	sts	0x0B8E, r25
	ret
    8bd2:	08 95       	ret

00008bd4 <SetTile>:
; r20=Tile No (8 bit)
;************************************
.section .text.SetTile
SetTile:

	clr r25
    8bd4:	99 27       	eor	r25, r25
	clr r23	
    8bd6:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8bd8:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8bda:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    8bdc:	08 0e       	add	r0, r24
	adc r1,r25
    8bde:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    8be0:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8be2:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    8be4:	a0 0d       	add	r26, r0
	adc XH,r1
    8be6:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    8be8:	45 5e       	subi	r20, 0xE5	; 229

	st X,r20
    8bea:	4c 93       	st	X, r20

	clr r1
    8bec:	11 24       	eor	r1, r1

	ret
    8bee:	08 95       	ret

00008bf0 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8bf0:	80 93 b3 0b 	sts	0x0BB3, r24
	sts tile_table_hi,r25	
    8bf4:	90 93 b4 0b 	sts	0x0BB4, r25
	ret
    8bf8:	08 95       	ret

00008bfa <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,vsync_flag
    8bfa:	80 91 b8 0b 	lds	r24, 0x0BB8
	ret
    8bfe:	08 95       	ret

00008c00 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	clr r1
    8c00:	11 24       	eor	r1, r1
	sts vsync_flag,r1
    8c02:	10 92 b8 0b 	sts	0x0BB8, r1
	ret
    8c06:	08 95       	ret

00008c08 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8c08:	88 23       	and	r24, r24
	brne rj_p2
    8c0a:	29 f4       	brne	.+10     	; 0x8c16 <rj_p2>
		
	lds r24,joypad1_status_lo
    8c0c:	80 91 c1 0b 	lds	r24, 0x0BC1
	lds r25,joypad1_status_lo+1
    8c10:	90 91 c2 0b 	lds	r25, 0x0BC2
	ret
    8c14:	08 95       	ret

00008c16 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8c16:	80 91 c5 0b 	lds	r24, 0x0BC5
	lds r25,joypad2_status_lo+1	
    8c1a:	90 91 c6 0b 	lds	r25, 0x0BC6

	ret
    8c1e:	08 95       	ret

00008c20 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8c20:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    8c22:	fe cf       	rjmp	.-4      	; 0x8c20 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8c24:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8c26:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8c28:	60 bd       	out	0x20, r22	; 32
   cli
    8c2a:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8c2c:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8c2e:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8c30:	78 94       	sei
   ret
    8c32:	08 95       	ret

00008c34 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8c34:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8c36:	fe cf       	rjmp	.-4      	; 0x8c34 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8c38:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8c3a:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8c3c:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8c3e:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8c40:	80 b5       	in	r24, 0x20	; 32
   sei
    8c42:	78 94       	sei
   ret
    8c44:	08 95       	ret

00008c46 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8c46:	12 9a       	sbi	0x02, 2	; 2
			WaitUs(1);
		}else{
			Wait200ns();
		}	
	#else
		Wait200ns();
    8c48:	c8 95       	lpm
    8c4a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8c4c:	12 98       	cbi	0x02, 2	; 2
    8c4e:	20 e0       	ldi	r18, 0x00	; 0
    8c50:	30 e0       	ldi	r19, 0x00	; 0
    8c52:	80 e0       	ldi	r24, 0x00	; 0
    8c54:	90 e0       	ldi	r25, 0x00	; 0
    8c56:	40 e0       	ldi	r20, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8c58:	36 95       	lsr	r19
    8c5a:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8c5c:	96 95       	lsr	r25
    8c5e:	87 95       	ror	r24
	
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8c60:	13 98       	cbi	0x02, 3	; 2
				WaitUs(5);
			}else{
				Wait200ns();
			}	
		#else
			Wait200ns();
    8c62:	c8 95       	lpm
    8c64:	c8 95       	lpm
		#endif
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    8c66:	00 9b       	sbis	0x00, 0	; 0
    8c68:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8c6a:	01 9b       	sbis	0x00, 1	; 0
    8c6c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8c6e:	13 9a       	sbi	0x02, 3	; 2
				WaitUs(5);
			}else{
				Wait200ns();
			}	
		#else
			Wait200ns();
    8c70:	c8 95       	lpm
    8c72:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8c74:	4f 5f       	subi	r20, 0xFF	; 255
    8c76:	40 31       	cpi	r20, 0x10	; 16
    8c78:	79 f7       	brne	.-34     	; 0x8c58 <ReadButtons+0x12>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8c7a:	30 93 c2 0b 	sts	0x0BC2, r19
    8c7e:	20 93 c1 0b 	sts	0x0BC1, r18
		joypad2_status_lo=p2ButtonsLo;
    8c82:	90 93 c6 0b 	sts	0x0BC6, r25
    8c86:	80 93 c5 0b 	sts	0x0BC5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8c8a:	80 91 c1 0b 	lds	r24, 0x0BC1
    8c8e:	90 91 c2 0b 	lds	r25, 0x0BC2
    8c92:	0f 97       	sbiw	r24, 0x0f	; 15
    8c94:	31 f0       	breq	.+12     	; 0x8ca2 <ReadButtons+0x5c>
    8c96:	80 91 c5 0b 	lds	r24, 0x0BC5
    8c9a:	90 91 c6 0b 	lds	r25, 0x0BC6
    8c9e:	0f 97       	sbiw	r24, 0x0f	; 15
    8ca0:	61 f4       	brne	.+24     	; 0x8cba <ReadButtons+0x74>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8ca2:	28 e0       	ldi	r18, 0x08	; 8
    8ca4:	88 e1       	ldi	r24, 0x18	; 24
    8ca6:	90 e0       	ldi	r25, 0x00	; 0
    8ca8:	0f b6       	in	r0, 0x3f	; 63
    8caa:	f8 94       	cli
    8cac:	a8 95       	wdr
    8cae:	80 93 60 00 	sts	0x0060, r24
    8cb2:	0f be       	out	0x3f, r0	; 63
    8cb4:	20 93 60 00 	sts	0x0060, r18
    8cb8:	ff cf       	rjmp	.-2      	; 0x8cb8 <ReadButtons+0x72>
    8cba:	08 95       	ret

00008cbc <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    8cbc:	10 92 0f 0e 	sts	0x0E0F, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8cc0:	00 99       	sbic	0x00, 0	; 0
    8cc2:	03 c0       	rjmp	.+6      	; 0x8cca <ReadControllers+0xe>
    8cc4:	81 e0       	ldi	r24, 0x01	; 1
    8cc6:	80 93 0f 0e 	sts	0x0E0F, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8cca:	01 99       	sbic	0x00, 1	; 0
    8ccc:	05 c0       	rjmp	.+10     	; 0x8cd8 <ReadControllers+0x1c>
    8cce:	80 91 0f 0e 	lds	r24, 0x0E0F
    8cd2:	82 60       	ori	r24, 0x02	; 2
    8cd4:	80 93 0f 0e 	sts	0x0E0F, r24
			
	//read the standard buttons
	ReadButtons();
    8cd8:	0e 94 23 46 	call	0x8c46	; 0x8c46 <ReadButtons>
}
    8cdc:	08 95       	ret

00008cde <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8cde:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8ce0:	80 e0       	ldi	r24, 0x00	; 0
    8ce2:	90 e0       	ldi	r25, 0x00	; 0
    8ce4:	0e 94 1a 46 	call	0x8c34	; 0x8c34 <ReadEeprom>
    8ce8:	18 2f       	mov	r17, r24
    8cea:	81 e0       	ldi	r24, 0x01	; 1
    8cec:	90 e0       	ldi	r25, 0x00	; 0
    8cee:	0e 94 1a 46 	call	0x8c34	; 0x8c34 <ReadEeprom>
    8cf2:	90 e0       	ldi	r25, 0x00	; 0
    8cf4:	38 2f       	mov	r19, r24
    8cf6:	20 e0       	ldi	r18, 0x00	; 0
    8cf8:	21 0f       	add	r18, r17
    8cfa:	31 1d       	adc	r19, r1
    8cfc:	2a 55       	subi	r18, 0x5A	; 90
    8cfe:	35 45       	sbci	r19, 0x55	; 85
    8d00:	09 f4       	brne	.+2      	; 0x8d04 <isEepromFormatted+0x26>
    8d02:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    8d04:	89 2f       	mov	r24, r25
    8d06:	1f 91       	pop	r17
    8d08:	08 95       	ret

00008d0a <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    8d0a:	bf 92       	push	r11
    8d0c:	cf 92       	push	r12
    8d0e:	df 92       	push	r13
    8d10:	ef 92       	push	r14
    8d12:	ff 92       	push	r15
    8d14:	0f 93       	push	r16
    8d16:	1f 93       	push	r17
    8d18:	cf 93       	push	r28
    8d1a:	df 93       	push	r29
    8d1c:	6c 01       	movw	r12, r24
    8d1e:	06 2f       	mov	r16, r22
    8d20:	b7 2e       	mov	r11, r23
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8d22:	0e 94 6f 46 	call	0x8cde	; 0x8cde <isEepromFormatted>
    8d26:	88 23       	and	r24, r24
    8d28:	09 f4       	brne	.+2      	; 0x8d2c <EepromReadBlock+0x22>
    8d2a:	40 c0       	rjmp	.+128    	; 0x8dac <EepromReadBlock+0xa2>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8d2c:	8f ef       	ldi	r24, 0xFF	; 255
    8d2e:	c8 16       	cp	r12, r24
    8d30:	8f ef       	ldi	r24, 0xFF	; 255
    8d32:	d8 06       	cpc	r13, r24
    8d34:	11 f4       	brne	.+4      	; 0x8d3a <EepromReadBlock+0x30>
    8d36:	81 e0       	ldi	r24, 0x01	; 1
    8d38:	3c c0       	rjmp	.+120    	; 0x8db2 <EepromReadBlock+0xa8>
    8d3a:	ee 24       	eor	r14, r14
    8d3c:	ff 24       	eor	r15, r15

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8d3e:	c7 01       	movw	r24, r14
    8d40:	0e 94 1a 46 	call	0x8c34	; 0x8c34 <ReadEeprom>
    8d44:	18 2f       	mov	r17, r24
    8d46:	c7 01       	movw	r24, r14
    8d48:	01 96       	adiw	r24, 0x01	; 1
    8d4a:	0e 94 1a 46 	call	0x8c34	; 0x8c34 <ReadEeprom>
		if(id==blockId){
    8d4e:	d8 2f       	mov	r29, r24
    8d50:	c0 e0       	ldi	r28, 0x00	; 0
    8d52:	ce 01       	movw	r24, r28
    8d54:	81 0f       	add	r24, r17
    8d56:	91 1d       	adc	r25, r1
    8d58:	8c 15       	cp	r24, r12
    8d5a:	9d 05       	cpc	r25, r13
    8d5c:	31 f4       	brne	.+12     	; 0x8d6a <EepromReadBlock+0x60>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    8d5e:	9f ef       	ldi	r25, 0xFF	; 255
    8d60:	e9 16       	cp	r14, r25
    8d62:	9f ef       	ldi	r25, 0xFF	; 255
    8d64:	f9 06       	cpc	r15, r25
    8d66:	59 f4       	brne	.+22     	; 0x8d7e <EepromReadBlock+0x74>
    8d68:	23 c0       	rjmp	.+70     	; 0x8db0 <EepromReadBlock+0xa6>
    8d6a:	80 e2       	ldi	r24, 0x20	; 32
    8d6c:	90 e0       	ldi	r25, 0x00	; 0
    8d6e:	e8 0e       	add	r14, r24
    8d70:	f9 1e       	adc	r15, r25

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    8d72:	90 e0       	ldi	r25, 0x00	; 0
    8d74:	e9 16       	cp	r14, r25
    8d76:	94 e0       	ldi	r25, 0x04	; 4
    8d78:	f9 06       	cpc	r15, r25
    8d7a:	09 f7       	brne	.-62     	; 0x8d3e <EepromReadBlock+0x34>
    8d7c:	19 c0       	rjmp	.+50     	; 0x8db0 <EepromReadBlock+0xa6>
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;
    8d7e:	80 2f       	mov	r24, r16
    8d80:	9b 2d       	mov	r25, r11
    8d82:	9c 01       	movw	r18, r24
    8d84:	e9 01       	movw	r28, r18
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8d86:	70 e2       	ldi	r23, 0x20	; 32
    8d88:	c7 2e       	mov	r12, r23
    8d8a:	d1 2c       	mov	r13, r1
    8d8c:	c2 0e       	add	r12, r18
    8d8e:	d3 1e       	adc	r13, r19
		*destPtr=ReadEeprom(destAddr++);
    8d90:	87 01       	movw	r16, r14
    8d92:	0f 5f       	subi	r16, 0xFF	; 255
    8d94:	1f 4f       	sbci	r17, 0xFF	; 255
    8d96:	c7 01       	movw	r24, r14
    8d98:	0e 94 1a 46 	call	0x8c34	; 0x8c34 <ReadEeprom>
    8d9c:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8d9e:	cc 15       	cp	r28, r12
    8da0:	dd 05       	cpc	r29, r13
    8da2:	11 f4       	brne	.+4      	; 0x8da8 <EepromReadBlock+0x9e>
    8da4:	80 e0       	ldi	r24, 0x00	; 0
    8da6:	05 c0       	rjmp	.+10     	; 0x8db2 <EepromReadBlock+0xa8>
    8da8:	78 01       	movw	r14, r16
    8daa:	f2 cf       	rjmp	.-28     	; 0x8d90 <EepromReadBlock+0x86>
    8dac:	84 e0       	ldi	r24, 0x04	; 4
    8dae:	01 c0       	rjmp	.+2      	; 0x8db2 <EepromReadBlock+0xa8>
    8db0:	83 e0       	ldi	r24, 0x03	; 3
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    8db2:	df 91       	pop	r29
    8db4:	cf 91       	pop	r28
    8db6:	1f 91       	pop	r17
    8db8:	0f 91       	pop	r16
    8dba:	ff 90       	pop	r15
    8dbc:	ef 90       	pop	r14
    8dbe:	df 90       	pop	r13
    8dc0:	cf 90       	pop	r12
    8dc2:	bf 90       	pop	r11
    8dc4:	08 95       	ret

00008dc6 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8dc6:	bf 92       	push	r11
    8dc8:	cf 92       	push	r12
    8dca:	df 92       	push	r13
    8dcc:	ef 92       	push	r14
    8dce:	ff 92       	push	r15
    8dd0:	0f 93       	push	r16
    8dd2:	1f 93       	push	r17
    8dd4:	cf 93       	push	r28
    8dd6:	df 93       	push	r29
    8dd8:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8dda:	0e 94 6f 46 	call	0x8cde	; 0x8cde <isEepromFormatted>
    8dde:	88 23       	and	r24, r24
    8de0:	11 f4       	brne	.+4      	; 0x8de6 <EepromWriteBlock+0x20>
    8de2:	84 e0       	ldi	r24, 0x04	; 4
    8de4:	4e c0       	rjmp	.+156    	; 0x8e82 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    8de6:	f6 01       	movw	r30, r12
    8de8:	80 81       	ld	r24, Z
    8dea:	91 81       	ldd	r25, Z+1	; 0x01
    8dec:	ff ef       	ldi	r31, 0xFF	; 255
    8dee:	8f 3f       	cpi	r24, 0xFF	; 255
    8df0:	9f 07       	cpc	r25, r31
    8df2:	09 f4       	brne	.+2      	; 0x8df6 <EepromWriteBlock+0x30>
    8df4:	45 c0       	rjmp	.+138    	; 0x8e80 <EepromWriteBlock+0xba>
    8df6:	8a 55       	subi	r24, 0x5A	; 90
    8df8:	95 45       	sbci	r25, 0x55	; 85
    8dfa:	09 f4       	brne	.+2      	; 0x8dfe <EepromWriteBlock+0x38>
    8dfc:	41 c0       	rjmp	.+130    	; 0x8e80 <EepromWriteBlock+0xba>
    8dfe:	01 e0       	ldi	r16, 0x01	; 1
    8e00:	10 e0       	ldi	r17, 0x00	; 0
    8e02:	f0 e2       	ldi	r31, 0x20	; 32
    8e04:	ef 2e       	mov	r14, r31
    8e06:	f1 2c       	mov	r15, r1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8e08:	c7 01       	movw	r24, r14
    8e0a:	0e 94 1a 46 	call	0x8c34	; 0x8c34 <ReadEeprom>
    8e0e:	b8 2e       	mov	r11, r24
    8e10:	c7 01       	movw	r24, r14
    8e12:	01 96       	adiw	r24, 0x01	; 1
    8e14:	0e 94 1a 46 	call	0x8c34	; 0x8c34 <ReadEeprom>
    8e18:	d8 2f       	mov	r29, r24
    8e1a:	c0 e0       	ldi	r28, 0x00	; 0
    8e1c:	9e 01       	movw	r18, r28
    8e1e:	2b 0d       	add	r18, r11
    8e20:	31 1d       	adc	r19, r1
		if(id==block->id){
    8e22:	f6 01       	movw	r30, r12
    8e24:	80 81       	ld	r24, Z
    8e26:	91 81       	ldd	r25, Z+1	; 0x01
    8e28:	28 17       	cp	r18, r24
    8e2a:	39 07       	cpc	r19, r25
    8e2c:	19 f4       	brne	.+6      	; 0x8e34 <EepromWriteBlock+0x6e>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8e2e:	11 23       	and	r17, r17
    8e30:	b1 f0       	breq	.+44     	; 0x8e5e <EepromWriteBlock+0x98>
    8e32:	0e c0       	rjmp	.+28     	; 0x8e50 <EepromWriteBlock+0x8a>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    8e34:	2f 5f       	subi	r18, 0xFF	; 255
    8e36:	3f 4f       	sbci	r19, 0xFF	; 255
    8e38:	19 f4       	brne	.+6      	; 0x8e40 <EepromWriteBlock+0x7a>
    8e3a:	11 23       	and	r17, r17
    8e3c:	09 f4       	brne	.+2      	; 0x8e40 <EepromWriteBlock+0x7a>
    8e3e:	10 2f       	mov	r17, r16

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    8e40:	0f 5f       	subi	r16, 0xFF	; 255
    8e42:	80 e2       	ldi	r24, 0x20	; 32
    8e44:	90 e0       	ldi	r25, 0x00	; 0
    8e46:	e8 0e       	add	r14, r24
    8e48:	f9 1e       	adc	r15, r25
    8e4a:	00 34       	cpi	r16, 0x40	; 64
    8e4c:	e9 f6       	brne	.-70     	; 0x8e08 <EepromWriteBlock+0x42>
    8e4e:	23 c0       	rjmp	.+70     	; 0x8e96 <EepromWriteBlock+0xd0>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8e50:	e1 2e       	mov	r14, r17
    8e52:	ff 24       	eor	r15, r15
    8e54:	e5 e0       	ldi	r30, 0x05	; 5
    8e56:	ee 0c       	add	r14, r14
    8e58:	ff 1c       	adc	r15, r15
    8e5a:	ea 95       	dec	r30
    8e5c:	e1 f7       	brne	.-8      	; 0x8e56 <EepromWriteBlock+0x90>
    8e5e:	c0 e0       	ldi	r28, 0x00	; 0
    8e60:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    8e62:	f6 01       	movw	r30, r12
    8e64:	ec 0f       	add	r30, r28
    8e66:	fd 1f       	adc	r31, r29
    8e68:	ce 01       	movw	r24, r28
    8e6a:	8e 0d       	add	r24, r14
    8e6c:	9f 1d       	adc	r25, r15
    8e6e:	60 81       	ld	r22, Z
    8e70:	0e 94 10 46 	call	0x8c20	; 0x8c20 <WriteEeprom>
    8e74:	21 96       	adiw	r28, 0x01	; 1
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8e76:	c0 32       	cpi	r28, 0x20	; 32
    8e78:	d1 05       	cpc	r29, r1
    8e7a:	99 f7       	brne	.-26     	; 0x8e62 <EepromWriteBlock+0x9c>
    8e7c:	80 e0       	ldi	r24, 0x00	; 0
    8e7e:	01 c0       	rjmp	.+2      	; 0x8e82 <EepromWriteBlock+0xbc>
    8e80:	81 e0       	ldi	r24, 0x01	; 1
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    8e82:	df 91       	pop	r29
    8e84:	cf 91       	pop	r28
    8e86:	1f 91       	pop	r17
    8e88:	0f 91       	pop	r16
    8e8a:	ff 90       	pop	r15
    8e8c:	ef 90       	pop	r14
    8e8e:	df 90       	pop	r13
    8e90:	cf 90       	pop	r12
    8e92:	bf 90       	pop	r11
    8e94:	08 95       	ret
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8e96:	11 23       	and	r17, r17
    8e98:	d9 f6       	brne	.-74     	; 0x8e50 <EepromWriteBlock+0x8a>
    8e9a:	82 e0       	ldi	r24, 0x02	; 2
    8e9c:	f2 cf       	rjmp	.-28     	; 0x8e82 <EepromWriteBlock+0xbc>

00008e9e <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8e9e:	cf 93       	push	r28
    8ea0:	df 93       	push	r29
    8ea2:	c0 e0       	ldi	r28, 0x00	; 0
    8ea4:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    8ea6:	fe 01       	movw	r30, r28
    8ea8:	e0 59       	subi	r30, 0x90	; 144
    8eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    8eac:	e4 91       	lpm	r30, Z+
    8eae:	ce 01       	movw	r24, r28
    8eb0:	6e 2f       	mov	r22, r30
    8eb2:	0e 94 10 46 	call	0x8c20	; 0x8c20 <WriteEeprom>
    8eb6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    8eb8:	c0 32       	cpi	r28, 0x20	; 32
    8eba:	d1 05       	cpc	r29, r1
    8ebc:	a1 f7       	brne	.-24     	; 0x8ea6 <FormatEeprom+0x8>
    8ebe:	c0 e2       	ldi	r28, 0x20	; 32
    8ec0:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8ec2:	ce 01       	movw	r24, r28
    8ec4:	6f ef       	ldi	r22, 0xFF	; 255
    8ec6:	0e 94 10 46 	call	0x8c20	; 0x8c20 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    8eca:	ce 01       	movw	r24, r28
    8ecc:	01 96       	adiw	r24, 0x01	; 1
    8ece:	6f ef       	ldi	r22, 0xFF	; 255
    8ed0:	0e 94 10 46 	call	0x8c20	; 0x8c20 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8ed4:	a0 96       	adiw	r28, 0x20	; 32
    8ed6:	88 e0       	ldi	r24, 0x08	; 8
    8ed8:	c0 30       	cpi	r28, 0x00	; 0
    8eda:	d8 07       	cpc	r29, r24
    8edc:	91 f7       	brne	.-28     	; 0x8ec2 <FormatEeprom+0x24>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8ede:	df 91       	pop	r29
    8ee0:	cf 91       	pop	r28
    8ee2:	08 95       	ret

00008ee4 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    8ee4:	fc 01       	movw	r30, r24
    8ee6:	45 87       	std	Z+13, r20	; 0x0d
}
    8ee8:	08 95       	ret

00008eea <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8eea:	81 e0       	ldi	r24, 0x01	; 1
    8eec:	91 e0       	ldi	r25, 0x01	; 1
    8eee:	90 93 07 0e 	sts	0x0E07, r25
    8ef2:	80 93 06 0e 	sts	0x0E06, r24
		mixer.channels.type.noise.params=param;
    8ef6:	40 93 05 0e 	sts	0x0E05, r20
	#endif
}
    8efa:	08 95       	ret

00008efc <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    8efc:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0
    8efe:	80 81       	ld	r24, Z
    8f00:	8f 75       	andi	r24, 0x5F	; 95
    8f02:	80 83       	st	Z, r24
}
    8f04:	08 95       	ret

00008f06 <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    8f06:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8f08:	80 81       	ld	r24, Z
    8f0a:	80 64       	ori	r24, 0x40	; 64
    8f0c:	80 83       	st	Z, r24
}
    8f0e:	08 95       	ret

00008f10 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    8f10:	fc 01       	movw	r30, r24
    8f12:	44 87       	std	Z+12, r20	; 0x0c
}
    8f14:	08 95       	ret

00008f16 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    8f16:	fc 01       	movw	r30, r24
    8f18:	47 83       	std	Z+7, r20	; 0x07
}
    8f1a:	08 95       	ret

00008f1c <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    8f1c:	fc 01       	movw	r30, r24
    8f1e:	40 87       	std	Z+8, r20	; 0x08
}
    8f20:	08 95       	ret

00008f22 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    8f22:	1f 93       	push	r17
    8f24:	cf 93       	push	r28
    8f26:	df 93       	push	r29
    8f28:	ec 01       	movw	r28, r24
    8f2a:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;

	currentStep=pgm_read_word(&(steptable[track->note]));
    8f2c:	89 81       	ldd	r24, Y+1	; 0x01
    8f2e:	90 e0       	ldi	r25, 0x00	; 0
    8f30:	fc 01       	movw	r30, r24
    8f32:	ee 0f       	add	r30, r30
    8f34:	ff 1f       	adc	r31, r31
    8f36:	e8 5f       	subi	r30, 0xF8	; 248
    8f38:	f8 46       	sbci	r31, 0x68	; 104
    8f3a:	25 91       	lpm	r18, Z+
    8f3c:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));
    8f3e:	e4 2f       	mov	r30, r20
    8f40:	ff 27       	eor	r31, r31
    8f42:	e7 fd       	sbrc	r30, 7
    8f44:	f0 95       	com	r31
    8f46:	e8 0f       	add	r30, r24
    8f48:	f9 1f       	adc	r31, r25
    8f4a:	ee 0f       	add	r30, r30
    8f4c:	ff 1f       	adc	r31, r31
    8f4e:	e8 5f       	subi	r30, 0xF8	; 248
    8f50:	f8 46       	sbci	r31, 0x68	; 104
    8f52:	85 91       	lpm	r24, Z+
    8f54:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    8f56:	60 91 17 0e 	lds	r22, 0x0E17
    8f5a:	82 1b       	sub	r24, r18
    8f5c:	93 0b       	sbc	r25, r19
    8f5e:	70 e0       	ldi	r23, 0x00	; 0
    8f60:	0e 94 6f 6e 	call	0xdcde	; 0xdcde <__divmodhi4>
    8f64:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    8f66:	61 15       	cp	r22, r1
    8f68:	71 05       	cpc	r23, r1
    8f6a:	11 f4       	brne	.+4      	; 0x8f70 <PatchCommand11+0x4e>
    8f6c:	21 e0       	ldi	r18, 0x01	; 1
    8f6e:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    8f70:	81 2f       	mov	r24, r17
    8f72:	90 e0       	ldi	r25, 0x00	; 0
    8f74:	fc 01       	movw	r30, r24
    8f76:	ee 0f       	add	r30, r30
    8f78:	ff 1f       	adc	r31, r31
    8f7a:	e8 0f       	add	r30, r24
    8f7c:	f9 1f       	adc	r31, r25
    8f7e:	ee 0f       	add	r30, r30
    8f80:	ff 1f       	adc	r31, r31
    8f82:	ee 50       	subi	r30, 0x0E	; 14
    8f84:	f2 4f       	sbci	r31, 0xF2	; 242
    8f86:	81 81       	ldd	r24, Z+1	; 0x01
    8f88:	92 81       	ldd	r25, Z+2	; 0x02
    8f8a:	82 0f       	add	r24, r18
    8f8c:	93 1f       	adc	r25, r19
    8f8e:	92 83       	std	Z+2, r25	; 0x02
    8f90:	81 83       	std	Z+1, r24	; 0x01

	track->slideStep=delta;
    8f92:	3b 83       	std	Y+3, r19	; 0x03
    8f94:	2a 83       	std	Y+2, r18	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    8f96:	88 81       	ld	r24, Y
    8f98:	88 60       	ori	r24, 0x08	; 8
    8f9a:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8f9c:	89 81       	ldd	r24, Y+1	; 0x01
    8f9e:	84 0f       	add	r24, r20
    8fa0:	8c 83       	std	Y+4, r24	; 0x04
}
    8fa2:	df 91       	pop	r29
    8fa4:	cf 91       	pop	r28
    8fa6:	1f 91       	pop	r17
    8fa8:	08 95       	ret

00008faa <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    8faa:	40 93 17 0e 	sts	0x0E17, r20
}
    8fae:	08 95       	ret

00008fb0 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    8fb0:	90 93 6d 0e 	sts	0x0E6D, r25
    8fb4:	80 93 6c 0e 	sts	0x0E6C, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8fb8:	8f e6       	ldi	r24, 0x6F	; 111
    8fba:	80 93 71 0e 	sts	0x0E71, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8fbe:	10 92 e0 0b 	sts	0x0BE0, r1
    8fc2:	e2 e1       	ldi	r30, 0x12	; 18
    8fc4:	fe e0       	ldi	r31, 0x0E	; 14

	//initialize default channels patches
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8fc6:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8fc8:	8f ef       	ldi	r24, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8fca:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8fcc:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    8fce:	13 86       	std	Z+11, r1	; 0x0b
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8fd0:	81 87       	std	Z+9, r24	; 0x09
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8fd2:	82 87       	std	Z+10, r24	; 0x0a
		tracks[t].patchNo=DEFAULT_PATCH;
    8fd4:	16 86       	std	Z+14, r1	; 0x0e
		tracks[t].tremoloRate=24; //~6hz
    8fd6:	20 87       	std	Z+8, r18	; 0x08
		tracks[t].slideSpeed=0x10;
    8fd8:	95 83       	std	Z+5, r25	; 0x05
    8fda:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches
	for(unsigned char t=0;t<CHANNELS;t++){
    8fdc:	3e e0       	ldi	r19, 0x0E	; 14
    8fde:	ea 36       	cpi	r30, 0x6A	; 106
    8fe0:	f3 07       	cpc	r31, r19
    8fe2:	a1 f7       	brne	.-24     	; 0x8fcc <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8fe4:	08 95       	ret

00008fe6 <StartSong>:

void StartSong(const char *midiSong){
    8fe6:	9c 01       	movw	r18, r24
    8fe8:	e2 e1       	ldi	r30, 0x12	; 18
    8fea:	fe e0       	ldi	r31, 0x0E	; 14
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8fec:	80 81       	ld	r24, Z
    8fee:	8f 77       	andi	r24, 0x7F	; 127
    8ff0:	80 83       	st	Z, r24
    8ff2:	76 96       	adiw	r30, 0x16	; 22
	}

}

void StartSong(const char *midiSong){
	for(unsigned char t=0;t<CHANNELS;t++){
    8ff4:	8e e0       	ldi	r24, 0x0E	; 14
    8ff6:	ea 36       	cpi	r30, 0x6A	; 106
    8ff8:	f8 07       	cpc	r31, r24
    8ffa:	c1 f7       	brne	.-16     	; 0x8fec <StartSong+0x6>
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
	}

	songPos=midiSong+1; //skip first delta-time
    8ffc:	c9 01       	movw	r24, r18
    8ffe:	01 96       	adiw	r24, 0x01	; 1
    9000:	90 93 75 0e 	sts	0x0E75, r25
    9004:	80 93 74 0e 	sts	0x0E74, r24
	songStart=midiSong+1;//skip first delta-time
    9008:	90 93 11 0e 	sts	0x0E11, r25
    900c:	80 93 10 0e 	sts	0x0E10, r24
	loopStart=midiSong+1;
    9010:	90 93 77 0e 	sts	0x0E77, r25
    9014:	80 93 76 0e 	sts	0x0E76, r24
	nextDeltaTime=0;
    9018:	10 92 73 0e 	sts	0x0E73, r1
    901c:	10 92 72 0e 	sts	0x0E72, r1
	currDeltaTime=0;
    9020:	10 92 6b 0e 	sts	0x0E6B, r1
    9024:	10 92 6a 0e 	sts	0x0E6A, r1
	lastStatus=0;
    9028:	10 92 6e 0e 	sts	0x0E6E, r1
	playSong=true;
    902c:	81 e0       	ldi	r24, 0x01	; 1
    902e:	80 93 e0 0b 	sts	0x0BE0, r24
	absoluteTime=0;
    9032:	10 92 70 0e 	sts	0x0E70, r1
    9036:	10 92 6f 0e 	sts	0x0E6F, r1


}
    903a:	08 95       	ret

0000903c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    903c:	8a ef       	ldi	r24, 0xFA	; 250
    903e:	80 93 1f 0e 	sts	0x0E1F, r24
    9042:	80 93 35 0e 	sts	0x0E35, r24
    9046:	80 93 4b 0e 	sts	0x0E4B, r24
    904a:	80 93 61 0e 	sts	0x0E61, r24
	}

	playSong=false;
    904e:	10 92 e0 0b 	sts	0x0BE0, r1
}
    9052:	08 95       	ret

00009054 <ResumeSong>:


void ResumeSong(){
	playSong=true;
    9054:	81 e0       	ldi	r24, 0x01	; 1
    9056:	80 93 e0 0b 	sts	0x0BE0, r24
}
    905a:	08 95       	ret

0000905c <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    905c:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    905e:	ed 91       	ld	r30, X+
    9060:	fc 91       	ld	r31, X
    9062:	11 97       	sbiw	r26, 0x01	; 1
    9064:	af 01       	movw	r20, r30
    9066:	4f 5f       	subi	r20, 0xFF	; 255
    9068:	5f 4f       	sbci	r21, 0xFF	; 255
    906a:	11 96       	adiw	r26, 0x01	; 1
    906c:	5c 93       	st	X, r21
    906e:	4e 93       	st	-X, r20
    9070:	e4 91       	lpm	r30, Z+
    9072:	2e 2f       	mov	r18, r30
    9074:	30 e0       	ldi	r19, 0x00	; 0
    9076:	e7 ff       	sbrs	r30, 7
    9078:	13 c0       	rjmp	.+38     	; 0x90a0 <ReadVarLen+0x44>
    {
       value &= 0x7F;
    907a:	2f 77       	andi	r18, 0x7F	; 127
    907c:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    907e:	36 95       	lsr	r19
    9080:	32 2f       	mov	r19, r18
    9082:	22 27       	eor	r18, r18
    9084:	37 95       	ror	r19
    9086:	27 95       	ror	r18
    9088:	fa 01       	movw	r30, r20
    908a:	4f 5f       	subi	r20, 0xFF	; 255
    908c:	5f 4f       	sbci	r21, 0xFF	; 255
    908e:	e4 91       	lpm	r30, Z+
    9090:	8e 2f       	mov	r24, r30
    9092:	8f 77       	andi	r24, 0x7F	; 127
    9094:	28 0f       	add	r18, r24
    9096:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    9098:	e7 fd       	sbrc	r30, 7
    909a:	f1 cf       	rjmp	.-30     	; 0x907e <ReadVarLen+0x22>
    909c:	4d 93       	st	X+, r20
    909e:	5c 93       	st	X, r21
    }


    return value;
}
    90a0:	c9 01       	movw	r24, r18
    90a2:	08 95       	ret

000090a4 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    90a4:	80 93 71 0e 	sts	0x0E71, r24
}
    90a8:	08 95       	ret

000090aa <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    90aa:	ff 92       	push	r15
    90ac:	0f 93       	push	r16
    90ae:	1f 93       	push	r17
    90b0:	8c 01       	movw	r16, r24
    90b2:	86 2f       	mov	r24, r22
    90b4:	f4 2e       	mov	r15, r20
	SetMixerNote(trackNo,param);
    90b6:	64 2f       	mov	r22, r20
    90b8:	0e 94 9e 45 	call	0x8b3c	; 0x8b3c <SetMixerNote>
	track->note=param;
    90bc:	f8 01       	movw	r30, r16
    90be:	f1 82       	std	Z+1, r15	; 0x01
}
    90c0:	1f 91       	pop	r17
    90c2:	0f 91       	pop	r16
    90c4:	ff 90       	pop	r15
    90c6:	08 95       	ret

000090c8 <PatchCommand04>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    90c8:	fc 01       	movw	r30, r24
    90ca:	86 2f       	mov	r24, r22
	track->note-=param;
    90cc:	61 81       	ldd	r22, Z+1	; 0x01
    90ce:	64 1b       	sub	r22, r20
    90d0:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    90d2:	0e 94 9e 45 	call	0x8b3c	; 0x8b3c <SetMixerNote>
}
    90d6:	08 95       	ret

000090d8 <PatchCommand03>:
	SetMixerWave(trackNo,param);
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    90d8:	fc 01       	movw	r30, r24
    90da:	86 2f       	mov	r24, r22
	track->note+=param;
    90dc:	91 81       	ldd	r25, Z+1	; 0x01
    90de:	49 0f       	add	r20, r25
    90e0:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    90e2:	64 2f       	mov	r22, r20
    90e4:	0e 94 9e 45 	call	0x8b3c	; 0x8b3c <SetMixerNote>
}
    90e8:	08 95       	ret

000090ea <TriggerCommon>:
}




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    90ea:	ff 92       	push	r15
    90ec:	0f 93       	push	r16
    90ee:	1f 93       	push	r17
    90f0:	cf 93       	push	r28
    90f2:	df 93       	push	r29
    90f4:	18 2f       	mov	r17, r24
    90f6:	f6 2e       	mov	r15, r22
	struct TrackStruct* track=&tracks[channel];
    90f8:	86 e1       	ldi	r24, 0x16	; 22
    90fa:	18 9f       	mul	r17, r24
    90fc:	e0 01       	movw	r28, r0
    90fe:	11 24       	eor	r1, r1
    9100:	ce 5e       	subi	r28, 0xEE	; 238
    9102:	d1 4f       	sbci	r29, 0xF1	; 241

	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    9104:	00 e0       	ldi	r16, 0x00	; 0
    9106:	88 81       	ld	r24, Y
    9108:	87 fd       	sbrc	r24, 7
    910a:	01 e0       	ldi	r16, 0x01	; 1

	track->patchCurrDeltaTime=0;
    910c:	1a 8a       	std	Y+18, r1	; 0x12
	track->envelopeStep=0;
    910e:	1d 86       	std	Y+13, r1	; 0x0d
	track->envelopeVol=0xff;
    9110:	9f ef       	ldi	r25, 0xFF	; 255
    9112:	9c 87       	std	Y+12, r25	; 0x0c
	track->noteVol=volume;
    9114:	4b 87       	std	Y+11, r20	; 0x0b
	track->patchPlayingTime=0;
    9116:	1b 8a       	std	Y+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    9118:	88 81       	ld	r24, Y
    911a:	80 62       	ori	r24, 0x20	; 32
    911c:	87 7b       	andi	r24, 0xB7	; 183
    911e:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    9120:	1f 82       	std	Y+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    9122:	99 87       	std	Y+9, r25	; 0x09
	track->note=note;
    9124:	29 83       	std	Y+1, r18	; 0x01

	#else

		#if MIXER_CHAN4_TYPE == 0
			//if it's a noise channel
			if(channel==3){
    9126:	13 30       	cpi	r17, 0x03	; 3
    9128:	69 f4       	brne	.+26     	; 0x9144 <TriggerCommon+0x5a>
				if(!isFx) patch=note;
    912a:	00 23       	and	r16, r16
    912c:	09 f4       	brne	.+2      	; 0x9130 <TriggerCommon+0x46>
    912e:	f2 2e       	mov	r15, r18
				mixer.channels.type.noise.barrel=0x0101;
    9130:	81 e0       	ldi	r24, 0x01	; 1
    9132:	91 e0       	ldi	r25, 0x01	; 1
    9134:	90 93 07 0e 	sts	0x0E07, r25
    9138:	80 93 06 0e 	sts	0x0E06, r24
				mixer.channels.type.noise.params=1; //default
    913c:	81 e0       	ldi	r24, 0x01	; 1
    913e:	80 93 05 0e 	sts	0x0E05, r24
    9142:	08 c0       	rjmp	.+16     	; 0x9154 <TriggerCommon+0x6a>
			}else{
				SetMixerNote(channel,note);
    9144:	81 2f       	mov	r24, r17
    9146:	62 2f       	mov	r22, r18
    9148:	0e 94 9e 45 	call	0x8b3c	; 0x8b3c <SetMixerNote>
				SetMixerWave(channel,0);
    914c:	81 2f       	mov	r24, r17
    914e:	60 e0       	ldi	r22, 0x00	; 0
    9150:	0e 94 bd 45 	call	0x8b7a	; 0x8b7a <SetMixerWave>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    9154:	00 23       	and	r16, r16
    9156:	11 f0       	breq	.+4      	; 0x915c <TriggerCommon+0x72>
		track->fxPatchNo=patch;
    9158:	ff 86       	std	Y+15, r15	; 0x0f
    915a:	01 c0       	rjmp	.+2      	; 0x915e <TriggerCommon+0x74>
	}else{
		track->patchNo=patch;
    915c:	fe 86       	std	Y+14, r15	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    915e:	89 e0       	ldi	r24, 0x09	; 9
    9160:	f8 9e       	mul	r15, r24
    9162:	c0 01       	movw	r24, r0
    9164:	11 24       	eor	r1, r1
    9166:	e0 91 6c 0e 	lds	r30, 0x0E6C
    916a:	f0 91 6d 0e 	lds	r31, 0x0E6D
    916e:	e8 0f       	add	r30, r24
    9170:	f9 1f       	adc	r31, r25
    9172:	33 96       	adiw	r30, 0x03	; 3
    9174:	25 91       	lpm	r18, Z+
    9176:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    9178:	21 15       	cp	r18, r1
    917a:	31 05       	cpc	r19, r1
    917c:	19 f4       	brne	.+6      	; 0x9184 <TriggerCommon+0x9a>
		track->patchCommandStreamPos=NULL;
    917e:	1d 8a       	std	Y+21, r1	; 0x15
    9180:	1c 8a       	std	Y+20, r1	; 0x14
    9182:	07 c0       	rjmp	.+14     	; 0x9192 <TriggerCommon+0xa8>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    9184:	f9 01       	movw	r30, r18
    9186:	84 91       	lpm	r24, Z+
    9188:	89 8b       	std	Y+17, r24	; 0x11
		track->patchCommandStreamPos=pos;
    918a:	2f 5f       	subi	r18, 0xFF	; 255
    918c:	3f 4f       	sbci	r19, 0xFF	; 255
    918e:	3d 8b       	std	Y+21, r19	; 0x15
    9190:	2c 8b       	std	Y+20, r18	; 0x14
	}

}
    9192:	df 91       	pop	r29
    9194:	cf 91       	pop	r28
    9196:	1f 91       	pop	r17
    9198:	0f 91       	pop	r16
    919a:	ff 90       	pop	r15
    919c:	08 95       	ret

0000919e <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;
	TriggerCommon(channel,patch,volume,80);

}

void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    919e:	58 2f       	mov	r21, r24
    91a0:	74 2f       	mov	r23, r20

	//allow only other music notes
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    91a2:	a8 2f       	mov	r26, r24
    91a4:	b0 e0       	ldi	r27, 0x00	; 0
    91a6:	86 e1       	ldi	r24, 0x16	; 22
    91a8:	90 e0       	ldi	r25, 0x00	; 0
    91aa:	a8 9f       	mul	r26, r24
    91ac:	f0 01       	movw	r30, r0
    91ae:	a9 9f       	mul	r26, r25
    91b0:	f0 0d       	add	r31, r0
    91b2:	b8 9f       	mul	r27, r24
    91b4:	f0 0d       	add	r31, r0
    91b6:	11 24       	eor	r1, r1
    91b8:	ee 5e       	subi	r30, 0xEE	; 238
    91ba:	f1 4f       	sbci	r31, 0xF1	; 241
    91bc:	30 81       	ld	r19, Z
    91be:	35 ff       	sbrs	r19, 5
    91c0:	02 c0       	rjmp	.+4      	; 0x91c6 <TriggerNote+0x28>
    91c2:	37 fd       	sbrc	r19, 7
    91c4:	26 c0       	rjmp	.+76     	; 0x9212 <TriggerNote+0x74>

		if(volume==0){ //note-off received
    91c6:	22 23       	and	r18, r18
    91c8:	91 f4       	brne	.+36     	; 0x91ee <TriggerNote+0x50>
			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    91ca:	86 e1       	ldi	r24, 0x16	; 22
    91cc:	90 e0       	ldi	r25, 0x00	; 0
    91ce:	a8 9f       	mul	r26, r24
    91d0:	f0 01       	movw	r30, r0
    91d2:	a9 9f       	mul	r26, r25
    91d4:	f0 0d       	add	r31, r0
    91d6:	b8 9f       	mul	r27, r24
    91d8:	f0 0d       	add	r31, r0
    91da:	11 24       	eor	r1, r1
    91dc:	ee 5e       	subi	r30, 0xEE	; 238
    91de:	f1 4f       	sbci	r31, 0xF1	; 241
    91e0:	3f 7b       	andi	r19, 0xBF	; 191
    91e2:	30 83       	st	Z, r19

			//cut note if there's no envelope
			if(tracks[channel].envelopeStep==0){
    91e4:	85 85       	ldd	r24, Z+13	; 0x0d
    91e6:	88 23       	and	r24, r24
    91e8:	a1 f4       	brne	.+40     	; 0x9212 <TriggerNote+0x74>
				tracks[channel].noteVol=0;
    91ea:	13 86       	std	Z+11, r1	; 0x0b
    91ec:	08 95       	ret
			}
		}else{

			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    91ee:	86 e1       	ldi	r24, 0x16	; 22
    91f0:	90 e0       	ldi	r25, 0x00	; 0
    91f2:	a8 9f       	mul	r26, r24
    91f4:	f0 01       	movw	r30, r0
    91f6:	a9 9f       	mul	r26, r25
    91f8:	f0 0d       	add	r31, r0
    91fa:	b8 9f       	mul	r27, r24
    91fc:	f0 0d       	add	r31, r0
    91fe:	11 24       	eor	r1, r1
    9200:	ee 5e       	subi	r30, 0xEE	; 238
    9202:	f1 4f       	sbci	r31, 0xF1	; 241
    9204:	3f 77       	andi	r19, 0x7F	; 127
    9206:	30 83       	st	Z, r19
			TriggerCommon(channel,patch,volume,note);
    9208:	85 2f       	mov	r24, r21
    920a:	42 2f       	mov	r20, r18
    920c:	27 2f       	mov	r18, r23
    920e:	0e 94 75 48 	call	0x90ea	; 0x90ea <TriggerCommon>
    9212:	08 95       	ret

00009214 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    9214:	af 92       	push	r10
    9216:	bf 92       	push	r11
    9218:	df 92       	push	r13
    921a:	ef 92       	push	r14
    921c:	ff 92       	push	r15
    921e:	0f 93       	push	r16
    9220:	1f 93       	push	r17
    9222:	cf 93       	push	r28
    9224:	df 93       	push	r29
    9226:	a2 e1       	ldi	r26, 0x12	; 18
    9228:	be e0       	ldi	r27, 0x0E	; 14
    922a:	c3 ef       	ldi	r28, 0xF3	; 243
    922c:	dd e0       	ldi	r29, 0x0D	; 13
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    922e:	1d 96       	adiw	r26, 0x0d	; 13
    9230:	8c 91       	ld	r24, X
    9232:	1d 97       	sbiw	r26, 0x0d	; 13
    9234:	88 23       	and	r24, r24
    9236:	b9 f0       	breq	.+46     	; 0x9266 <ProcessMusic+0x52>
			vol=track->envelopeVol+track->envelopeStep;
    9238:	28 2f       	mov	r18, r24
    923a:	33 27       	eor	r19, r19
    923c:	27 fd       	sbrc	r18, 7
    923e:	30 95       	com	r19
    9240:	1c 96       	adiw	r26, 0x0c	; 12
    9242:	8c 91       	ld	r24, X
    9244:	1c 97       	sbiw	r26, 0x0c	; 12
    9246:	28 0f       	add	r18, r24
    9248:	31 1d       	adc	r19, r1
    924a:	2f 3f       	cpi	r18, 0xFF	; 255
    924c:	31 05       	cpc	r19, r1
    924e:	19 f0       	breq	.+6      	; 0x9256 <ProcessMusic+0x42>
    9250:	14 f0       	brlt	.+4      	; 0x9256 <ProcessMusic+0x42>
    9252:	2f ef       	ldi	r18, 0xFF	; 255
    9254:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;
			}else if(vol>0xff){
				vol=0xff;
			}
			track->envelopeVol=vol;
    9256:	c9 01       	movw	r24, r18
    9258:	37 ff       	sbrs	r19, 7
    925a:	02 c0       	rjmp	.+4      	; 0x9260 <ProcessMusic+0x4c>
    925c:	80 e0       	ldi	r24, 0x00	; 0
    925e:	90 e0       	ldi	r25, 0x00	; 0
    9260:	1c 96       	adiw	r26, 0x0c	; 12
    9262:	8c 93       	st	X, r24
    9264:	1c 97       	sbiw	r26, 0x0c	; 12
		}

		if(track->flags & TRACK_FLAGS_SLIDING){
    9266:	8c 91       	ld	r24, X
    9268:	83 ff       	sbrs	r24, 3
    926a:	26 c0       	rjmp	.+76     	; 0x92b8 <ProcessMusic+0xa4>

			mixer.channels.all[trackNo].step+=track->slideStep;
    926c:	12 96       	adiw	r26, 0x02	; 2
    926e:	4d 91       	ld	r20, X+
    9270:	5c 91       	ld	r21, X
    9272:	13 97       	sbiw	r26, 0x03	; 3
    9274:	28 81       	ld	r18, Y
    9276:	39 81       	ldd	r19, Y+1	; 0x01
    9278:	24 0f       	add	r18, r20
    927a:	35 1f       	adc	r19, r21
    927c:	39 83       	std	Y+1, r19	; 0x01
    927e:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    9280:	14 96       	adiw	r26, 0x04	; 4
    9282:	8c 91       	ld	r24, X
    9284:	14 97       	sbiw	r26, 0x04	; 4
    9286:	e8 2f       	mov	r30, r24
    9288:	f0 e0       	ldi	r31, 0x00	; 0
    928a:	ee 0f       	add	r30, r30
    928c:	ff 1f       	adc	r31, r31
    928e:	e8 5f       	subi	r30, 0xF8	; 248
    9290:	f8 46       	sbci	r31, 0x68	; 104
    9292:	85 91       	lpm	r24, Z+
    9294:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) ||
    9296:	14 16       	cp	r1, r20
    9298:	15 06       	cpc	r1, r21
    929a:	24 f4       	brge	.+8      	; 0x92a4 <ProcessMusic+0x90>
    929c:	28 17       	cp	r18, r24
    929e:	39 07       	cpc	r19, r25
    92a0:	30 f4       	brcc	.+12     	; 0x92ae <ProcessMusic+0x9a>
    92a2:	0a c0       	rjmp	.+20     	; 0x92b8 <ProcessMusic+0xa4>
    92a4:	45 2b       	or	r20, r21
    92a6:	41 f0       	breq	.+16     	; 0x92b8 <ProcessMusic+0xa4>
    92a8:	82 17       	cp	r24, r18
    92aa:	93 07       	cpc	r25, r19
    92ac:	28 f0       	brcs	.+10     	; 0x92b8 <ProcessMusic+0xa4>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{
				mixer.channels.all[trackNo].step = tStep;
    92ae:	99 83       	std	Y+1, r25	; 0x01
    92b0:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);
    92b2:	8c 91       	ld	r24, X
    92b4:	87 7f       	andi	r24, 0xF7	; 247
    92b6:	8c 93       	st	X, r24
    92b8:	56 96       	adiw	r26, 0x16	; 22
    92ba:	26 96       	adiw	r28, 0x06	; 6
	unsigned int uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    92bc:	4e e0       	ldi	r20, 0x0E	; 14
    92be:	aa 36       	cpi	r26, 0x6A	; 106
    92c0:	b4 07       	cpc	r27, r20
    92c2:	09 f0       	breq	.+2      	; 0x92c6 <ProcessMusic+0xb2>
    92c4:	b4 cf       	rjmp	.-152    	; 0x922e <ProcessMusic+0x1a>
	}



	//Process song MIDI notes
	if(playSong){
    92c6:	80 91 e0 0b 	lds	r24, 0x0BE0
    92ca:	88 23       	and	r24, r24
    92cc:	09 f0       	breq	.+2      	; 0x92d0 <ProcessMusic+0xbc>
    92ce:	de c0       	rjmp	.+444    	; 0x948c <ProcessMusic+0x278>
    92d0:	fa c0       	rjmp	.+500    	; 0x94c6 <ProcessMusic+0x2b2>

		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){

			c1=pgm_read_byte(songPos++);
    92d2:	e0 91 74 0e 	lds	r30, 0x0E74
    92d6:	f0 91 75 0e 	lds	r31, 0x0E75
    92da:	cf 01       	movw	r24, r30
    92dc:	01 96       	adiw	r24, 0x01	; 1
    92de:	90 93 75 0e 	sts	0x0E75, r25
    92e2:	80 93 74 0e 	sts	0x0E74, r24
    92e6:	44 91       	lpm	r20, Z+

			if(c1==0xff){
    92e8:	4f 3f       	cpi	r20, 0xFF	; 255
    92ea:	69 f5       	brne	.+90     	; 0x9346 <ProcessMusic+0x132>
				//META data type event
				c1=pgm_read_byte(songPos++);
    92ec:	ac 01       	movw	r20, r24
    92ee:	4f 5f       	subi	r20, 0xFF	; 255
    92f0:	5f 4f       	sbci	r21, 0xFF	; 255
    92f2:	50 93 75 0e 	sts	0x0E75, r21
    92f6:	40 93 74 0e 	sts	0x0E74, r20
    92fa:	fc 01       	movw	r30, r24
    92fc:	84 91       	lpm	r24, Z+


				if(c1==0x2f){ //end of song
    92fe:	8f 32       	cpi	r24, 0x2F	; 47
    9300:	19 f4       	brne	.+6      	; 0x9308 <ProcessMusic+0xf4>
					playSong=false;
    9302:	10 92 e0 0b 	sts	0x0BE0, r1
    9306:	d0 c0       	rjmp	.+416    	; 0x94a8 <ProcessMusic+0x294>
					break;
				}else if(c1==0x6){ //marker
    9308:	86 30       	cpi	r24, 0x06	; 6
    930a:	09 f0       	breq	.+2      	; 0x930e <ProcessMusic+0xfa>
    930c:	b2 c0       	rjmp	.+356    	; 0x9472 <ProcessMusic+0x25e>
					c1=pgm_read_byte(songPos++); //read len
    930e:	fa 01       	movw	r30, r20
    9310:	31 96       	adiw	r30, 0x01	; 1
					c2=pgm_read_byte(songPos++); //read data
    9312:	cf 01       	movw	r24, r30
    9314:	01 96       	adiw	r24, 0x01	; 1
    9316:	90 93 75 0e 	sts	0x0E75, r25
    931a:	80 93 74 0e 	sts	0x0E74, r24
    931e:	e4 91       	lpm	r30, Z+
					if(c2=='S'){ //loop start
    9320:	e3 35       	cpi	r30, 0x53	; 83
    9322:	29 f4       	brne	.+10     	; 0x932e <ProcessMusic+0x11a>
						loopStart=songPos;
    9324:	90 93 77 0e 	sts	0x0E77, r25
    9328:	80 93 76 0e 	sts	0x0E76, r24
    932c:	a2 c0       	rjmp	.+324    	; 0x9472 <ProcessMusic+0x25e>
					}else if(c2=='E'){//loop end
    932e:	e5 34       	cpi	r30, 0x45	; 69
    9330:	09 f0       	breq	.+2      	; 0x9334 <ProcessMusic+0x120>
    9332:	9f c0       	rjmp	.+318    	; 0x9472 <ProcessMusic+0x25e>
						songPos=loopStart;
    9334:	80 91 76 0e 	lds	r24, 0x0E76
    9338:	90 91 77 0e 	lds	r25, 0x0E77
    933c:	90 93 75 0e 	sts	0x0E75, r25
    9340:	80 93 74 0e 	sts	0x0E74, r24
    9344:	96 c0       	rjmp	.+300    	; 0x9472 <ProcessMusic+0x25e>
				}


			}else{

				if(c1&0x80) lastStatus=c1;
    9346:	47 ff       	sbrs	r20, 7
    9348:	02 c0       	rjmp	.+4      	; 0x934e <ProcessMusic+0x13a>
    934a:	40 93 6e 0e 	sts	0x0E6E, r20
				channel=lastStatus&0x0f;
    934e:	20 91 6e 0e 	lds	r18, 0x0E6E
    9352:	32 2f       	mov	r19, r18
    9354:	3f 70       	andi	r19, 0x0F	; 15

				//get next data byte
				//Note: maybe we should not advance the cursor
				//in case we receive an unsupported command
				if(c1&0x80) c1=pgm_read_byte(songPos++);
    9356:	47 ff       	sbrs	r20, 7
    9358:	08 c0       	rjmp	.+16     	; 0x936a <ProcessMusic+0x156>
    935a:	01 96       	adiw	r24, 0x01	; 1
    935c:	90 93 75 0e 	sts	0x0E75, r25
    9360:	80 93 74 0e 	sts	0x0E74, r24
    9364:	01 97       	sbiw	r24, 0x01	; 1
    9366:	fc 01       	movw	r30, r24
    9368:	44 91       	lpm	r20, Z+

				switch(lastStatus&0xf0){
    936a:	82 2f       	mov	r24, r18
    936c:	90 e0       	ldi	r25, 0x00	; 0
    936e:	80 7f       	andi	r24, 0xF0	; 240
    9370:	90 70       	andi	r25, 0x00	; 0
    9372:	80 3b       	cpi	r24, 0xB0	; 176
    9374:	91 05       	cpc	r25, r1
    9376:	31 f1       	breq	.+76     	; 0x93c4 <ProcessMusic+0x1b0>
    9378:	80 3c       	cpi	r24, 0xC0	; 192
    937a:	91 05       	cpc	r25, r1
    937c:	09 f4       	brne	.+2      	; 0x9380 <ProcessMusic+0x16c>
    937e:	6d c0       	rjmp	.+218    	; 0x945a <ProcessMusic+0x246>
    9380:	80 39       	cpi	r24, 0x90	; 144
    9382:	91 05       	cpc	r25, r1
    9384:	09 f0       	breq	.+2      	; 0x9388 <ProcessMusic+0x174>
    9386:	75 c0       	rjmp	.+234    	; 0x9472 <ProcessMusic+0x25e>

					//note-on
					case 0x90:
						//c1 = note
						c2=pgm_read_byte(songPos++)<<1; //get volume
    9388:	e0 91 74 0e 	lds	r30, 0x0E74
    938c:	f0 91 75 0e 	lds	r31, 0x0E75
    9390:	31 96       	adiw	r30, 0x01	; 1
    9392:	f0 93 75 0e 	sts	0x0E75, r31
    9396:	e0 93 74 0e 	sts	0x0E74, r30
    939a:	31 97       	sbiw	r30, 0x01	; 1
    939c:	e4 91       	lpm	r30, Z+

						if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
							TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    939e:	83 2f       	mov	r24, r19
    93a0:	90 e0       	ldi	r25, 0x00	; 0
    93a2:	8c 9f       	mul	r24, r28
    93a4:	d0 01       	movw	r26, r0
    93a6:	8d 9f       	mul	r24, r29
    93a8:	b0 0d       	add	r27, r0
    93aa:	9c 9f       	mul	r25, r28
    93ac:	b0 0d       	add	r27, r0
    93ae:	11 24       	eor	r1, r1
    93b0:	ae 5e       	subi	r26, 0xEE	; 238
    93b2:	b1 4f       	sbci	r27, 0xF1	; 241
    93b4:	ee 0f       	add	r30, r30
    93b6:	83 2f       	mov	r24, r19
    93b8:	1e 96       	adiw	r26, 0x0e	; 14
    93ba:	6c 91       	ld	r22, X
    93bc:	2e 2f       	mov	r18, r30
    93be:	0e 94 cf 48 	call	0x919e	; 0x919e <TriggerNote>
    93c2:	57 c0       	rjmp	.+174    	; 0x9472 <ProcessMusic+0x25e>
						break;

					//controllers
					case 0xb0:
						///c1 = controller #
						c2=pgm_read_byte(songPos++); //get controller value
    93c4:	e0 91 74 0e 	lds	r30, 0x0E74
    93c8:	f0 91 75 0e 	lds	r31, 0x0E75
    93cc:	31 96       	adiw	r30, 0x01	; 1
    93ce:	f0 93 75 0e 	sts	0x0E75, r31
    93d2:	e0 93 74 0e 	sts	0x0E74, r30
    93d6:	31 97       	sbiw	r30, 0x01	; 1
    93d8:	24 91       	lpm	r18, Z+

						if(c1==CONTROLER_VOL){
    93da:	47 30       	cpi	r20, 0x07	; 7
    93dc:	71 f4       	brne	.+28     	; 0x93fa <ProcessMusic+0x1e6>
							tracks[channel].trackVol=c2<<1;
    93de:	83 2f       	mov	r24, r19
    93e0:	90 e0       	ldi	r25, 0x00	; 0
    93e2:	8c 9f       	mul	r24, r28
    93e4:	f0 01       	movw	r30, r0
    93e6:	8d 9f       	mul	r24, r29
    93e8:	f0 0d       	add	r31, r0
    93ea:	9c 9f       	mul	r25, r28
    93ec:	f0 0d       	add	r31, r0
    93ee:	11 24       	eor	r1, r1
    93f0:	ee 5e       	subi	r30, 0xEE	; 238
    93f2:	f1 4f       	sbci	r31, 0xF1	; 241
    93f4:	22 0f       	add	r18, r18
    93f6:	22 87       	std	Z+10, r18	; 0x0a
    93f8:	3c c0       	rjmp	.+120    	; 0x9472 <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_EXPRESSION){
    93fa:	4b 30       	cpi	r20, 0x0B	; 11
    93fc:	71 f4       	brne	.+28     	; 0x941a <ProcessMusic+0x206>
							tracks[channel].expressionVol=c2<<1;
    93fe:	83 2f       	mov	r24, r19
    9400:	90 e0       	ldi	r25, 0x00	; 0
    9402:	8c 9f       	mul	r24, r28
    9404:	f0 01       	movw	r30, r0
    9406:	8d 9f       	mul	r24, r29
    9408:	f0 0d       	add	r31, r0
    940a:	9c 9f       	mul	r25, r28
    940c:	f0 0d       	add	r31, r0
    940e:	11 24       	eor	r1, r1
    9410:	ee 5e       	subi	r30, 0xEE	; 238
    9412:	f1 4f       	sbci	r31, 0xF1	; 241
    9414:	22 0f       	add	r18, r18
    9416:	21 87       	std	Z+9, r18	; 0x09
    9418:	2c c0       	rjmp	.+88     	; 0x9472 <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_TREMOLO){
    941a:	4c 35       	cpi	r20, 0x5C	; 92
    941c:	71 f4       	brne	.+28     	; 0x943a <ProcessMusic+0x226>
							tracks[channel].tremoloLevel=c2<<1;
    941e:	83 2f       	mov	r24, r19
    9420:	90 e0       	ldi	r25, 0x00	; 0
    9422:	8c 9f       	mul	r24, r28
    9424:	f0 01       	movw	r30, r0
    9426:	8d 9f       	mul	r24, r29
    9428:	f0 0d       	add	r31, r0
    942a:	9c 9f       	mul	r25, r28
    942c:	f0 0d       	add	r31, r0
    942e:	11 24       	eor	r1, r1
    9430:	ee 5e       	subi	r30, 0xEE	; 238
    9432:	f1 4f       	sbci	r31, 0xF1	; 241
    9434:	22 0f       	add	r18, r18
    9436:	27 83       	std	Z+7, r18	; 0x07
    9438:	1c c0       	rjmp	.+56     	; 0x9472 <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_TREMOLO_RATE){
    943a:	44 36       	cpi	r20, 0x64	; 100
    943c:	d1 f4       	brne	.+52     	; 0x9472 <ProcessMusic+0x25e>
							tracks[channel].tremoloRate=c2<<1;
    943e:	83 2f       	mov	r24, r19
    9440:	90 e0       	ldi	r25, 0x00	; 0
    9442:	8c 9f       	mul	r24, r28
    9444:	f0 01       	movw	r30, r0
    9446:	8d 9f       	mul	r24, r29
    9448:	f0 0d       	add	r31, r0
    944a:	9c 9f       	mul	r25, r28
    944c:	f0 0d       	add	r31, r0
    944e:	11 24       	eor	r1, r1
    9450:	ee 5e       	subi	r30, 0xEE	; 238
    9452:	f1 4f       	sbci	r31, 0xF1	; 241
    9454:	22 0f       	add	r18, r18
    9456:	20 87       	std	Z+8, r18	; 0x08
    9458:	0c c0       	rjmp	.+24     	; 0x9472 <ProcessMusic+0x25e>
						break;

					//program change
					case 0xc0:
						// c1 = patch #
						tracks[channel].patchNo=c1;
    945a:	83 2f       	mov	r24, r19
    945c:	90 e0       	ldi	r25, 0x00	; 0
    945e:	8c 9f       	mul	r24, r28
    9460:	f0 01       	movw	r30, r0
    9462:	8d 9f       	mul	r24, r29
    9464:	f0 0d       	add	r31, r0
    9466:	9c 9f       	mul	r25, r28
    9468:	f0 0d       	add	r31, r0
    946a:	11 24       	eor	r1, r1
    946c:	ee 5e       	subi	r30, 0xEE	; 238
    946e:	f1 4f       	sbci	r31, 0xF1	; 241
    9470:	46 87       	std	Z+14, r20	; 0x0e


			}//end if(c1==0xff)

			//read next delta time
			nextDeltaTime=ReadVarLen(&songPos); //Bug fix: remove divide by two
    9472:	84 e7       	ldi	r24, 0x74	; 116
    9474:	9e e0       	ldi	r25, 0x0E	; 14
    9476:	0e 94 2e 48 	call	0x905c	; 0x905c <ReadVarLen>
    947a:	90 93 73 0e 	sts	0x0E73, r25
    947e:	80 93 72 0e 	sts	0x0E72, r24
			currDeltaTime=0;
    9482:	10 92 6b 0e 	sts	0x0E6B, r1
    9486:	10 92 6a 0e 	sts	0x0E6A, r1
    948a:	02 c0       	rjmp	.+4      	; 0x9490 <ProcessMusic+0x27c>
						}else if(c1==CONTROLER_EXPRESSION){
							tracks[channel].expressionVol=c2<<1;
						}else if(c1==CONTROLER_TREMOLO){
							tracks[channel].tremoloLevel=c2<<1;
						}else if(c1==CONTROLER_TREMOLO_RATE){
							tracks[channel].tremoloRate=c2<<1;
    948c:	c6 e1       	ldi	r28, 0x16	; 22
    948e:	d0 e0       	ldi	r29, 0x00	; 0

	//Process song MIDI notes
	if(playSong){

		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){
    9490:	20 91 6a 0e 	lds	r18, 0x0E6A
    9494:	30 91 6b 0e 	lds	r19, 0x0E6B
    9498:	80 91 72 0e 	lds	r24, 0x0E72
    949c:	90 91 73 0e 	lds	r25, 0x0E73
    94a0:	28 17       	cp	r18, r24
    94a2:	39 07       	cpc	r19, r25
    94a4:	09 f4       	brne	.+2      	; 0x94a8 <ProcessMusic+0x294>
    94a6:	15 cf       	rjmp	.-470    	; 0x92d2 <ProcessMusic+0xbe>
			currDeltaTime=0;

		}//end while


		currDeltaTime++;
    94a8:	2f 5f       	subi	r18, 0xFF	; 255
    94aa:	3f 4f       	sbci	r19, 0xFF	; 255
    94ac:	30 93 6b 0e 	sts	0x0E6B, r19
    94b0:	20 93 6a 0e 	sts	0x0E6A, r18
		absoluteTime++;
    94b4:	80 91 6f 0e 	lds	r24, 0x0E6F
    94b8:	90 91 70 0e 	lds	r25, 0x0E70
    94bc:	01 96       	adiw	r24, 0x01	; 1
    94be:	90 93 70 0e 	sts	0x0E70, r25
    94c2:	80 93 6f 0e 	sts	0x0E6F, r24
    94c6:	c2 e1       	ldi	r28, 0x12	; 18
    94c8:	de e0       	ldi	r29, 0x0E	; 14
    94ca:	02 ef       	ldi	r16, 0xF2	; 242
    94cc:	1d e0       	ldi	r17, 0x0D	; 13
    94ce:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;

					uVol=(uVol*(0xff-tVol))+0x100;
    94d0:	ef ef       	ldi	r30, 0xFF	; 255
    94d2:	ae 2e       	mov	r10, r30
    94d4:	b1 2c       	mov	r11, r1

		}//end while


		currDeltaTime++;
		absoluteTime++;
    94d6:	dc 2e       	mov	r13, r28
    94d8:	ed 2e       	mov	r14, r29
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    94da:	88 81       	ld	r24, Y
    94dc:	86 fd       	sbrc	r24, 6
    94de:	3d c0       	rjmp	.+122    	; 0x955a <ProcessMusic+0x346>

			if(track->patchCommandStreamPos!=NULL &&
    94e0:	8c 89       	ldd	r24, Y+20	; 0x14
    94e2:	9d 89       	ldd	r25, Y+21	; 0x15
    94e4:	89 2b       	or	r24, r25
    94e6:	09 f4       	brne	.+2      	; 0x94ea <ProcessMusic+0x2d6>
    94e8:	35 c0       	rjmp	.+106    	; 0x9554 <ProcessMusic+0x340>
    94ea:	9a 89       	ldd	r25, Y+18	; 0x12
    94ec:	89 89       	ldd	r24, Y+17	; 0x11
    94ee:	98 17       	cp	r25, r24
    94f0:	68 f5       	brcc	.+90     	; 0x954c <ProcessMusic+0x338>
    94f2:	30 c0       	rjmp	.+96     	; 0x9554 <ProcessMusic+0x340>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){

					c1=pgm_read_byte(track->patchCommandStreamPos++);
    94f4:	ec 89       	ldd	r30, Y+20	; 0x14
    94f6:	fd 89       	ldd	r31, Y+21	; 0x15
    94f8:	cf 01       	movw	r24, r30
    94fa:	01 96       	adiw	r24, 0x01	; 1
    94fc:	9d 8b       	std	Y+21, r25	; 0x15
    94fe:	8c 8b       	std	Y+20, r24	; 0x14
    9500:	24 91       	lpm	r18, Z+
					if(c1==0xff){
    9502:	2f 3f       	cpi	r18, 0xFF	; 255
    9504:	31 f4       	brne	.+12     	; 0x9512 <ProcessMusic+0x2fe>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9506:	88 81       	ld	r24, Y
    9508:	8f 77       	andi	r24, 0x7F	; 127
    950a:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    950c:	1d 8a       	std	Y+21, r1	; 0x15
    950e:	1c 8a       	std	Y+20, r1	; 0x14
    9510:	21 c0       	rjmp	.+66     	; 0x9554 <ProcessMusic+0x340>
						break;

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    9512:	01 96       	adiw	r24, 0x01	; 1
    9514:	9d 8b       	std	Y+21, r25	; 0x15
    9516:	8c 8b       	std	Y+20, r24	; 0x14
    9518:	01 97       	sbiw	r24, 0x01	; 1
    951a:	fc 01       	movw	r30, r24
    951c:	44 91       	lpm	r20, Z+
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);
    951e:	82 2f       	mov	r24, r18
    9520:	90 e0       	ldi	r25, 0x00	; 0
    9522:	88 0f       	add	r24, r24
    9524:	99 1f       	adc	r25, r25
    9526:	82 54       	subi	r24, 0x42	; 66
    9528:	9f 4f       	sbci	r25, 0xFF	; 255
    952a:	fc 01       	movw	r30, r24
    952c:	25 91       	lpm	r18, Z+
    952e:	34 91       	lpm	r19, Z+
    9530:	8d 2d       	mov	r24, r13
    9532:	9e 2d       	mov	r25, r14
    9534:	6f 2d       	mov	r22, r15
    9536:	f9 01       	movw	r30, r18
    9538:	09 95       	icall
					}

					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    953a:	ec 89       	ldd	r30, Y+20	; 0x14
    953c:	fd 89       	ldd	r31, Y+21	; 0x15
    953e:	31 96       	adiw	r30, 0x01	; 1
    9540:	fd 8b       	std	Y+21, r31	; 0x15
    9542:	ec 8b       	std	Y+20, r30	; 0x14
    9544:	31 97       	sbiw	r30, 0x01	; 1
    9546:	e4 91       	lpm	r30, Z+
    9548:	e9 8b       	std	Y+17, r30	; 0x11

					track->patchCurrDeltaTime=0;
    954a:	1a 8a       	std	Y+18, r1	; 0x12

			if(track->patchCommandStreamPos!=NULL &&
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    954c:	9a 89       	ldd	r25, Y+18	; 0x12
    954e:	89 89       	ldd	r24, Y+17	; 0x11
    9550:	98 17       	cp	r25, r24
    9552:	81 f2       	breq	.-96     	; 0x94f4 <ProcessMusic+0x2e0>
					track->patchCurrDeltaTime=0;

				}
			}

			track->patchCurrDeltaTime++;
    9554:	8a 89       	ldd	r24, Y+18	; 0x12
    9556:	8f 5f       	subi	r24, 0xFF	; 255
    9558:	8a 8b       	std	Y+18, r24	; 0x12
		}



		if(track->flags & TRACK_FLAGS_PLAYING){
    955a:	88 81       	ld	r24, Y
    955c:	85 fd       	sbrc	r24, 5
    955e:	03 c0       	rjmp	.+6      	; 0x9566 <ProcessMusic+0x352>
    9560:	20 e0       	ldi	r18, 0x00	; 0
    9562:	30 e0       	ldi	r19, 0x00	; 0
    9564:	6b c0       	rjmp	.+214    	; 0x963c <ProcessMusic+0x428>

			if(track->patchPlayingTime<0xff){
    9566:	8b 89       	ldd	r24, Y+19	; 0x13
    9568:	8f 3f       	cpi	r24, 0xFF	; 255
    956a:	11 f0       	breq	.+4      	; 0x9570 <ProcessMusic+0x35c>
				track->patchPlayingTime++;
    956c:	8f 5f       	subi	r24, 0xFF	; 255
    956e:	8b 8b       	std	Y+19, r24	; 0x13
			}

			//compute final frame volume
			if(track->noteVol!=0 && track->envelopeVol!=0 && track->trackVol!=0 && masterVolume!=0){
    9570:	9b 85       	ldd	r25, Y+11	; 0x0b
    9572:	99 23       	and	r25, r25
    9574:	09 f4       	brne	.+2      	; 0x9578 <ProcessMusic+0x364>
    9576:	5c c0       	rjmp	.+184    	; 0x9630 <ProcessMusic+0x41c>
    9578:	2c 85       	ldd	r18, Y+12	; 0x0c
    957a:	22 23       	and	r18, r18
    957c:	09 f4       	brne	.+2      	; 0x9580 <ProcessMusic+0x36c>
    957e:	58 c0       	rjmp	.+176    	; 0x9630 <ProcessMusic+0x41c>
    9580:	8a 85       	ldd	r24, Y+10	; 0x0a
    9582:	88 23       	and	r24, r24
    9584:	09 f4       	brne	.+2      	; 0x9588 <ProcessMusic+0x374>
    9586:	54 c0       	rjmp	.+168    	; 0x9630 <ProcessMusic+0x41c>
    9588:	40 91 71 0e 	lds	r20, 0x0E71
    958c:	44 23       	and	r20, r20
    958e:	09 f4       	brne	.+2      	; 0x9592 <ProcessMusic+0x37e>
    9590:	4f c0       	rjmp	.+158    	; 0x9630 <ProcessMusic+0x41c>

				uVol=(track->noteVol*track->trackVol)+0x100;
    9592:	89 9f       	mul	r24, r25
    9594:	c0 01       	movw	r24, r0
    9596:	11 24       	eor	r1, r1
    9598:	80 50       	subi	r24, 0x00	; 0
    959a:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->envelopeVol)+0x100;
    959c:	89 2f       	mov	r24, r25
    959e:	99 27       	eor	r25, r25
    95a0:	30 e0       	ldi	r19, 0x00	; 0
    95a2:	b9 01       	movw	r22, r18
    95a4:	86 9f       	mul	r24, r22
    95a6:	90 01       	movw	r18, r0
    95a8:	87 9f       	mul	r24, r23
    95aa:	30 0d       	add	r19, r0
    95ac:	96 9f       	mul	r25, r22
    95ae:	30 0d       	add	r19, r0
    95b0:	11 24       	eor	r1, r1
    95b2:	20 50       	subi	r18, 0x00	; 0
    95b4:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->expressionVol)+0x100;
    95b6:	23 2f       	mov	r18, r19
    95b8:	33 27       	eor	r19, r19
    95ba:	89 85       	ldd	r24, Y+9	; 0x09
    95bc:	90 e0       	ldi	r25, 0x00	; 0
    95be:	fc 01       	movw	r30, r24
    95c0:	2e 9f       	mul	r18, r30
    95c2:	c0 01       	movw	r24, r0
    95c4:	2f 9f       	mul	r18, r31
    95c6:	90 0d       	add	r25, r0
    95c8:	3e 9f       	mul	r19, r30
    95ca:	90 0d       	add	r25, r0
    95cc:	11 24       	eor	r1, r1
    95ce:	80 50       	subi	r24, 0x00	; 0
    95d0:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*masterVolume)+0x100;
    95d2:	89 2f       	mov	r24, r25
    95d4:	99 27       	eor	r25, r25
    95d6:	24 2f       	mov	r18, r20
    95d8:	30 e0       	ldi	r19, 0x00	; 0
    95da:	ac 01       	movw	r20, r24
    95dc:	42 9f       	mul	r20, r18
    95de:	c0 01       	movw	r24, r0
    95e0:	43 9f       	mul	r20, r19
    95e2:	90 0d       	add	r25, r0
    95e4:	52 9f       	mul	r21, r18
    95e6:	90 0d       	add	r25, r0
    95e8:	11 24       	eor	r1, r1
    95ea:	80 50       	subi	r24, 0x00	; 0
    95ec:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    95ee:	29 2f       	mov	r18, r25
    95f0:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){
    95f2:	8f 81       	ldd	r24, Y+7	; 0x07
    95f4:	88 23       	and	r24, r24
    95f6:	f1 f0       	breq	.+60     	; 0x9634 <ProcessMusic+0x420>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    95f8:	ee 81       	ldd	r30, Y+6	; 0x06
    95fa:	f0 e0       	ldi	r31, 0x00	; 0
    95fc:	e0 50       	subi	r30, 0x00	; 0
    95fe:	f7 46       	sbci	r31, 0x67	; 103
    9600:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    9602:	e0 58       	subi	r30, 0x80	; 128
    9604:	e8 9f       	mul	r30, r24
    9606:	c0 01       	movw	r24, r0
    9608:	11 24       	eor	r1, r1
    960a:	80 50       	subi	r24, 0x00	; 0
    960c:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;

					uVol=(uVol*(0xff-tVol))+0x100;
    960e:	89 2f       	mov	r24, r25
    9610:	99 27       	eor	r25, r25
    9612:	b5 01       	movw	r22, r10
    9614:	68 1b       	sub	r22, r24
    9616:	79 0b       	sbc	r23, r25
    9618:	62 9f       	mul	r22, r18
    961a:	c0 01       	movw	r24, r0
    961c:	63 9f       	mul	r22, r19
    961e:	90 0d       	add	r25, r0
    9620:	72 9f       	mul	r23, r18
    9622:	90 0d       	add	r25, r0
    9624:	11 24       	eor	r1, r1
    9626:	80 50       	subi	r24, 0x00	; 0
    9628:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    962a:	29 2f       	mov	r18, r25
    962c:	33 27       	eor	r19, r19
    962e:	02 c0       	rjmp	.+4      	; 0x9634 <ProcessMusic+0x420>
    9630:	20 e0       	ldi	r18, 0x00	; 0
    9632:	30 e0       	ldi	r19, 0x00	; 0

			}else{
				uVol=0;
			}

			track->tremoloPos+=track->tremoloRate;
    9634:	8e 81       	ldd	r24, Y+6	; 0x06
    9636:	98 85       	ldd	r25, Y+8	; 0x08
    9638:	89 0f       	add	r24, r25
    963a:	8e 83       	std	Y+6, r24	; 0x06

		}else{
			uVol=0;
		}

		mixer.channels.all[trackNo].volume=(uVol&0xff);
    963c:	f8 01       	movw	r30, r16
    963e:	20 83       	st	Z, r18
	#endif
*/
	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9640:	f3 94       	inc	r15
    9642:	66 96       	adiw	r28, 0x16	; 22
    9644:	0a 5f       	subi	r16, 0xFA	; 250
    9646:	1f 4f       	sbci	r17, 0xFF	; 255
    9648:	f4 e0       	ldi	r31, 0x04	; 4
    964a:	ff 16       	cp	r15, r31
    964c:	09 f0       	breq	.+2      	; 0x9650 <ProcessMusic+0x43c>
    964e:	43 cf       	rjmp	.-378    	; 0x94d6 <ProcessMusic+0x2c2>
		}

		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}

}
    9650:	df 91       	pop	r29
    9652:	cf 91       	pop	r28
    9654:	1f 91       	pop	r17
    9656:	0f 91       	pop	r16
    9658:	ff 90       	pop	r15
    965a:	ef 90       	pop	r14
    965c:	df 90       	pop	r13
    965e:	bf 90       	pop	r11
    9660:	af 90       	pop	r10
    9662:	08 95       	ret

00009664 <TriggerFxChannel>:
		}
	}

	channel=channel0;

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;
    9664:	e8 2f       	mov	r30, r24
    9666:	f0 e0       	ldi	r31, 0x00	; 0
    9668:	26 e1       	ldi	r18, 0x16	; 22
    966a:	30 e0       	ldi	r19, 0x00	; 0
    966c:	df 01       	movw	r26, r30
    966e:	a2 9f       	mul	r26, r18
    9670:	f0 01       	movw	r30, r0
    9672:	a3 9f       	mul	r26, r19
    9674:	f0 0d       	add	r31, r0
    9676:	b2 9f       	mul	r27, r18
    9678:	f0 0d       	add	r31, r0
    967a:	11 24       	eor	r1, r1
    967c:	ee 5e       	subi	r30, 0xEE	; 238
    967e:	f1 4f       	sbci	r31, 0xF1	; 241
    9680:	90 81       	ld	r25, Z
    9682:	90 68       	ori	r25, 0x80	; 128
    9684:	90 83       	st	Z, r25
	TriggerCommon(channel,patch,volume,80);
    9686:	20 e5       	ldi	r18, 0x50	; 80
    9688:	0e 94 75 48 	call	0x90ea	; 0x90ea <TriggerCommon>

}
    968c:	08 95       	ret

0000968e <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    968e:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    9690:	64 2f       	mov	r22, r20
    9692:	0e 94 bd 45 	call	0x8b7a	; 0x8b7a <SetMixerWave>
}
    9696:	08 95       	ret
	...

00009700 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9700:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9702:	80 93 f1 0d 	sts	0x0DF1, r24
	ret
    9706:	08 95       	ret

00009708 <steptable>:
    9708:	22 00       	.word	0x0022	; ????
    970a:	24 00       	.word	0x0024	; ????
    970c:	26 00       	.word	0x0026	; ????
    970e:	28 00       	.word	0x0028	; ????
    9710:	2b 00       	.word	0x002b	; ????
    9712:	2d 00       	.word	0x002d	; ????
    9714:	30 00       	.word	0x0030	; ????
    9716:	33 00       	.word	0x0033	; ????
    9718:	36 00       	.word	0x0036	; ????
    971a:	39 00       	.word	0x0039	; ????
    971c:	3d 00       	.word	0x003d	; ????
    971e:	40 00       	.word	0x0040	; ????
    9720:	44 00       	.word	0x0044	; ????
    9722:	48 00       	.word	0x0048	; ????
    9724:	4c 00       	.word	0x004c	; ????
    9726:	51 00       	.word	0x0051	; ????
    9728:	56 00       	.word	0x0056	; ????
    972a:	5b 00       	.word	0x005b	; ????
    972c:	60 00       	.word	0x0060	; ????
    972e:	66 00       	.word	0x0066	; ????
    9730:	6c 00       	.word	0x006c	; ????
    9732:	73 00       	.word	0x0073	; ????
    9734:	79 00       	.word	0x0079	; ????
    9736:	81 00       	.word	0x0081	; ????
    9738:	88 00       	.word	0x0088	; ????
    973a:	90 00       	.word	0x0090	; ????
    973c:	99 00       	.word	0x0099	; ????
    973e:	a2 00       	.word	0x00a2	; ????
    9740:	ac 00       	.word	0x00ac	; ????
    9742:	b6 00       	.word	0x00b6	; ????
    9744:	c1 00       	.word	0x00c1	; ????
    9746:	cc 00       	.word	0x00cc	; ????
    9748:	d8 00       	.word	0x00d8	; ????
    974a:	e5 00       	.word	0x00e5	; ????
    974c:	f3 00       	.word	0x00f3	; ????
    974e:	01 01       	movw	r0, r2
    9750:	10 01       	movw	r2, r0
    9752:	21 01       	movw	r4, r2
    9754:	32 01       	movw	r6, r4
    9756:	44 01       	movw	r8, r8
    9758:	57 01       	movw	r10, r14
    975a:	6c 01       	movw	r12, r24
    975c:	81 01       	movw	r16, r2
    975e:	98 01       	movw	r18, r16
    9760:	b0 01       	movw	r22, r0
    9762:	ca 01       	movw	r24, r20
    9764:	e5 01       	movw	r28, r10
    9766:	02 02       	muls	r16, r18
    9768:	21 02       	muls	r18, r17
    976a:	41 02       	muls	r20, r17
    976c:	64 02       	muls	r22, r20
    976e:	88 02       	muls	r24, r24
    9770:	ae 02       	muls	r26, r30
    9772:	d7 02       	muls	r29, r23
    9774:	03 03       	mulsu	r16, r19
    9776:	30 03       	mulsu	r19, r16
    9778:	61 03       	mulsu	r22, r17
    977a:	94 03       	fmuls	r17, r20
    977c:	cb 03       	fmulsu	r20, r19
    977e:	05 04       	cpc	r0, r5
    9780:	42 04       	cpc	r4, r2
    9782:	83 04       	cpc	r8, r3
    9784:	c7 04       	cpc	r12, r7
    9786:	10 05       	cpc	r17, r0
    9788:	5d 05       	cpc	r21, r13
    978a:	af 05       	cpc	r26, r15
    978c:	05 06       	cpc	r0, r21
    978e:	61 06       	cpc	r6, r17
    9790:	c2 06       	cpc	r12, r18
    9792:	29 07       	cpc	r18, r25
    9794:	96 07       	cpc	r25, r22
    9796:	09 08       	sbc	r0, r9
    9798:	83 08       	sbc	r8, r3
    979a:	05 09       	sbc	r16, r5
    979c:	8e 09       	sbc	r24, r14
    979e:	20 0a       	sbc	r2, r16
    97a0:	ba 0a       	sbc	r11, r26
    97a2:	5d 0b       	sbc	r21, r29
    97a4:	0a 0c       	add	r0, r10
    97a6:	c1 0c       	add	r12, r1
    97a8:	84 0d       	add	r24, r4
    97aa:	51 0e       	add	r5, r17
    97ac:	2b 0f       	add	r18, r27
    97ae:	12 10       	cpse	r1, r2
    97b0:	07 11       	cpse	r16, r7
    97b2:	0a 12       	cpse	r0, r26
    97b4:	1d 13       	cpse	r17, r29
    97b6:	40 14       	cp	r4, r0
    97b8:	74 15       	cp	r23, r4
    97ba:	ba 16       	cp	r11, r26
    97bc:	14 18       	sub	r1, r4
    97be:	83 19       	sub	r24, r3
    97c0:	07 1b       	sub	r16, r23
    97c2:	a3 1c       	adc	r10, r3
    97c4:	57 1e       	adc	r5, r23
    97c6:	24 20       	and	r2, r4
    97c8:	0e 22       	and	r0, r30
    97ca:	14 24       	eor	r1, r4
    97cc:	39 26       	eor	r3, r25
    97ce:	7f 28       	or	r7, r15
    97d0:	e8 2a       	or	r14, r24
    97d2:	75 2d       	mov	r23, r5
    97d4:	29 30       	cpi	r18, 0x09	; 9
    97d6:	06 33       	cpi	r16, 0x36	; 54
    97d8:	0f 36       	cpi	r16, 0x6F	; 111
    97da:	45 39       	cpi	r20, 0x95	; 149
    97dc:	ad 3c       	cpi	r26, 0xCD	; 205
    97de:	49 40       	sbci	r20, 0x09	; 9
    97e0:	1b 44       	sbci	r17, 0x4B	; 75
    97e2:	28 48       	sbci	r18, 0x88	; 136
    97e4:	73 4c       	sbci	r23, 0xC3	; 195
    97e6:	fe 50       	subi	r31, 0x0E	; 14
    97e8:	cf 55       	subi	r28, 0x5F	; 95
    97ea:	ea 5a       	subi	r30, 0xAA	; 170
    97ec:	51 60       	ori	r21, 0x01	; 1
    97ee:	0c 66       	ori	r16, 0x6C	; 108
    97f0:	1d 6c       	ori	r17, 0xCD	; 205
    97f2:	8b 72       	andi	r24, 0x2B	; 43
    97f4:	5a 79       	andi	r21, 0x9A	; 154
    97f6:	92 80       	ldd	r9, Z+2	; 0x02
    97f8:	37 88       	ldd	r3, Z+23	; 0x17
    97fa:	50 90 e5 98 	lds	r5, 0x98E5
    97fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9800:	9f ab       	std	Y+55, r25	; 0x37
    9802:	d3 b5       	in	r29, 0x23	; 35
    9804:	a3 c0       	rjmp	.+326    	; 0x994c <waves+0x4c>
	...

00009900 <waves>:
    9900:	00 03       	mulsu	r16, r16
    9902:	06 09       	sbc	r16, r6
    9904:	0c 10       	cpse	r0, r12
    9906:	13 16       	cp	r1, r19
    9908:	19 1c       	adc	r1, r9
    990a:	1f 22       	and	r1, r31
    990c:	25 28       	or	r2, r5
    990e:	2b 2e       	mov	r2, r27
    9910:	31 33       	cpi	r19, 0x31	; 49
    9912:	36 39       	cpi	r19, 0x96	; 150
    9914:	3c 3f       	cpi	r19, 0xFC	; 252
    9916:	41 44       	sbci	r20, 0x41	; 65
    9918:	47 49       	sbci	r20, 0x97	; 151
    991a:	4c 4e       	sbci	r20, 0xEC	; 236
    991c:	51 53       	subi	r21, 0x31	; 49
    991e:	55 58       	subi	r21, 0x85	; 133
    9920:	5a 5c       	subi	r21, 0xCA	; 202
    9922:	5e 60       	ori	r21, 0x0E	; 14
    9924:	62 64       	ori	r22, 0x42	; 66
    9926:	66 68       	ori	r22, 0x86	; 134
    9928:	6a 6b       	ori	r22, 0xBA	; 186
    992a:	6d 6f       	ori	r22, 0xFD	; 253
    992c:	70 71       	andi	r23, 0x10	; 16
    992e:	73 74       	andi	r23, 0x43	; 67
    9930:	75 76       	andi	r23, 0x65	; 101
    9932:	78 79       	andi	r23, 0x98	; 152
    9934:	7a 7a       	andi	r23, 0xAA	; 170
    9936:	7b 7c       	andi	r23, 0xCB	; 203
    9938:	7d 7d       	andi	r23, 0xDD	; 221
    993a:	7e 7e       	andi	r23, 0xEE	; 238
    993c:	7e 7f       	andi	r23, 0xFE	; 254
    993e:	7f 7f       	andi	r23, 0xFF	; 255
    9940:	7f 7f       	andi	r23, 0xFF	; 255
    9942:	7f 7f       	andi	r23, 0xFF	; 255
    9944:	7e 7e       	andi	r23, 0xEE	; 238
    9946:	7e 7d       	andi	r23, 0xDE	; 222
    9948:	7d 7c       	andi	r23, 0xCD	; 205
    994a:	7b 7a       	andi	r23, 0xAB	; 171
    994c:	7a 79       	andi	r23, 0x9A	; 154
    994e:	78 76       	andi	r23, 0x68	; 104
    9950:	75 74       	andi	r23, 0x45	; 69
    9952:	73 71       	andi	r23, 0x13	; 19
    9954:	70 6f       	ori	r23, 0xF0	; 240
    9956:	6d 6b       	ori	r22, 0xBD	; 189
    9958:	6a 68       	ori	r22, 0x8A	; 138
    995a:	66 64       	ori	r22, 0x46	; 70
    995c:	62 60       	ori	r22, 0x02	; 2
    995e:	5e 5c       	subi	r21, 0xCE	; 206
    9960:	5a 58       	subi	r21, 0x8A	; 138
    9962:	55 53       	subi	r21, 0x35	; 53
    9964:	51 4e       	sbci	r21, 0xE1	; 225
    9966:	4c 49       	sbci	r20, 0x9C	; 156
    9968:	47 44       	sbci	r20, 0x47	; 71
    996a:	41 3f       	cpi	r20, 0xF1	; 241
    996c:	3c 39       	cpi	r19, 0x9C	; 156
    996e:	36 33       	cpi	r19, 0x36	; 54
    9970:	31 2e       	mov	r3, r17
    9972:	2b 28       	or	r2, r11
    9974:	25 22       	and	r2, r21
    9976:	1f 1c       	adc	r1, r15
    9978:	19 16       	cp	r1, r25
    997a:	13 10       	cpse	r1, r3
    997c:	0c 09       	sbc	r16, r12
    997e:	06 03       	mulsu	r16, r22
    9980:	00 fd       	sbrc	r16, 0
    9982:	fa f7       	brpl	.-2      	; 0x9982 <waves+0x82>
    9984:	f4 f0       	brlt	.+60     	; 0x99c2 <waves+0xc2>
    9986:	ed ea       	ldi	r30, 0xAD	; 173
    9988:	e7 e4       	ldi	r30, 0x47	; 71
    998a:	e1 de       	rcall	.-574    	; 0x974e <steptable+0x46>
    998c:	db d8       	rcall	.-3658   	; 0x8b44 <SetMixerNote+0x8>
    998e:	d5 d2       	rcall	.+1450   	; 0x9f3a <MoveSprite+0x6>
    9990:	cf cd       	rjmp	.-1122   	; 0x9530 <ProcessMusic+0x31c>
    9992:	ca c7       	rjmp	.+3988   	; 0xa928 <snoblock_crush+0x66>
    9994:	c4 c1       	rjmp	.+904    	; 0x9d1e <waves+0x41e>
    9996:	bf bc       	out	0x2f, r11	; 47
    9998:	b9 b7       	in	r27, 0x39	; 57
    999a:	b4 b2       	in	r11, 0x14	; 20
    999c:	af ad       	ldd	r26, Y+63	; 0x3f
    999e:	ab a8       	ldd	r10, Y+51	; 0x33
    99a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    99a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    99a4:	9e 9c       	mul	r9, r14
    99a6:	9a 98       	cbi	0x13, 2	; 19
    99a8:	96 95       	lsr	r25
    99aa:	93 91       	.word	0x9193	; ????
    99ac:	90 8f       	std	Z+24, r25	; 0x18
    99ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    99b0:	8b 8a       	std	Y+19, r8	; 0x13
    99b2:	88 87       	std	Y+8, r24	; 0x08
    99b4:	86 86       	std	Z+14, r8	; 0x0e
    99b6:	85 84       	ldd	r8, Z+13	; 0x0d
    99b8:	83 83       	std	Z+3, r24	; 0x03
    99ba:	82 82       	std	Z+2, r8	; 0x02
    99bc:	82 81       	ldd	r24, Z+2	; 0x02
    99be:	81 81       	ldd	r24, Z+1	; 0x01
    99c0:	81 81       	ldd	r24, Z+1	; 0x01
    99c2:	81 81       	ldd	r24, Z+1	; 0x01
    99c4:	82 82       	std	Z+2, r8	; 0x02
    99c6:	82 83       	std	Z+2, r24	; 0x02
    99c8:	83 84       	ldd	r8, Z+11	; 0x0b
    99ca:	85 86       	std	Z+13, r8	; 0x0d
    99cc:	86 87       	std	Z+14, r24	; 0x0e
    99ce:	88 8a       	std	Y+16, r8	; 0x10
    99d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    99d2:	8d 8f       	std	Y+29, r24	; 0x1d
    99d4:	90 91 93 95 	lds	r25, 0x9593
    99d8:	96 98       	cbi	0x12, 6	; 18
    99da:	9a 9c       	mul	r9, r10
    99dc:	9e a0       	ldd	r9, Y+38	; 0x26
    99de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    99e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    99e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    99e4:	af b2       	in	r10, 0x1f	; 31
    99e6:	b4 b7       	in	r27, 0x34	; 52
    99e8:	b9 bc       	out	0x29, r11	; 41
    99ea:	bf c1       	rjmp	.+894    	; 0x9d6a <waves+0x46a>
    99ec:	c4 c7       	rjmp	.+3976   	; 0xa976 <next_player+0x18>
    99ee:	ca cd       	rjmp	.-1132   	; 0x9584 <ProcessMusic+0x370>
    99f0:	cf d2       	rcall	.+1438   	; 0x9f90 <MoveSprite+0x5c>
    99f2:	d5 d8       	rcall	.-3670   	; 0x8b9e <smw1+0x4>
    99f4:	db de       	rcall	.-586    	; 0x97ac <steptable+0xa4>
    99f6:	e1 e4       	ldi	r30, 0x41	; 65
    99f8:	e7 ea       	ldi	r30, 0xA7	; 167
    99fa:	ed f0       	brhs	.+58     	; 0x9a36 <waves+0x136>
    99fc:	f4 f7       	brge	.-4      	; 0x99fa <waves+0xfa>
    99fe:	fa fd       	.word	0xfdfa	; ????
    9a00:	80 81       	ld	r24, Z
    9a02:	82 83       	std	Z+2, r24	; 0x02
    9a04:	84 85       	ldd	r24, Z+12	; 0x0c
    9a06:	86 87       	std	Z+14, r24	; 0x0e
    9a08:	88 89       	ldd	r24, Y+16	; 0x10
    9a0a:	8a 8b       	std	Y+18, r24	; 0x12
    9a0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9a0e:	8e 8f       	std	Y+30, r24	; 0x1e
    9a10:	90 91 92 93 	lds	r25, 0x9392
    9a14:	94 95       	.word	0x9594	; ????
    9a16:	96 97       	sbiw	r26, 0x26	; 38
    9a18:	98 99       	sbic	0x13, 0	; 19
    9a1a:	9a 9b       	sbis	0x13, 2	; 19
    9a1c:	9c 9d       	mul	r25, r12
    9a1e:	9e 9f       	mul	r25, r30
    9a20:	a0 a1       	ldd	r26, Z+32	; 0x20
    9a22:	a2 a3       	std	Z+34, r26	; 0x22
    9a24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9a26:	a6 a7       	std	Z+46, r26	; 0x2e
    9a28:	a8 a9       	ldd	r26, Y+48	; 0x30
    9a2a:	aa ab       	std	Y+50, r26	; 0x32
    9a2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    9a2e:	ae af       	std	Y+62, r26	; 0x3e
    9a30:	b0 b1       	in	r27, 0x00	; 0
    9a32:	b2 b3       	in	r27, 0x12	; 18
    9a34:	b4 b5       	in	r27, 0x24	; 36
    9a36:	b6 b7       	in	r27, 0x36	; 54
    9a38:	b8 b9       	out	0x08, r27	; 8
    9a3a:	ba bb       	out	0x1a, r27	; 26
    9a3c:	bc bd       	out	0x2c, r27	; 44
    9a3e:	be bf       	out	0x3e, r27	; 62
    9a40:	c0 c1       	rjmp	.+896    	; 0x9dc2 <waves+0x4c2>
    9a42:	c2 c3       	rjmp	.+1924   	; 0xa1c8 <DKMapSprite+0x6>
    9a44:	c4 c5       	rjmp	.+2952   	; 0xa5ce <player_walk+0x54>
    9a46:	c6 c7       	rjmp	.+3980   	; 0xa9d4 <player_die+0x36>
    9a48:	c8 c9       	rjmp	.-3184   	; 0x8dda <EepromWriteBlock+0x14>
    9a4a:	ca cb       	rjmp	.-2156   	; 0x91e0 <TriggerNote+0x42>
    9a4c:	cc cd       	rjmp	.-1128   	; 0x95e6 <ProcessMusic+0x3d2>
    9a4e:	ce cf       	rjmp	.-100    	; 0x99ec <waves+0xec>
    9a50:	d0 d1       	rcall	.+928    	; 0x9df2 <waves+0x4f2>
    9a52:	d2 d3       	rcall	.+1956   	; 0xa1f8 <DKMapSprite+0x36>
    9a54:	d4 d5       	rcall	.+2984   	; 0xa5fe <check_supas+0x16>
    9a56:	d6 d7       	rcall	.+4012   	; 0xaa04 <player_die+0x66>
    9a58:	d8 d9       	rcall	.-3152   	; 0x8e0a <EepromWriteBlock+0x44>
    9a5a:	da db       	rcall	.-2124   	; 0x9210 <TriggerNote+0x72>
    9a5c:	dc dd       	rcall	.-1096   	; 0x9616 <ProcessMusic+0x402>
    9a5e:	de df       	rcall	.-68     	; 0x9a1c <waves+0x11c>
    9a60:	e0 e1       	ldi	r30, 0x10	; 16
    9a62:	e2 e3       	ldi	r30, 0x32	; 50
    9a64:	e4 e5       	ldi	r30, 0x54	; 84
    9a66:	e6 e7       	ldi	r30, 0x76	; 118
    9a68:	e8 e9       	ldi	r30, 0x98	; 152
    9a6a:	ea eb       	ldi	r30, 0xBA	; 186
    9a6c:	ec ed       	ldi	r30, 0xDC	; 220
    9a6e:	ee ef       	ldi	r30, 0xFE	; 254
    9a70:	f0 f1       	brcs	.+124    	; 0x9aee <waves+0x1ee>
    9a72:	f2 f3       	brmi	.-4      	; 0x9a70 <waves+0x170>
    9a74:	f4 f5       	brge	.+124    	; 0x9af2 <waves+0x1f2>
    9a76:	f6 f7       	brtc	.-4      	; 0x9a74 <waves+0x174>
    9a78:	f8 f9       	.word	0xf9f8	; ????
    9a7a:	fa fb       	.word	0xfbfa	; ????
    9a7c:	fc fd       	.word	0xfdfc	; ????
    9a7e:	fe ff       	.word	0xfffe	; ????
    9a80:	00 01       	movw	r0, r0
    9a82:	02 03       	mulsu	r16, r18
    9a84:	04 05       	cpc	r16, r4
    9a86:	06 07       	cpc	r16, r22
    9a88:	08 09       	sbc	r16, r8
    9a8a:	0a 0b       	sbc	r16, r26
    9a8c:	0c 0d       	add	r16, r12
    9a8e:	0e 0f       	add	r16, r30
    9a90:	10 11       	cpse	r17, r0
    9a92:	12 13       	cpse	r17, r18
    9a94:	14 15       	cp	r17, r4
    9a96:	16 17       	cp	r17, r22
    9a98:	18 19       	sub	r17, r8
    9a9a:	1a 1b       	sub	r17, r26
    9a9c:	1c 1d       	adc	r17, r12
    9a9e:	1e 1f       	adc	r17, r30
    9aa0:	20 21       	and	r18, r0
    9aa2:	22 23       	and	r18, r18
    9aa4:	24 25       	eor	r18, r4
    9aa6:	26 27       	eor	r18, r22
    9aa8:	28 29       	or	r18, r8
    9aaa:	2a 2b       	or	r18, r26
    9aac:	2c 2d       	mov	r18, r12
    9aae:	2e 2f       	mov	r18, r30
    9ab0:	30 31       	cpi	r19, 0x10	; 16
    9ab2:	32 33       	cpi	r19, 0x32	; 50
    9ab4:	34 35       	cpi	r19, 0x54	; 84
    9ab6:	36 37       	cpi	r19, 0x76	; 118
    9ab8:	38 39       	cpi	r19, 0x98	; 152
    9aba:	3a 3b       	cpi	r19, 0xBA	; 186
    9abc:	3c 3d       	cpi	r19, 0xDC	; 220
    9abe:	3e 3f       	cpi	r19, 0xFE	; 254
    9ac0:	40 41       	sbci	r20, 0x10	; 16
    9ac2:	42 43       	sbci	r20, 0x32	; 50
    9ac4:	44 45       	sbci	r20, 0x54	; 84
    9ac6:	46 47       	sbci	r20, 0x76	; 118
    9ac8:	48 49       	sbci	r20, 0x98	; 152
    9aca:	4a 4b       	sbci	r20, 0xBA	; 186
    9acc:	4c 4d       	sbci	r20, 0xDC	; 220
    9ace:	4e 4f       	sbci	r20, 0xFE	; 254
    9ad0:	50 51       	subi	r21, 0x10	; 16
    9ad2:	52 53       	subi	r21, 0x32	; 50
    9ad4:	54 55       	subi	r21, 0x54	; 84
    9ad6:	56 57       	subi	r21, 0x76	; 118
    9ad8:	58 59       	subi	r21, 0x98	; 152
    9ada:	5a 5b       	subi	r21, 0xBA	; 186
    9adc:	5c 5d       	subi	r21, 0xDC	; 220
    9ade:	5e 5f       	subi	r21, 0xFE	; 254
    9ae0:	60 61       	ori	r22, 0x10	; 16
    9ae2:	62 63       	ori	r22, 0x32	; 50
    9ae4:	64 65       	ori	r22, 0x54	; 84
    9ae6:	66 67       	ori	r22, 0x76	; 118
    9ae8:	68 69       	ori	r22, 0x98	; 152
    9aea:	6a 6b       	ori	r22, 0xBA	; 186
    9aec:	6c 6d       	ori	r22, 0xDC	; 220
    9aee:	6e 6f       	ori	r22, 0xFE	; 254
    9af0:	70 71       	andi	r23, 0x10	; 16
    9af2:	72 73       	andi	r23, 0x32	; 50
    9af4:	74 75       	andi	r23, 0x54	; 84
    9af6:	76 77       	andi	r23, 0x76	; 118
    9af8:	78 79       	andi	r23, 0x98	; 152
    9afa:	7a 7b       	andi	r23, 0xBA	; 186
    9afc:	7c 7d       	andi	r23, 0xDC	; 220
    9afe:	7e 7f       	andi	r23, 0xFE	; 254
    9b00:	00 02       	muls	r16, r16
    9b02:	04 06       	cpc	r0, r20
    9b04:	08 0a       	sbc	r0, r24
    9b06:	0c 0e       	add	r0, r28
    9b08:	10 12       	cpse	r1, r16
    9b0a:	14 16       	cp	r1, r20
    9b0c:	18 1a       	sub	r1, r24
    9b0e:	1c 1e       	adc	r1, r28
    9b10:	20 22       	and	r2, r16
    9b12:	24 26       	eor	r2, r20
    9b14:	28 2a       	or	r2, r24
    9b16:	2c 2e       	mov	r2, r28
    9b18:	30 32       	cpi	r19, 0x20	; 32
    9b1a:	34 36       	cpi	r19, 0x64	; 100
    9b1c:	38 3a       	cpi	r19, 0xA8	; 168
    9b1e:	3c 3e       	cpi	r19, 0xEC	; 236
    9b20:	40 42       	sbci	r20, 0x20	; 32
    9b22:	44 46       	sbci	r20, 0x64	; 100
    9b24:	48 4a       	sbci	r20, 0xA8	; 168
    9b26:	4c 4e       	sbci	r20, 0xEC	; 236
    9b28:	50 52       	subi	r21, 0x20	; 32
    9b2a:	54 56       	subi	r21, 0x64	; 100
    9b2c:	58 5a       	subi	r21, 0xA8	; 168
    9b2e:	5c 5e       	subi	r21, 0xEC	; 236
    9b30:	60 62       	ori	r22, 0x20	; 32
    9b32:	64 66       	ori	r22, 0x64	; 100
    9b34:	68 6a       	ori	r22, 0xA8	; 168
    9b36:	6c 6e       	ori	r22, 0xEC	; 236
    9b38:	70 72       	andi	r23, 0x20	; 32
    9b3a:	74 76       	andi	r23, 0x64	; 100
    9b3c:	78 7a       	andi	r23, 0xA8	; 168
    9b3e:	7c 7e       	andi	r23, 0xEC	; 236
    9b40:	7f 7d       	andi	r23, 0xDF	; 223
    9b42:	7b 79       	andi	r23, 0x9B	; 155
    9b44:	77 75       	andi	r23, 0x57	; 87
    9b46:	73 71       	andi	r23, 0x13	; 19
    9b48:	6f 6d       	ori	r22, 0xDF	; 223
    9b4a:	6b 69       	ori	r22, 0x9B	; 155
    9b4c:	67 65       	ori	r22, 0x57	; 87
    9b4e:	63 61       	ori	r22, 0x13	; 19
    9b50:	5f 5d       	subi	r21, 0xDF	; 223
    9b52:	5b 59       	subi	r21, 0x9B	; 155
    9b54:	57 55       	subi	r21, 0x57	; 87
    9b56:	53 51       	subi	r21, 0x13	; 19
    9b58:	4f 4d       	sbci	r20, 0xDF	; 223
    9b5a:	4b 49       	sbci	r20, 0x9B	; 155
    9b5c:	47 45       	sbci	r20, 0x57	; 87
    9b5e:	43 41       	sbci	r20, 0x13	; 19
    9b60:	3f 3d       	cpi	r19, 0xDF	; 223
    9b62:	3b 39       	cpi	r19, 0x9B	; 155
    9b64:	37 35       	cpi	r19, 0x57	; 87
    9b66:	33 31       	cpi	r19, 0x13	; 19
    9b68:	2f 2d       	mov	r18, r15
    9b6a:	2b 29       	or	r18, r11
    9b6c:	27 25       	eor	r18, r7
    9b6e:	23 21       	and	r18, r3
    9b70:	1f 1d       	adc	r17, r15
    9b72:	1b 19       	sub	r17, r11
    9b74:	17 15       	cp	r17, r7
    9b76:	13 11       	cpse	r17, r3
    9b78:	0f 0d       	add	r16, r15
    9b7a:	0b 09       	sbc	r16, r11
    9b7c:	07 05       	cpc	r16, r7
    9b7e:	03 01       	movw	r0, r6
    9b80:	ff fd       	.word	0xfdff	; ????
    9b82:	fb f9       	.word	0xf9fb	; ????
    9b84:	f7 f5       	brid	.+124    	; 0x9c02 <waves+0x302>
    9b86:	f3 f1       	brvs	.+124    	; 0x9c04 <waves+0x304>
    9b88:	ef ed       	ldi	r30, 0xDF	; 223
    9b8a:	eb e9       	ldi	r30, 0x9B	; 155
    9b8c:	e7 e5       	ldi	r30, 0x57	; 87
    9b8e:	e3 e1       	ldi	r30, 0x13	; 19
    9b90:	df dd       	rcall	.-1090   	; 0x9750 <steptable+0x48>
    9b92:	db d9       	rcall	.-3146   	; 0x8f4a <PatchCommand11+0x28>
    9b94:	d7 d5       	rcall	.+2990   	; 0xa744 <check_supas+0x15c>
    9b96:	d3 d1       	rcall	.+934    	; 0x9f3e <MoveSprite+0xa>
    9b98:	cf cd       	rjmp	.-1122   	; 0x9738 <steptable+0x30>
    9b9a:	cb c9       	rjmp	.-3178   	; 0x8f32 <PatchCommand11+0x10>
    9b9c:	c7 c5       	rjmp	.+2958   	; 0xa72c <check_supas+0x144>
    9b9e:	c3 c1       	rjmp	.+902    	; 0x9f26 <RestoreBackground+0x26>
    9ba0:	bf bd       	out	0x2f, r27	; 47
    9ba2:	bb b9       	out	0x0b, r27	; 11
    9ba4:	b7 b5       	in	r27, 0x27	; 39
    9ba6:	b3 b1       	in	r27, 0x03	; 3
    9ba8:	af ad       	ldd	r26, Y+63	; 0x3f
    9baa:	ab a9       	ldd	r26, Y+51	; 0x33
    9bac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9bae:	a3 a1       	ldd	r26, Z+35	; 0x23
    9bb0:	9f 9d       	mul	r25, r15
    9bb2:	9b 99       	sbic	0x13, 3	; 19
    9bb4:	97 95       	ror	r25
    9bb6:	93 91       	.word	0x9193	; ????
    9bb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9bba:	8b 89       	ldd	r24, Y+19	; 0x13
    9bbc:	87 85       	ldd	r24, Z+15	; 0x0f
    9bbe:	83 81       	ldd	r24, Z+3	; 0x03
    9bc0:	80 82       	st	Z, r8
    9bc2:	84 86       	std	Z+12, r8	; 0x0c
    9bc4:	88 8a       	std	Y+16, r8	; 0x10
    9bc6:	8c 8e       	std	Y+28, r8	; 0x1c
    9bc8:	90 92 94 96 	sts	0x9694, r9
    9bcc:	98 9a       	sbi	0x13, 0	; 19
    9bce:	9c 9e       	mul	r9, r28
    9bd0:	a0 a2       	std	Z+32, r10	; 0x20
    9bd2:	a4 a6       	std	Z+44, r10	; 0x2c
    9bd4:	a8 aa       	std	Y+48, r10	; 0x30
    9bd6:	ac ae       	std	Y+60, r10	; 0x3c
    9bd8:	b0 b2       	in	r11, 0x10	; 16
    9bda:	b4 b6       	in	r11, 0x34	; 52
    9bdc:	b8 ba       	out	0x18, r11	; 24
    9bde:	bc be       	out	0x3c, r11	; 60
    9be0:	c0 c2       	rjmp	.+1408   	; 0xa162 <ProcessSprites+0x156>
    9be2:	c4 c6       	rjmp	.+3464   	; 0xa96c <next_player+0xe>
    9be4:	c8 ca       	rjmp	.-2672   	; 0x9176 <TriggerCommon+0x8c>
    9be6:	cc ce       	rjmp	.-616    	; 0x9980 <waves+0x80>
    9be8:	d0 d2       	rcall	.+1440   	; 0xa18a <ProcessSprites+0x17e>
    9bea:	d4 d6       	rcall	.+3496   	; 0xa994 <next_player+0x36>
    9bec:	d8 da       	rcall	.-2640   	; 0x919e <TriggerNote>
    9bee:	dc de       	rcall	.-584    	; 0x99a8 <waves+0xa8>
    9bf0:	e0 e2       	ldi	r30, 0x20	; 32
    9bf2:	e4 e6       	ldi	r30, 0x64	; 100
    9bf4:	e8 ea       	ldi	r30, 0xA8	; 168
    9bf6:	ec ee       	ldi	r30, 0xEC	; 236
    9bf8:	f0 f2       	brcs	.-68     	; 0x9bb6 <waves+0x2b6>
    9bfa:	f4 f6       	brge	.-68     	; 0x9bb8 <waves+0x2b8>
    9bfc:	f8 fa       	.word	0xfaf8	; ????
    9bfe:	fc fe       	.word	0xfefc	; ????
    9c00:	7f 7f       	andi	r23, 0xFF	; 255
    9c02:	7f 7f       	andi	r23, 0xFF	; 255
    9c04:	7f 7f       	andi	r23, 0xFF	; 255
    9c06:	7f 7f       	andi	r23, 0xFF	; 255
    9c08:	7f 7f       	andi	r23, 0xFF	; 255
    9c0a:	7f 7f       	andi	r23, 0xFF	; 255
    9c0c:	7f 7f       	andi	r23, 0xFF	; 255
    9c0e:	7f 7f       	andi	r23, 0xFF	; 255
    9c10:	7f 7f       	andi	r23, 0xFF	; 255
    9c12:	7f 7f       	andi	r23, 0xFF	; 255
    9c14:	7f 7f       	andi	r23, 0xFF	; 255
    9c16:	7f 7f       	andi	r23, 0xFF	; 255
    9c18:	7f 7f       	andi	r23, 0xFF	; 255
    9c1a:	7f 7f       	andi	r23, 0xFF	; 255
    9c1c:	7f 7f       	andi	r23, 0xFF	; 255
    9c1e:	7f 7f       	andi	r23, 0xFF	; 255
    9c20:	7f 7f       	andi	r23, 0xFF	; 255
    9c22:	7f 7f       	andi	r23, 0xFF	; 255
    9c24:	7f 7f       	andi	r23, 0xFF	; 255
    9c26:	7f 7f       	andi	r23, 0xFF	; 255
    9c28:	7f 7f       	andi	r23, 0xFF	; 255
    9c2a:	7f 7f       	andi	r23, 0xFF	; 255
    9c2c:	7f 7f       	andi	r23, 0xFF	; 255
    9c2e:	7f 7f       	andi	r23, 0xFF	; 255
    9c30:	7f 7f       	andi	r23, 0xFF	; 255
    9c32:	7f 7f       	andi	r23, 0xFF	; 255
    9c34:	7f 7f       	andi	r23, 0xFF	; 255
    9c36:	7f 7f       	andi	r23, 0xFF	; 255
    9c38:	7f 7f       	andi	r23, 0xFF	; 255
    9c3a:	7f 7f       	andi	r23, 0xFF	; 255
    9c3c:	7f 7f       	andi	r23, 0xFF	; 255
    9c3e:	7f 7f       	andi	r23, 0xFF	; 255
    9c40:	80 80       	ld	r8, Z
    9c42:	80 80       	ld	r8, Z
    9c44:	80 80       	ld	r8, Z
    9c46:	80 80       	ld	r8, Z
    9c48:	80 80       	ld	r8, Z
    9c4a:	80 80       	ld	r8, Z
    9c4c:	80 80       	ld	r8, Z
    9c4e:	80 80       	ld	r8, Z
    9c50:	80 80       	ld	r8, Z
    9c52:	80 80       	ld	r8, Z
    9c54:	80 80       	ld	r8, Z
    9c56:	80 80       	ld	r8, Z
    9c58:	80 80       	ld	r8, Z
    9c5a:	80 80       	ld	r8, Z
    9c5c:	80 80       	ld	r8, Z
    9c5e:	80 80       	ld	r8, Z
    9c60:	80 80       	ld	r8, Z
    9c62:	80 80       	ld	r8, Z
    9c64:	80 80       	ld	r8, Z
    9c66:	80 80       	ld	r8, Z
    9c68:	80 80       	ld	r8, Z
    9c6a:	80 80       	ld	r8, Z
    9c6c:	80 80       	ld	r8, Z
    9c6e:	80 80       	ld	r8, Z
    9c70:	80 80       	ld	r8, Z
    9c72:	80 80       	ld	r8, Z
    9c74:	80 80       	ld	r8, Z
    9c76:	80 80       	ld	r8, Z
    9c78:	80 80       	ld	r8, Z
    9c7a:	80 80       	ld	r8, Z
    9c7c:	80 80       	ld	r8, Z
    9c7e:	80 80       	ld	r8, Z
    9c80:	80 80       	ld	r8, Z
    9c82:	80 80       	ld	r8, Z
    9c84:	80 80       	ld	r8, Z
    9c86:	80 80       	ld	r8, Z
    9c88:	80 80       	ld	r8, Z
    9c8a:	80 80       	ld	r8, Z
    9c8c:	80 80       	ld	r8, Z
    9c8e:	80 80       	ld	r8, Z
    9c90:	80 80       	ld	r8, Z
    9c92:	80 80       	ld	r8, Z
    9c94:	80 80       	ld	r8, Z
    9c96:	80 80       	ld	r8, Z
    9c98:	80 80       	ld	r8, Z
    9c9a:	80 80       	ld	r8, Z
    9c9c:	80 80       	ld	r8, Z
    9c9e:	80 80       	ld	r8, Z
    9ca0:	80 80       	ld	r8, Z
    9ca2:	80 80       	ld	r8, Z
    9ca4:	80 80       	ld	r8, Z
    9ca6:	80 80       	ld	r8, Z
    9ca8:	80 80       	ld	r8, Z
    9caa:	80 80       	ld	r8, Z
    9cac:	80 80       	ld	r8, Z
    9cae:	80 80       	ld	r8, Z
    9cb0:	80 80       	ld	r8, Z
    9cb2:	80 80       	ld	r8, Z
    9cb4:	80 80       	ld	r8, Z
    9cb6:	80 80       	ld	r8, Z
    9cb8:	80 80       	ld	r8, Z
    9cba:	80 80       	ld	r8, Z
    9cbc:	80 80       	ld	r8, Z
    9cbe:	80 80       	ld	r8, Z
    9cc0:	80 80       	ld	r8, Z
    9cc2:	80 80       	ld	r8, Z
    9cc4:	80 80       	ld	r8, Z
    9cc6:	80 80       	ld	r8, Z
    9cc8:	80 80       	ld	r8, Z
    9cca:	80 80       	ld	r8, Z
    9ccc:	80 80       	ld	r8, Z
    9cce:	80 80       	ld	r8, Z
    9cd0:	80 80       	ld	r8, Z
    9cd2:	80 80       	ld	r8, Z
    9cd4:	80 80       	ld	r8, Z
    9cd6:	80 80       	ld	r8, Z
    9cd8:	80 80       	ld	r8, Z
    9cda:	80 80       	ld	r8, Z
    9cdc:	80 80       	ld	r8, Z
    9cde:	80 80       	ld	r8, Z
    9ce0:	80 80       	ld	r8, Z
    9ce2:	80 80       	ld	r8, Z
    9ce4:	80 80       	ld	r8, Z
    9ce6:	80 80       	ld	r8, Z
    9ce8:	80 80       	ld	r8, Z
    9cea:	80 80       	ld	r8, Z
    9cec:	80 80       	ld	r8, Z
    9cee:	80 80       	ld	r8, Z
    9cf0:	80 80       	ld	r8, Z
    9cf2:	80 80       	ld	r8, Z
    9cf4:	80 80       	ld	r8, Z
    9cf6:	80 80       	ld	r8, Z
    9cf8:	80 80       	ld	r8, Z
    9cfa:	80 80       	ld	r8, Z
    9cfc:	80 80       	ld	r8, Z
    9cfe:	80 80       	ld	r8, Z
    9d00:	7f 7f       	andi	r23, 0xFF	; 255
    9d02:	7f 7f       	andi	r23, 0xFF	; 255
    9d04:	7f 7f       	andi	r23, 0xFF	; 255
    9d06:	7f 7f       	andi	r23, 0xFF	; 255
    9d08:	7f 7f       	andi	r23, 0xFF	; 255
    9d0a:	7f 7f       	andi	r23, 0xFF	; 255
    9d0c:	7f 7f       	andi	r23, 0xFF	; 255
    9d0e:	7f 7f       	andi	r23, 0xFF	; 255
    9d10:	7f 7f       	andi	r23, 0xFF	; 255
    9d12:	7f 7f       	andi	r23, 0xFF	; 255
    9d14:	7f 7f       	andi	r23, 0xFF	; 255
    9d16:	7f 7f       	andi	r23, 0xFF	; 255
    9d18:	7f 7f       	andi	r23, 0xFF	; 255
    9d1a:	7f 7f       	andi	r23, 0xFF	; 255
    9d1c:	7f 7f       	andi	r23, 0xFF	; 255
    9d1e:	7f 7f       	andi	r23, 0xFF	; 255
    9d20:	7f 7f       	andi	r23, 0xFF	; 255
    9d22:	7f 7f       	andi	r23, 0xFF	; 255
    9d24:	7f 7f       	andi	r23, 0xFF	; 255
    9d26:	7f 7f       	andi	r23, 0xFF	; 255
    9d28:	7f 7f       	andi	r23, 0xFF	; 255
    9d2a:	7f 7f       	andi	r23, 0xFF	; 255
    9d2c:	7f 7f       	andi	r23, 0xFF	; 255
    9d2e:	7f 7f       	andi	r23, 0xFF	; 255
    9d30:	7f 7f       	andi	r23, 0xFF	; 255
    9d32:	7f 7f       	andi	r23, 0xFF	; 255
    9d34:	7f 7f       	andi	r23, 0xFF	; 255
    9d36:	7f 7f       	andi	r23, 0xFF	; 255
    9d38:	7f 7f       	andi	r23, 0xFF	; 255
    9d3a:	7f 7f       	andi	r23, 0xFF	; 255
    9d3c:	7f 7f       	andi	r23, 0xFF	; 255
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7f 7f       	andi	r23, 0xFF	; 255
    9d46:	7f 7f       	andi	r23, 0xFF	; 255
    9d48:	7f 7f       	andi	r23, 0xFF	; 255
    9d4a:	7f 7f       	andi	r23, 0xFF	; 255
    9d4c:	7f 7f       	andi	r23, 0xFF	; 255
    9d4e:	7f 7f       	andi	r23, 0xFF	; 255
    9d50:	7f 7f       	andi	r23, 0xFF	; 255
    9d52:	7f 7f       	andi	r23, 0xFF	; 255
    9d54:	7f 7f       	andi	r23, 0xFF	; 255
    9d56:	7f 7f       	andi	r23, 0xFF	; 255
    9d58:	7f 7f       	andi	r23, 0xFF	; 255
    9d5a:	7f 7f       	andi	r23, 0xFF	; 255
    9d5c:	7f 7f       	andi	r23, 0xFF	; 255
    9d5e:	7f 7f       	andi	r23, 0xFF	; 255
    9d60:	7f 7f       	andi	r23, 0xFF	; 255
    9d62:	7f 7f       	andi	r23, 0xFF	; 255
    9d64:	7f 7f       	andi	r23, 0xFF	; 255
    9d66:	7f 7f       	andi	r23, 0xFF	; 255
    9d68:	7f 7f       	andi	r23, 0xFF	; 255
    9d6a:	7f 7f       	andi	r23, 0xFF	; 255
    9d6c:	7f 7f       	andi	r23, 0xFF	; 255
    9d6e:	7f 7f       	andi	r23, 0xFF	; 255
    9d70:	7f 7f       	andi	r23, 0xFF	; 255
    9d72:	7f 7f       	andi	r23, 0xFF	; 255
    9d74:	7f 7f       	andi	r23, 0xFF	; 255
    9d76:	7f 7f       	andi	r23, 0xFF	; 255
    9d78:	7f 7f       	andi	r23, 0xFF	; 255
    9d7a:	7f 7f       	andi	r23, 0xFF	; 255
    9d7c:	7f 7f       	andi	r23, 0xFF	; 255
    9d7e:	7f 7f       	andi	r23, 0xFF	; 255
    9d80:	80 80       	ld	r8, Z
    9d82:	80 80       	ld	r8, Z
    9d84:	80 80       	ld	r8, Z
    9d86:	80 80       	ld	r8, Z
    9d88:	80 80       	ld	r8, Z
    9d8a:	80 80       	ld	r8, Z
    9d8c:	80 80       	ld	r8, Z
    9d8e:	80 80       	ld	r8, Z
    9d90:	80 80       	ld	r8, Z
    9d92:	80 80       	ld	r8, Z
    9d94:	80 80       	ld	r8, Z
    9d96:	80 80       	ld	r8, Z
    9d98:	80 80       	ld	r8, Z
    9d9a:	80 80       	ld	r8, Z
    9d9c:	80 80       	ld	r8, Z
    9d9e:	80 80       	ld	r8, Z
    9da0:	80 80       	ld	r8, Z
    9da2:	80 80       	ld	r8, Z
    9da4:	80 80       	ld	r8, Z
    9da6:	80 80       	ld	r8, Z
    9da8:	80 80       	ld	r8, Z
    9daa:	80 80       	ld	r8, Z
    9dac:	80 80       	ld	r8, Z
    9dae:	80 80       	ld	r8, Z
    9db0:	80 80       	ld	r8, Z
    9db2:	80 80       	ld	r8, Z
    9db4:	80 80       	ld	r8, Z
    9db6:	80 80       	ld	r8, Z
    9db8:	80 80       	ld	r8, Z
    9dba:	80 80       	ld	r8, Z
    9dbc:	80 80       	ld	r8, Z
    9dbe:	80 80       	ld	r8, Z
    9dc0:	80 80       	ld	r8, Z
    9dc2:	80 80       	ld	r8, Z
    9dc4:	80 80       	ld	r8, Z
    9dc6:	80 80       	ld	r8, Z
    9dc8:	80 80       	ld	r8, Z
    9dca:	80 80       	ld	r8, Z
    9dcc:	80 80       	ld	r8, Z
    9dce:	80 80       	ld	r8, Z
    9dd0:	80 80       	ld	r8, Z
    9dd2:	80 80       	ld	r8, Z
    9dd4:	80 80       	ld	r8, Z
    9dd6:	80 80       	ld	r8, Z
    9dd8:	80 80       	ld	r8, Z
    9dda:	80 80       	ld	r8, Z
    9ddc:	80 80       	ld	r8, Z
    9dde:	80 80       	ld	r8, Z
    9de0:	80 80       	ld	r8, Z
    9de2:	80 80       	ld	r8, Z
    9de4:	80 80       	ld	r8, Z
    9de6:	80 80       	ld	r8, Z
    9de8:	80 80       	ld	r8, Z
    9dea:	80 80       	ld	r8, Z
    9dec:	80 80       	ld	r8, Z
    9dee:	80 80       	ld	r8, Z
    9df0:	80 80       	ld	r8, Z
    9df2:	80 80       	ld	r8, Z
    9df4:	80 80       	ld	r8, Z
    9df6:	80 80       	ld	r8, Z
    9df8:	80 80       	ld	r8, Z
    9dfa:	80 80       	ld	r8, Z
    9dfc:	80 80       	ld	r8, Z
    9dfe:	80 80       	ld	r8, Z
    9e00:	f9 f8       	.word	0xf8f9	; ????
    9e02:	f9 f5       	brne	.+126    	; 0x9e82 <waves+0x582>
    9e04:	eb e1       	ldi	r30, 0x1B	; 27
    9e06:	dd de       	rcall	.-582    	; 0x9bc2 <waves+0x2c2>
    9e08:	e0 e2       	ldi	r30, 0x20	; 32
    9e0a:	e4 e5       	ldi	r30, 0x54	; 84
    9e0c:	e6 e5       	ldi	r30, 0x56	; 86
    9e0e:	e4 e2       	ldi	r30, 0x24	; 36
    9e10:	de d9       	rcall	.-3140   	; 0x91ce <TriggerNote+0x30>
    9e12:	d2 ca       	rjmp	.-2652   	; 0x93b8 <ProcessMusic+0x1a4>
    9e14:	c1 b7       	in	r28, 0x31	; 49
    9e16:	ac a2       	std	Y+36, r10	; 0x24
    9e18:	99 91       	ld	r25, Y+
    9e1a:	8a 86       	std	Y+10, r8	; 0x0a
    9e1c:	83 81       	ldd	r24, Z+3	; 0x03
    9e1e:	80 80       	ld	r8, Z
    9e20:	81 82       	std	Z+1, r8	; 0x01
    9e22:	83 85       	ldd	r24, Z+11	; 0x0b
    9e24:	86 88       	ldd	r8, Z+22	; 0x16
    9e26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9e28:	8d 8f       	std	Y+29, r24	; 0x1d
    9e2a:	90 92 93 95 	sts	0x9593, r9
    9e2e:	96 97       	sbiw	r26, 0x26	; 38
    9e30:	98 99       	sbic	0x13, 0	; 19
    9e32:	9a 9b       	sbis	0x13, 2	; 19
    9e34:	9b 9c       	mul	r9, r11
    9e36:	9d 9d       	mul	r25, r13
    9e38:	9d 9e       	mul	r9, r29
    9e3a:	9e 9e       	mul	r9, r30
    9e3c:	9f 9f       	mul	r25, r31
    9e3e:	9f 9f       	mul	r25, r31
    9e40:	9f 9f       	mul	r25, r31
    9e42:	9f 9e       	mul	r9, r31
    9e44:	9e 9e       	mul	r9, r30
    9e46:	9d 9d       	mul	r25, r13
    9e48:	9d 9c       	mul	r9, r13
    9e4a:	9b 9b       	sbis	0x13, 3	; 19
    9e4c:	9a 99       	sbic	0x13, 2	; 19
    9e4e:	98 97       	sbiw	r26, 0x28	; 40
    9e50:	96 95       	lsr	r25
    9e52:	93 92       	.word	0x9293	; ????
    9e54:	90 8f       	std	Z+24, r25	; 0x18
    9e56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9e58:	8a 88       	ldd	r8, Y+18	; 0x12
    9e5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9e5c:	83 82       	std	Z+3, r8	; 0x03
    9e5e:	81 80       	ldd	r8, Z+1	; 0x01
    9e60:	80 81       	ld	r24, Z
    9e62:	83 86       	std	Z+11, r8	; 0x0b
    9e64:	8a 91       	ld	r24, -Y
    9e66:	99 a2       	std	Y+33, r9	; 0x21
    9e68:	ac b7       	in	r26, 0x3c	; 60
    9e6a:	c1 ca       	rjmp	.-2686   	; 0x93ee <ProcessMusic+0x1da>
    9e6c:	d2 d9       	rcall	.-3164   	; 0x9212 <TriggerNote+0x74>
    9e6e:	de e2       	ldi	r29, 0x2E	; 46
    9e70:	e4 e5       	ldi	r30, 0x54	; 84
    9e72:	e6 e5       	ldi	r30, 0x56	; 86
    9e74:	e4 e2       	ldi	r30, 0x24	; 36
    9e76:	e0 de       	rcall	.-576    	; 0x9c38 <waves+0x338>
    9e78:	dd e1       	ldi	r29, 0x1D	; 29
    9e7a:	eb f5       	brvc	.+122    	; 0x9ef6 <waves+0x5f6>
    9e7c:	f9 f8       	.word	0xf8f9	; ????
    9e7e:	f9 00       	.word	0x00f9	; ????
    9e80:	07 08       	sbc	r0, r7
    9e82:	07 0b       	sbc	r16, r23
    9e84:	15 1f       	adc	r17, r21
    9e86:	23 22       	and	r2, r19
    9e88:	20 1e       	adc	r2, r16
    9e8a:	1c 1b       	sub	r17, r28
    9e8c:	1a 1b       	sub	r17, r26
    9e8e:	1c 1e       	adc	r1, r28
    9e90:	22 27       	eor	r18, r18
    9e92:	2e 36       	cpi	r18, 0x6E	; 110
    9e94:	3f 49       	sbci	r19, 0x9F	; 159
    9e96:	54 5e       	subi	r21, 0xE4	; 228
    9e98:	67 6f       	ori	r22, 0xF7	; 247
    9e9a:	76 7a       	andi	r23, 0xA6	; 166
    9e9c:	7e 7f       	andi	r23, 0xFE	; 254
    9e9e:	7f 7f       	andi	r23, 0xFF	; 255
    9ea0:	7f 7e       	andi	r23, 0xEF	; 239
    9ea2:	7d 7b       	andi	r23, 0xBD	; 189
    9ea4:	7a 78       	andi	r23, 0x8A	; 138
    9ea6:	76 74       	andi	r23, 0x46	; 70
    9ea8:	73 71       	andi	r23, 0x13	; 19
    9eaa:	70 6e       	ori	r23, 0xE0	; 224
    9eac:	6d 6b       	ori	r22, 0xBD	; 189
    9eae:	6a 69       	ori	r22, 0x9A	; 154
    9eb0:	68 67       	ori	r22, 0x78	; 120
    9eb2:	66 65       	ori	r22, 0x56	; 86
    9eb4:	65 64       	ori	r22, 0x45	; 69
    9eb6:	64 63       	ori	r22, 0x34	; 52
    9eb8:	63 62       	ori	r22, 0x23	; 35
    9eba:	62 62       	ori	r22, 0x22	; 34
    9ebc:	61 61       	ori	r22, 0x11	; 17
    9ebe:	61 61       	ori	r22, 0x11	; 17
    9ec0:	61 61       	ori	r22, 0x11	; 17
    9ec2:	61 62       	ori	r22, 0x21	; 33
    9ec4:	62 62       	ori	r22, 0x22	; 34
    9ec6:	63 63       	ori	r22, 0x33	; 51
    9ec8:	63 64       	ori	r22, 0x43	; 67
    9eca:	65 65       	ori	r22, 0x55	; 85
    9ecc:	66 67       	ori	r22, 0x76	; 118
    9ece:	68 69       	ori	r22, 0x98	; 152
    9ed0:	6a 6b       	ori	r22, 0xBA	; 186
    9ed2:	6d 6e       	ori	r22, 0xED	; 237
    9ed4:	70 71       	andi	r23, 0x10	; 16
    9ed6:	73 74       	andi	r23, 0x43	; 67
    9ed8:	76 78       	andi	r23, 0x86	; 134
    9eda:	7a 7b       	andi	r23, 0xBA	; 186
    9edc:	7d 7e       	andi	r23, 0xED	; 237
    9ede:	7f 7f       	andi	r23, 0xFF	; 255
    9ee0:	7f 7f       	andi	r23, 0xFF	; 255
    9ee2:	7e 7a       	andi	r23, 0xAE	; 174
    9ee4:	76 6f       	ori	r23, 0xF6	; 246
    9ee6:	67 5e       	subi	r22, 0xE7	; 231
    9ee8:	54 49       	sbci	r21, 0x94	; 148
    9eea:	3f 36       	cpi	r19, 0x6F	; 111
    9eec:	2e 27       	eor	r18, r30
    9eee:	22 1e       	adc	r2, r18
    9ef0:	1c 1b       	sub	r17, r28
    9ef2:	1a 1b       	sub	r17, r26
    9ef4:	1c 1e       	adc	r1, r28
    9ef6:	20 22       	and	r2, r16
    9ef8:	23 1f       	adc	r18, r19
    9efa:	15 0b       	sbc	r17, r21
    9efc:	07 08       	sbc	r0, r7
    9efe:	07 00       	.word	0x0007	; ????

00009f00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    9f00:	30 91 7a 0e 	lds	r19, 0x0E7A
    9f04:	20 e0       	ldi	r18, 0x00	; 0
    9f06:	10 c0       	rjmp	.+32     	; 0x9f28 <RestoreBackground+0x28>
			//a=ram_tiles_restore[i].addr;
			//j=ram_tiles_restore[i].tileIndex;
			//vram[a]=j;
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    9f08:	82 2f       	mov	r24, r18
    9f0a:	90 e0       	ldi	r25, 0x00	; 0
    9f0c:	fc 01       	movw	r30, r24
    9f0e:	ee 0f       	add	r30, r30
    9f10:	ff 1f       	adc	r31, r31
    9f12:	e8 0f       	add	r30, r24
    9f14:	f9 1f       	adc	r31, r25
    9f16:	e4 5c       	subi	r30, 0xC4	; 196
    9f18:	f4 4f       	sbci	r31, 0xF4	; 244
    9f1a:	a0 81       	ld	r26, Z
    9f1c:	b1 81       	ldd	r27, Z+1	; 0x01
    9f1e:	a0 5e       	subi	r26, 0xE0	; 224
    9f20:	be 4f       	sbci	r27, 0xFE	; 254
    9f22:	82 81       	ldd	r24, Z+2	; 0x02
    9f24:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    9f26:	2f 5f       	subi	r18, 0xFF	; 255
    9f28:	23 17       	cp	r18, r19
    9f2a:	70 f3       	brcs	.-36     	; 0x9f08 <RestoreBackground+0x8>
			//a=ram_tiles_restore[i].addr;
			//j=ram_tiles_restore[i].tileIndex;
			//vram[a]=j;
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    9f2c:	08 95       	ret

00009f2e <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    9f2e:	80 93 00 01 	sts	0x0100, r24
	}
    9f32:	08 95       	ret

00009f34 <MoveSprite>:
	

	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9f34:	df 92       	push	r13
    9f36:	ef 92       	push	r14
    9f38:	ff 92       	push	r15
    9f3a:	0f 93       	push	r16
    9f3c:	1f 93       	push	r17
    9f3e:	cf 93       	push	r28
    9f40:	df 93       	push	r29
    9f42:	18 2f       	mov	r17, r24
    9f44:	d6 2e       	mov	r13, r22
    9f46:	62 2f       	mov	r22, r18
    9f48:	70 e0       	ldi	r23, 0x00	; 0
    9f4a:	a0 e0       	ldi	r26, 0x00	; 0
    9f4c:	b0 e0       	ldi	r27, 0x00	; 0
		for(unsigned char dy=0;dy<height;dy++){
			for(unsigned char dx=0;dx<width;dx++){
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
			
				if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    9f4e:	e4 2e       	mov	r14, r20
    9f50:	ff 24       	eor	r15, r15
    9f52:	1b c0       	rjmp	.+54     	; 0x9f8a <MoveSprite+0x56>
	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
			for(unsigned char dx=0;dx<width;dx++){
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    9f54:	90 e0       	ldi	r25, 0x00	; 0
    9f56:	fc 01       	movw	r30, r24
    9f58:	ee 0f       	add	r30, r30
    9f5a:	ff 1f       	adc	r31, r31
    9f5c:	ee 0f       	add	r30, r30
    9f5e:	ff 1f       	adc	r31, r31
    9f60:	e8 0f       	add	r30, r24
    9f62:	f9 1f       	adc	r31, r25
    9f64:	e4 5d       	subi	r30, 0xD4	; 212
    9f66:	fb 4f       	sbci	r31, 0xFB	; 251
    9f68:	50 83       	st	Z, r21
			
				if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    9f6a:	c1 3d       	cpi	r28, 0xD1	; 209
    9f6c:	d1 05       	cpc	r29, r1
    9f6e:	14 f0       	brlt	.+4      	; 0x9f74 <MoveSprite+0x40>
					unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
					sprites[startSprite].y=tmp;
    9f70:	21 83       	std	Z+1, r18	; 0x01
    9f72:	01 c0       	rjmp	.+2      	; 0x9f76 <MoveSprite+0x42>
				}else{
					sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9f74:	41 83       	std	Z+1, r20	; 0x01


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
			for(unsigned char dx=0;dx<width;dx++){
    9f76:	3f 5f       	subi	r19, 0xFF	; 255
    9f78:	58 5f       	subi	r21, 0xF8	; 248
    9f7a:	83 2f       	mov	r24, r19
    9f7c:	81 0f       	add	r24, r17
    9f7e:	36 17       	cp	r19, r22
    9f80:	48 f3       	brcs	.-46     	; 0x9f54 <MoveSprite+0x20>
    9f82:	16 0f       	add	r17, r22
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    9f84:	7f 5f       	subi	r23, 0xFF	; 255
    9f86:	48 5f       	subi	r20, 0xF8	; 248
    9f88:	18 96       	adiw	r26, 0x08	; 8
    9f8a:	70 17       	cp	r23, r16
    9f8c:	40 f4       	brcc	.+16     	; 0x9f9e <MoveSprite+0x6a>
    9f8e:	24 2f       	mov	r18, r20
    9f90:	20 5d       	subi	r18, 0xD0	; 208
    9f92:	5d 2d       	mov	r21, r13
    9f94:	30 e0       	ldi	r19, 0x00	; 0
			for(unsigned char dx=0;dx<width;dx++){
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
			
				if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    9f96:	ed 01       	movw	r28, r26
    9f98:	ce 0d       	add	r28, r14
    9f9a:	df 1d       	adc	r29, r15
    9f9c:	ee cf       	rjmp	.-36     	; 0x9f7a <MoveSprite+0x46>
			
				startSprite++;
			}
		}	

	}
    9f9e:	df 91       	pop	r29
    9fa0:	cf 91       	pop	r28
    9fa2:	1f 91       	pop	r17
    9fa4:	0f 91       	pop	r16
    9fa6:	ff 90       	pop	r15
    9fa8:	ef 90       	pop	r14
    9faa:	df 90       	pop	r13
    9fac:	08 95       	ret

00009fae <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    9fae:	08 95       	ret

00009fb0 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9fb0:	ec e2       	ldi	r30, 0x2C	; 44
    9fb2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9fb4:	80 ef       	ldi	r24, 0xF0	; 240
    9fb6:	80 83       	st	Z, r24
    9fb8:	35 96       	adiw	r30, 0x05	; 5

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9fba:	94 e0       	ldi	r25, 0x04	; 4
    9fbc:	ec 37       	cpi	r30, 0x7C	; 124
    9fbe:	f9 07       	cpc	r31, r25
    9fc0:	d1 f7       	brne	.-12     	; 0x9fb6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    9fc2:	08 95       	ret

00009fc4 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9fc4:	80 91 7b 0e 	lds	r24, 0x0E7B
    9fc8:	88 23       	and	r24, r24
    9fca:	f9 f0       	breq	.+62     	; 0xa00a <ProcessFading+0x46>
		if(currFadeFrame==0){
    9fcc:	80 91 7c 0e 	lds	r24, 0x0E7C
    9fd0:	88 23       	and	r24, r24
    9fd2:	c1 f4       	brne	.+48     	; 0xa004 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    9fd4:	80 91 78 0e 	lds	r24, 0x0E78
    9fd8:	80 93 7c 0e 	sts	0x0E7C, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9fdc:	80 91 7d 0e 	lds	r24, 0x0E7D
    9fe0:	e8 2f       	mov	r30, r24
    9fe2:	f0 e0       	ldi	r31, 0x00	; 0
    9fe4:	e9 52       	subi	r30, 0x29	; 41
    9fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    9fe8:	e4 91       	lpm	r30, Z+
    9fea:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9fec:	90 91 79 0e 	lds	r25, 0x0E79
    9ff0:	98 0f       	add	r25, r24
    9ff2:	90 93 7d 0e 	sts	0x0E7D, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9ff6:	99 23       	and	r25, r25
    9ff8:	11 f0       	breq	.+4      	; 0x9ffe <ProcessFading+0x3a>
    9ffa:	9d 30       	cpi	r25, 0x0D	; 13
    9ffc:	31 f4       	brne	.+12     	; 0xa00a <ProcessFading+0x46>
				fadeActive=false;
    9ffe:	10 92 7b 0e 	sts	0x0E7B, r1
    a002:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a004:	81 50       	subi	r24, 0x01	; 1
    a006:	80 93 7c 0e 	sts	0x0E7C, r24
    a00a:	08 95       	ret

0000a00c <ProcessSprites>:

	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
	}

	void ProcessSprites(){
    a00c:	2f 92       	push	r2
    a00e:	3f 92       	push	r3
    a010:	4f 92       	push	r4
    a012:	5f 92       	push	r5
    a014:	6f 92       	push	r6
    a016:	7f 92       	push	r7
    a018:	8f 92       	push	r8
    a01a:	9f 92       	push	r9
    a01c:	af 92       	push	r10
    a01e:	bf 92       	push	r11
    a020:	cf 92       	push	r12
    a022:	df 92       	push	r13
    a024:	ef 92       	push	r14
    a026:	ff 92       	push	r15
    a028:	0f 93       	push	r16
    a02a:	1f 93       	push	r17
    a02c:	df 93       	push	r29
    a02e:	cf 93       	push	r28
    a030:	00 d0       	rcall	.+0      	; 0xa032 <ProcessSprites+0x26>
    a032:	0f 92       	push	r0
    a034:	cd b7       	in	r28, 0x3d	; 61
    a036:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    a038:	10 92 7a 0e 	sts	0x0E7A, r1
		if(!spritesOn) return;
    a03c:	80 91 00 01 	lds	r24, 0x0100
    a040:	88 23       	and	r24, r24
    a042:	09 f4       	brne	.+2      	; 0xa046 <ProcessSprites+0x3a>
    a044:	a3 c0       	rjmp	.+326    	; 0xa18c <ProcessSprites+0x180>
    a046:	ac e2       	ldi	r26, 0x2C	; 44
    a048:	8a 2e       	mov	r8, r26
    a04a:	a4 e0       	ldi	r26, 0x04	; 4
    a04c:	9a 2e       	mov	r9, r26
    a04e:	77 24       	eor	r7, r7
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    a050:	f4 01       	movw	r30, r8
    a052:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a054:	80 3f       	cpi	r24, 0xF0	; 240
    a056:	09 f4       	brne	.+2      	; 0xa05a <ProcessSprites+0x4e>
    a058:	7a c0       	rjmp	.+244    	; 0xa14e <ProcessSprites+0x142>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    a05a:	91 81       	ldd	r25, Z+1	; 0x01

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a05c:	f8 2f       	mov	r31, r24
    a05e:	f6 95       	lsr	r31
    a060:	f6 95       	lsr	r31
    a062:	f6 95       	lsr	r31
    a064:	f9 83       	std	Y+1, r31	; 0x01
				dx=ssx&0x7;
    a066:	28 2f       	mov	r18, r24
    a068:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    a06a:	19 f0       	breq	.+6      	; 0xa072 <ProcessSprites+0x66>
    a06c:	f2 e0       	ldi	r31, 0x02	; 2
    a06e:	2f 2e       	mov	r2, r31
    a070:	02 c0       	rjmp	.+4      	; 0xa076 <ProcessSprites+0x6a>
    a072:	22 24       	eor	r2, r2
    a074:	23 94       	inc	r2

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a076:	39 2f       	mov	r19, r25
    a078:	36 95       	lsr	r19
    a07a:	36 95       	lsr	r19
    a07c:	36 95       	lsr	r19
				dy=ssy%TILE_HEIGHT;
    a07e:	89 2f       	mov	r24, r25
    a080:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    a082:	19 f0       	breq	.+6      	; 0xa08a <ProcessSprites+0x7e>
    a084:	e2 e0       	ldi	r30, 0x02	; 2
    a086:	6e 2e       	mov	r6, r30
    a088:	02 c0       	rjmp	.+4      	; 0xa08e <ProcessSprites+0x82>
    a08a:	66 24       	eor	r6, r6
    a08c:	63 94       	inc	r6
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);			
    a08e:	b8 2e       	mov	r11, r24
    a090:	aa 24       	eor	r10, r10
    a092:	25 01       	movw	r4, r10
    a094:	42 0e       	add	r4, r18
    a096:	51 1c       	adc	r5, r1
    a098:	c3 2e       	mov	r12, r19
    a09a:	ee 24       	eor	r14, r14
    a09c:	ff 24       	eor	r15, r15
    a09e:	4d c0       	rjmp	.+154    	; 0xa13a <ProcessSprites+0x12e>
						//if( (wx-(Screen.scrollX/8))>0 ) {

							//process X-Y wrapping
							if(wy>=(VRAM_TILES_V*2)){
								wy-=(VRAM_TILES_V*2);
							}else if(wy>=VRAM_TILES_V){
    a0a0:	29 e1       	ldi	r18, 0x19	; 25
    a0a2:	2c 15       	cp	r18, r12
    a0a4:	10 f0       	brcs	.+4      	; 0xa0aa <ProcessSprites+0x9e>
    a0a6:	9c 2d       	mov	r25, r12
    a0a8:	01 c0       	rjmp	.+2      	; 0xa0ac <ProcessSprites+0xa0>
    a0aa:	93 2d       	mov	r25, r3
								wy-=VRAM_TILES_V;
							}
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a0ac:	4d e1       	ldi	r20, 0x1D	; 29
    a0ae:	4d 15       	cp	r20, r13
    a0b0:	10 f0       	brcs	.+4      	; 0xa0b6 <ProcessSprites+0xaa>
    a0b2:	8d 2d       	mov	r24, r13
    a0b4:	02 c0       	rjmp	.+4      	; 0xa0ba <ProcessSprites+0xae>
    a0b6:	8d 2d       	mov	r24, r13
    a0b8:	8e 51       	subi	r24, 0x1E	; 30

							ramPtr=(wy*VRAM_TILES_H)+wx;
    a0ba:	ee e1       	ldi	r30, 0x1E	; 30
    a0bc:	9e 9f       	mul	r25, r30
    a0be:	90 01       	movw	r18, r0
    a0c0:	11 24       	eor	r1, r1
    a0c2:	28 0f       	add	r18, r24
    a0c4:	31 1d       	adc	r19, r1
							bt=vram[ramPtr];						
    a0c6:	89 01       	movw	r16, r18
    a0c8:	00 5e       	subi	r16, 0xE0	; 224
    a0ca:	1e 4f       	sbci	r17, 0xFE	; 254
    a0cc:	f8 01       	movw	r30, r16
    a0ce:	60 81       	ld	r22, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    a0d0:	6b 31       	cpi	r22, 0x1B	; 27
    a0d2:	f0 f0       	brcs	.+60     	; 0xa110 <ProcessSprites+0x104>
    a0d4:	40 91 7a 0e 	lds	r20, 0x0E7A
    a0d8:	4b 31       	cpi	r20, 0x1B	; 27
    a0da:	00 f5       	brcc	.+64     	; 0xa11c <ProcessSprites+0x110>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    a0dc:	84 2f       	mov	r24, r20
    a0de:	90 e0       	ldi	r25, 0x00	; 0
    a0e0:	fc 01       	movw	r30, r24
    a0e2:	ee 0f       	add	r30, r30
    a0e4:	ff 1f       	adc	r31, r31
    a0e6:	e8 0f       	add	r30, r24
    a0e8:	f9 1f       	adc	r31, r25
    a0ea:	e4 5c       	subi	r30, 0xC4	; 196
    a0ec:	f4 4f       	sbci	r31, 0xF4	; 244
    a0ee:	31 83       	std	Z+1, r19	; 0x01
    a0f0:	20 83       	st	Z, r18
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    a0f2:	62 83       	std	Z+2, r22	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    a0f4:	86 2f       	mov	r24, r22
    a0f6:	64 2f       	mov	r22, r20
    a0f8:	0e 94 a9 42 	call	0x8552	; 0x8552 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    a0fc:	60 91 7a 0e 	lds	r22, 0x0E7A
    a100:	f8 01       	movw	r30, r16
    a102:	60 83       	st	Z, r22
								bt=free_tile_index;
								free_tile_index++;										
    a104:	6f 5f       	subi	r22, 0xFF	; 255
    a106:	60 93 7a 0e 	sts	0x0E7A, r22
    a10a:	61 50       	subi	r22, 0x01	; 1
							}
				
							if(bt<RAM_TILES_COUNT){				
    a10c:	6b 31       	cpi	r22, 0x1B	; 27
    a10e:	30 f4       	brcc	.+12     	; 0xa11c <ProcessSprites+0x110>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);			
    a110:	87 2d       	mov	r24, r7
    a112:	4a 81       	ldd	r20, Y+2	; 0x02
    a114:	5b 81       	ldd	r21, Y+3	; 0x03
    a116:	92 01       	movw	r18, r4
    a118:	0e 94 3a 43 	call	0x8674	; 0x8674 <BlitSprite>
    a11c:	8a 81       	ldd	r24, Y+2	; 0x02
    a11e:	9b 81       	ldd	r25, Y+3	; 0x03
    a120:	01 96       	adiw	r24, 0x01	; 1
    a122:	9b 83       	std	Y+3, r25	; 0x03
    a124:	8a 83       	std	Y+2, r24	; 0x02
    a126:	d3 94       	inc	r13
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    a128:	82 15       	cp	r24, r2
    a12a:	08 f4       	brcc	.+2      	; 0xa12e <ProcessSprites+0x122>
    a12c:	b9 cf       	rjmp	.-142    	; 0xa0a0 <ProcessSprites+0x94>
    a12e:	08 94       	sec
    a130:	e1 1c       	adc	r14, r1
    a132:	f1 1c       	adc	r15, r1
    a134:	c3 94       	inc	r12
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    a136:	e6 14       	cp	r14, r6
    a138:	50 f4       	brcc	.+20     	; 0xa14e <ProcessSprites+0x142>
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);			
    a13a:	80 e0       	ldi	r24, 0x00	; 0
    a13c:	9e 2d       	mov	r25, r14
    a13e:	9c 01       	movw	r18, r24
    a140:	3b 83       	std	Y+3, r19	; 0x03
    a142:	2a 83       	std	Y+2, r18	; 0x02
    a144:	d9 80       	ldd	r13, Y+1	; 0x01
						//if( (wx-(Screen.scrollX/8))>0 ) {

							//process X-Y wrapping
							if(wy>=(VRAM_TILES_V*2)){
								wy-=(VRAM_TILES_V*2);
							}else if(wy>=VRAM_TILES_V){
    a146:	66 ee       	ldi	r22, 0xE6	; 230
    a148:	36 2e       	mov	r3, r22
    a14a:	3c 0c       	add	r3, r12
    a14c:	a9 cf       	rjmp	.-174    	; 0xa0a0 <ProcessSprites+0x94>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    a14e:	73 94       	inc	r7
    a150:	e5 e0       	ldi	r30, 0x05	; 5
    a152:	f0 e0       	ldi	r31, 0x00	; 0
    a154:	8e 0e       	add	r8, r30
    a156:	9f 1e       	adc	r9, r31
    a158:	f0 e1       	ldi	r31, 0x10	; 16
    a15a:	7f 16       	cp	r7, r31
    a15c:	09 f0       	breq	.+2      	; 0xa160 <ProcessSprites+0x154>
    a15e:	78 cf       	rjmp	.-272    	; 0xa050 <ProcessSprites+0x44>
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a160:	30 91 7a 0e 	lds	r19, 0x0E7A
    a164:	20 e0       	ldi	r18, 0x00	; 0
    a166:	10 c0       	rjmp	.+32     	; 0xa188 <ProcessSprites+0x17c>
			//a=ram_tiles_restore[i].addr;
			//j=ram_tiles_restore[i].tileIndex;
			//vram[a]=j;
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    a168:	82 2f       	mov	r24, r18
    a16a:	90 e0       	ldi	r25, 0x00	; 0
    a16c:	fc 01       	movw	r30, r24
    a16e:	ee 0f       	add	r30, r30
    a170:	ff 1f       	adc	r31, r31
    a172:	e8 0f       	add	r30, r24
    a174:	f9 1f       	adc	r31, r25
    a176:	e4 5c       	subi	r30, 0xC4	; 196
    a178:	f4 4f       	sbci	r31, 0xF4	; 244
    a17a:	a0 81       	ld	r26, Z
    a17c:	b1 81       	ldd	r27, Z+1	; 0x01
    a17e:	a0 5e       	subi	r26, 0xE0	; 224
    a180:	be 4f       	sbci	r27, 0xFE	; 254
    a182:	82 81       	ldd	r24, Z+2	; 0x02
    a184:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a186:	2f 5f       	subi	r18, 0xFF	; 255
    a188:	23 17       	cp	r18, r19
    a18a:	70 f3       	brcs	.-36     	; 0xa168 <ProcessSprites+0x15c>


		//restore BG tiles
		RestoreBackground();

	}
    a18c:	0f 90       	pop	r0
    a18e:	0f 90       	pop	r0
    a190:	0f 90       	pop	r0
    a192:	cf 91       	pop	r28
    a194:	df 91       	pop	r29
    a196:	1f 91       	pop	r17
    a198:	0f 91       	pop	r16
    a19a:	ff 90       	pop	r15
    a19c:	ef 90       	pop	r14
    a19e:	df 90       	pop	r13
    a1a0:	cf 90       	pop	r12
    a1a2:	bf 90       	pop	r11
    a1a4:	af 90       	pop	r10
    a1a6:	9f 90       	pop	r9
    a1a8:	8f 90       	pop	r8
    a1aa:	7f 90       	pop	r7
    a1ac:	6f 90       	pop	r6
    a1ae:	5f 90       	pop	r5
    a1b0:	4f 90       	pop	r4
    a1b2:	3f 90       	pop	r3
    a1b4:	2f 90       	pop	r2
    a1b6:	08 95       	ret

0000a1b8 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a1b8:	0e 94 e2 4f 	call	0x9fc4	; 0x9fc4 <ProcessFading>
		ProcessSprites();
    a1bc:	0e 94 06 50 	call	0xa00c	; 0xa00c <ProcessSprites>

	}
    a1c0:	08 95       	ret

0000a1c2 <DKMapSprite>:

void DKMapSprite(u8 index, const char *map, u8 spriteFlags)
{
    a1c2:	ef 92       	push	r14
    a1c4:	ff 92       	push	r15
    a1c6:	0f 93       	push	r16
    a1c8:	1f 93       	push	r17
    a1ca:	cf 93       	push	r28
    a1cc:	df 93       	push	r29
    a1ce:	9b 01       	movw	r18, r22
    a1d0:	f4 2e       	mov	r15, r20
	u8 x,y,xStart,xEnd,xStep;
	u8 wid = pgm_read_byte(map), hgt = pgm_read_byte(map+1);
    a1d2:	fb 01       	movw	r30, r22
    a1d4:	b4 91       	lpm	r27, Z+
    a1d6:	2f 5f       	subi	r18, 0xFF	; 255
    a1d8:	3f 4f       	sbci	r19, 0xFF	; 255
    a1da:	f9 01       	movw	r30, r18
    a1dc:	e4 90       	lpm	r14, Z+
    a1de:	21 50       	subi	r18, 0x01	; 1
    a1e0:	30 40       	sbci	r19, 0x00	; 0

	index=free_slot;
    a1e2:	a0 91 1f 10 	lds	r26, 0x101F
	if (spriteFlags&SPRITE_FLIP_X)
    a1e6:	40 fd       	sbrc	r20, 0
    a1e8:	04 c0       	rjmp	.+8      	; 0xa1f2 <DKMapSprite+0x30>
    a1ea:	1b 2f       	mov	r17, r27
    a1ec:	00 e0       	ldi	r16, 0x00	; 0
    a1ee:	41 e0       	ldi	r20, 0x01	; 1
    a1f0:	04 c0       	rjmp	.+8      	; 0xa1fa <DKMapSprite+0x38>
 	{
		xStart = wid-1;
    a1f2:	0b 2f       	mov	r16, r27
    a1f4:	01 50       	subi	r16, 0x01	; 1
    a1f6:	1f ef       	ldi	r17, 0xFF	; 255
    a1f8:	4f ef       	ldi	r20, 0xFF	; 255
    a1fa:	70 e0       	ldi	r23, 0x00	; 0
    a1fc:	1c c0       	rjmp	.+56     	; 0xa236 <DKMapSprite+0x74>

	for (y = 0; y < hgt; y++)
	{
		for (x = xStart; x < xEnd; x += xStep,index++)
		{
			if (index<16)
    a1fe:	a0 31       	cpi	r26, 0x10	; 16
    a200:	a8 f4       	brcc	.+42     	; 0xa22c <DKMapSprite+0x6a>
			{
				sprites[index].tileIndex = pgm_read_byte(&(map[(y*wid)+x+2]));
    a202:	8a 2f       	mov	r24, r26
    a204:	90 e0       	ldi	r25, 0x00	; 0
    a206:	fe 01       	movw	r30, r28
    a208:	e5 0f       	add	r30, r21
    a20a:	f1 1d       	adc	r31, r1
    a20c:	32 96       	adiw	r30, 0x02	; 2
    a20e:	e2 0f       	add	r30, r18
    a210:	f3 1f       	adc	r31, r19
    a212:	64 91       	lpm	r22, Z+
    a214:	fc 01       	movw	r30, r24
    a216:	ee 0f       	add	r30, r30
    a218:	ff 1f       	adc	r31, r31
    a21a:	ee 0f       	add	r30, r30
    a21c:	ff 1f       	adc	r31, r31
    a21e:	e8 0f       	add	r30, r24
    a220:	f9 1f       	adc	r31, r25
    a222:	e4 5d       	subi	r30, 0xD4	; 212
    a224:	fb 4f       	sbci	r31, 0xFB	; 251
    a226:	62 83       	std	Z+2, r22	; 0x02
    a228:	13 82       	std	Z+3, r1	; 0x03
				sprites[index].flags = spriteFlags;
    a22a:	f4 82       	std	Z+4, r15	; 0x04
		xStep = 1;
	}

	for (y = 0; y < hgt; y++)
	{
		for (x = xStart; x < xEnd; x += xStep,index++)
    a22c:	54 0f       	add	r21, r20
    a22e:	af 5f       	subi	r26, 0xFF	; 255
    a230:	51 17       	cp	r21, r17
    a232:	28 f3       	brcs	.-54     	; 0xa1fe <DKMapSprite+0x3c>
		xStart = 0;
		xEnd = wid;
		xStep = 1;
	}

	for (y = 0; y < hgt; y++)
    a234:	7f 5f       	subi	r23, 0xFF	; 255
    a236:	7e 15       	cp	r23, r14
    a238:	28 f4       	brcc	.+10     	; 0xa244 <DKMapSprite+0x82>
	{
		for (x = xStart; x < xEnd; x += xStep,index++)
		{
			if (index<16)
			{
				sprites[index].tileIndex = pgm_read_byte(&(map[(y*wid)+x+2]));
    a23a:	7b 9f       	mul	r23, r27
    a23c:	e0 01       	movw	r28, r0
    a23e:	11 24       	eor	r1, r1
    a240:	50 2f       	mov	r21, r16
    a242:	f6 cf       	rjmp	.-20     	; 0xa230 <DKMapSprite+0x6e>
				sprites[index].flags = spriteFlags;
			}
		}
	}
	free_slot=index;
    a244:	a0 93 1f 10 	sts	0x101F, r26
}
    a248:	df 91       	pop	r29
    a24a:	cf 91       	pop	r28
    a24c:	1f 91       	pop	r17
    a24e:	0f 91       	pop	r16
    a250:	ff 90       	pop	r15
    a252:	ef 90       	pop	r14
    a254:	08 95       	ret

0000a256 <do_fader>:




void	do_fader(u8 index)
{
    a256:	df 93       	push	r29
    a258:	cf 93       	push	r28
    a25a:	cd b7       	in	r28, 0x3d	; 61
    a25c:	de b7       	in	r29, 0x3e	; 62
    a25e:	28 97       	sbiw	r28, 0x08	; 8
    a260:	0f b6       	in	r0, 0x3f	; 63
    a262:	f8 94       	cli
    a264:	de bf       	out	0x3e, r29	; 62
    a266:	0f be       	out	0x3f, r0	; 63
    a268:	cd bf       	out	0x3d, r28	; 61
    int xxlat[]={ 1,5,2,6 };
    a26a:	de 01       	movw	r26, r28
    a26c:	11 96       	adiw	r26, 0x01	; 1
    a26e:	e9 e0       	ldi	r30, 0x09	; 9
    a270:	f1 e0       	ldi	r31, 0x01	; 1
    a272:	98 e0       	ldi	r25, 0x08	; 8
    a274:	01 90       	ld	r0, Z+
    a276:	0d 92       	st	X+, r0
    a278:	91 50       	subi	r25, 0x01	; 1
    a27a:	e1 f7       	brne	.-8      	; 0xa274 <do_fader+0x1e>

	FADER *p = &faders[index];
    a27c:	4a e0       	ldi	r20, 0x0A	; 10
    a27e:	84 9f       	mul	r24, r20
    a280:	d0 01       	movw	r26, r0
    a282:	11 24       	eor	r1, r1
    a284:	a2 57       	subi	r26, 0x72	; 114
    a286:	b1 4f       	sbci	r27, 0xF1	; 241

	switch(p->ctrl)
    a288:	19 96       	adiw	r26, 0x09	; 9
    a28a:	8c 91       	ld	r24, X
    a28c:	19 97       	sbiw	r26, 0x09	; 9
    a28e:	88 23       	and	r24, r24
    a290:	21 f0       	breq	.+8      	; 0xa29a <do_fader+0x44>
    a292:	81 30       	cpi	r24, 0x01	; 1
    a294:	09 f0       	breq	.+2      	; 0xa298 <do_fader+0x42>
    a296:	63 c0       	rjmp	.+198    	; 0xa35e <do_fader+0x108>
    a298:	43 c0       	rjmp	.+134    	; 0xa320 <do_fader+0xca>
	{
		case 0:
			p->color = xxlat[(p->basecolor+p->size)&3];
    a29a:	14 96       	adiw	r26, 0x04	; 4
    a29c:	2c 91       	ld	r18, X
    a29e:	14 97       	sbiw	r26, 0x04	; 4
    a2a0:	17 96       	adiw	r26, 0x07	; 7
    a2a2:	ec 91       	ld	r30, X
    a2a4:	17 97       	sbiw	r26, 0x07	; 7
    a2a6:	f0 e0       	ldi	r31, 0x00	; 0
    a2a8:	e2 0f       	add	r30, r18
    a2aa:	f1 1d       	adc	r31, r1
    a2ac:	e3 70       	andi	r30, 0x03	; 3
    a2ae:	f0 70       	andi	r31, 0x00	; 0
    a2b0:	ee 0f       	add	r30, r30
    a2b2:	ff 1f       	adc	r31, r31
    a2b4:	ec 0f       	add	r30, r28
    a2b6:	fd 1f       	adc	r31, r29
    a2b8:	81 81       	ldd	r24, Z+1	; 0x01
    a2ba:	16 96       	adiw	r26, 0x06	; 6
    a2bc:	8c 93       	st	X, r24
    a2be:	16 97       	sbiw	r26, 0x06	; 6
			p->trigger--;
    a2c0:	18 96       	adiw	r26, 0x08	; 8
    a2c2:	8c 91       	ld	r24, X
    a2c4:	18 97       	sbiw	r26, 0x08	; 8
    a2c6:	81 50       	subi	r24, 0x01	; 1
    a2c8:	18 96       	adiw	r26, 0x08	; 8
    a2ca:	8c 93       	st	X, r24
    a2cc:	18 97       	sbiw	r26, 0x08	; 8
			if (p->trigger<=0)
    a2ce:	18 16       	cp	r1, r24
    a2d0:	0c f4       	brge	.+2      	; 0xa2d4 <do_fader+0x7e>
    a2d2:	45 c0       	rjmp	.+138    	; 0xa35e <do_fader+0x108>
			{
				p->trigger = FADER_DELAY;
    a2d4:	82 e0       	ldi	r24, 0x02	; 2
    a2d6:	18 96       	adiw	r26, 0x08	; 8
    a2d8:	8c 93       	st	X, r24
    a2da:	18 97       	sbiw	r26, 0x08	; 8
				p->size++;
    a2dc:	2f 5f       	subi	r18, 0xFF	; 255
    a2de:	14 96       	adiw	r26, 0x04	; 4
    a2e0:	2c 93       	st	X, r18
    a2e2:	14 97       	sbiw	r26, 0x04	; 4
				if (p->size == p->maxsize-1)
    a2e4:	30 e0       	ldi	r19, 0x00	; 0
    a2e6:	15 96       	adiw	r26, 0x05	; 5
    a2e8:	8c 91       	ld	r24, X
    a2ea:	15 97       	sbiw	r26, 0x05	; 5
    a2ec:	90 e0       	ldi	r25, 0x00	; 0
    a2ee:	01 97       	sbiw	r24, 0x01	; 1
    a2f0:	28 17       	cp	r18, r24
    a2f2:	39 07       	cpc	r19, r25
    a2f4:	19 f4       	brne	.+6      	; 0xa2fc <do_fader+0xa6>
				{
			    	p->trigger = 5*FADER_DELAY;
    a2f6:	18 96       	adiw	r26, 0x08	; 8
    a2f8:	4c 93       	st	X, r20
    a2fa:	18 97       	sbiw	r26, 0x08	; 8
				}
				if (p->size >= p->maxsize)
    a2fc:	14 96       	adiw	r26, 0x04	; 4
    a2fe:	9c 91       	ld	r25, X
    a300:	14 97       	sbiw	r26, 0x04	; 4
    a302:	15 96       	adiw	r26, 0x05	; 5
    a304:	8c 91       	ld	r24, X
    a306:	15 97       	sbiw	r26, 0x05	; 5
    a308:	98 17       	cp	r25, r24
    a30a:	48 f1       	brcs	.+82     	; 0xa35e <do_fader+0x108>
				{
					p->size = 0;
    a30c:	14 96       	adiw	r26, 0x04	; 4
    a30e:	1c 92       	st	X, r1
    a310:	14 97       	sbiw	r26, 0x04	; 4
					p->color = 0;
    a312:	16 96       	adiw	r26, 0x06	; 6
    a314:	1c 92       	st	X, r1
    a316:	16 97       	sbiw	r26, 0x06	; 6
					p->ctrl = 1;
    a318:	81 e0       	ldi	r24, 0x01	; 1
    a31a:	19 96       	adiw	r26, 0x09	; 9
    a31c:	8c 93       	st	X, r24
    a31e:	1f c0       	rjmp	.+62     	; 0xa35e <do_fader+0x108>
				}
			}
			break;
		case 1:
			p->trigger--;
    a320:	18 96       	adiw	r26, 0x08	; 8
    a322:	8c 91       	ld	r24, X
    a324:	18 97       	sbiw	r26, 0x08	; 8
    a326:	81 50       	subi	r24, 0x01	; 1
    a328:	18 96       	adiw	r26, 0x08	; 8
    a32a:	8c 93       	st	X, r24
    a32c:	18 97       	sbiw	r26, 0x08	; 8
			if (p->trigger<=0)
    a32e:	18 16       	cp	r1, r24
    a330:	b4 f0       	brlt	.+44     	; 0xa35e <do_fader+0x108>
			{
				p->trigger=FADER_DELAY;
    a332:	32 e0       	ldi	r19, 0x02	; 2
    a334:	18 96       	adiw	r26, 0x08	; 8
    a336:	3c 93       	st	X, r19
    a338:	18 97       	sbiw	r26, 0x08	; 8
				p->size++;
    a33a:	14 96       	adiw	r26, 0x04	; 4
    a33c:	2c 91       	ld	r18, X
    a33e:	14 97       	sbiw	r26, 0x04	; 4
    a340:	92 2f       	mov	r25, r18
    a342:	9f 5f       	subi	r25, 0xFF	; 255
    a344:	14 96       	adiw	r26, 0x04	; 4
    a346:	9c 93       	st	X, r25
    a348:	14 97       	sbiw	r26, 0x04	; 4
				if (p->size>=p->maxsize)
    a34a:	15 96       	adiw	r26, 0x05	; 5
    a34c:	8c 91       	ld	r24, X
    a34e:	15 97       	sbiw	r26, 0x05	; 5
    a350:	98 17       	cp	r25, r24
    a352:	28 f0       	brcs	.+10     	; 0xa35e <do_fader+0x108>
				{
					p->ctrl=2;
    a354:	19 96       	adiw	r26, 0x09	; 9
    a356:	3c 93       	st	X, r19
    a358:	19 97       	sbiw	r26, 0x09	; 9
					p->size--;
    a35a:	14 96       	adiw	r26, 0x04	; 4
    a35c:	2c 93       	st	X, r18
			}
			break;
		default:
			break;
	}
}
    a35e:	28 96       	adiw	r28, 0x08	; 8
    a360:	0f b6       	in	r0, 0x3f	; 63
    a362:	f8 94       	cli
    a364:	de bf       	out	0x3e, r29	; 62
    a366:	0f be       	out	0x3f, r0	; 63
    a368:	cd bf       	out	0x3d, r28	; 61
    a36a:	cf 91       	pop	r28
    a36c:	df 91       	pop	r29
    a36e:	08 95       	ret

0000a370 <start_fader_single>:

void	start_fader0(u8 index,int xm,int ym,int w,int h,int lim,int col)
{
	FADER *p=&faders[index];

   	p->size = 0;
    a370:	10 92 92 0e 	sts	0x0E92, r1
   	p->color = 0;
    a374:	10 92 94 0e 	sts	0x0E94, r1
	p->maxsize = lim;
    a378:	2d e0       	ldi	r18, 0x0D	; 13
    a37a:	20 93 93 0e 	sts	0x0E93, r18
	p->basecolor = col;
    a37e:	10 92 95 0e 	sts	0x0E95, r1
   	p->trigger = FADER_DELAY;
    a382:	92 e0       	ldi	r25, 0x02	; 2
    a384:	90 93 96 0e 	sts	0x0E96, r25
   	p->xpos = xm;
    a388:	8f e0       	ldi	r24, 0x0F	; 15
    a38a:	80 93 90 0e 	sts	0x0E90, r24
   	p->ypos = ym;
    a38e:	20 93 91 0e 	sts	0x0E91, r18
   	p->width = w;
    a392:	90 93 8e 0e 	sts	0x0E8E, r25
   	p->height = h;
    a396:	10 92 8f 0e 	sts	0x0E8F, r1
	p->ctrl = 0;
    a39a:	10 92 97 0e 	sts	0x0E97, r1
void	start_fader_single()
{
    int xm=XREZ/16;
	int ym=YREZ/16;
	start_fader0(0,xm,ym,xm-ym,0,13,0);
}
    a39e:	08 95       	ret

0000a3a0 <add_score>:



void	add_score(u16  val)
{
	score[current_player]+=val;
    a3a0:	40 91 ad 0e 	lds	r20, 0x0EAD
    a3a4:	e4 2f       	mov	r30, r20
    a3a6:	ff 27       	eor	r31, r31
    a3a8:	e7 fd       	sbrc	r30, 7
    a3aa:	f0 95       	com	r31
    a3ac:	ee 0f       	add	r30, r30
    a3ae:	ff 1f       	adc	r31, r31
    a3b0:	ed 53       	subi	r30, 0x3D	; 61
    a3b2:	f1 4f       	sbci	r31, 0xF1	; 241
    a3b4:	20 81       	ld	r18, Z
    a3b6:	31 81       	ldd	r19, Z+1	; 0x01
    a3b8:	28 0f       	add	r18, r24
    a3ba:	39 1f       	adc	r19, r25
    a3bc:	31 83       	std	Z+1, r19	; 0x01
    a3be:	20 83       	st	Z, r18
	if (score[current_player]>hiscore)
    a3c0:	80 91 ea 0e 	lds	r24, 0x0EEA
    a3c4:	90 91 eb 0e 	lds	r25, 0x0EEB
    a3c8:	82 17       	cp	r24, r18
    a3ca:	93 07       	cpc	r25, r19
    a3cc:	48 f4       	brcc	.+18     	; 0xa3e0 <add_score+0x40>
	{
		hiscore=score[current_player];
    a3ce:	30 93 eb 0e 	sts	0x0EEB, r19
    a3d2:	20 93 ea 0e 	sts	0x0EEA, r18
		dirty|=DIRTY_HISCORE;
    a3d6:	80 91 7e 0e 	lds	r24, 0x0E7E
    a3da:	84 60       	ori	r24, 0x04	; 4
    a3dc:	80 93 7e 0e 	sts	0x0E7E, r24
	}
	dirty|=DIRTY_P1+current_player;
    a3e0:	4f 5f       	subi	r20, 0xFF	; 255
    a3e2:	80 91 7e 0e 	lds	r24, 0x0E7E
    a3e6:	84 2b       	or	r24, r20
    a3e8:	80 93 7e 0e 	sts	0x0E7E, r24
}
    a3ec:	08 95       	ret

0000a3ee <decimal_sub2>:
	}
}


u8 decimal_sub2( char *digit, u16  inval )
{
    a3ee:	fc 01       	movw	r30, r24
  u8 i;
  s16 val;

  if (inval>=60000)
    a3f0:	8a ee       	ldi	r24, 0xEA	; 234
    a3f2:	60 36       	cpi	r22, 0x60	; 96
    a3f4:	78 07       	cpc	r23, r24
    a3f6:	20 f0       	brcs	.+8      	; 0xa400 <decimal_sub2+0x12>
  {
  	val=inval-60000;
    a3f8:	60 56       	subi	r22, 0x60	; 96
    a3fa:	7a 4e       	sbci	r23, 0xEA	; 234
    a3fc:	86 e0       	ldi	r24, 0x06	; 6
    a3fe:	0d c0       	rjmp	.+26     	; 0xa41a <decimal_sub2+0x2c>
  	i=6;
  }
  else if (inval>=30000)
    a400:	85 e7       	ldi	r24, 0x75	; 117
    a402:	60 33       	cpi	r22, 0x30	; 48
    a404:	78 07       	cpc	r23, r24
    a406:	20 f0       	brcs	.+8      	; 0xa410 <decimal_sub2+0x22>
  {
  	val=inval-30000;
    a408:	60 53       	subi	r22, 0x30	; 48
    a40a:	75 47       	sbci	r23, 0x75	; 117
    a40c:	83 e0       	ldi	r24, 0x03	; 3
    a40e:	05 c0       	rjmp	.+10     	; 0xa41a <decimal_sub2+0x2c>
  	i=3;
  }
  else
  {
  	val=(int)inval;
    a410:	80 e0       	ldi	r24, 0x00	; 0
    a412:	03 c0       	rjmp	.+6      	; 0xa41a <decimal_sub2+0x2c>
  	i = 0;
  }

  while(val>0)
  {
    i++;
    a414:	8f 5f       	subi	r24, 0xFF	; 255
	val-=10000;
    a416:	60 51       	subi	r22, 0x10	; 16
    a418:	77 42       	sbci	r23, 0x27	; 39
  {
  	val=(int)inval;
  	i = 0;
  }

  while(val>0)
    a41a:	16 16       	cp	r1, r22
    a41c:	17 06       	cpc	r1, r23
    a41e:	d4 f3       	brlt	.-12     	; 0xa414 <decimal_sub2+0x26>
  {
    i++;
	val-=10000;
  }
  if (val<0) { i--; val+=10000; }
    a420:	61 15       	cp	r22, r1
    a422:	71 05       	cpc	r23, r1
    a424:	19 f0       	breq	.+6      	; 0xa42c <decimal_sub2+0x3e>
    a426:	81 50       	subi	r24, 0x01	; 1
    a428:	60 5f       	subi	r22, 0xF0	; 240
    a42a:	78 4d       	sbci	r23, 0xD8	; 216
  digit[4] = i;
    a42c:	84 83       	std	Z+4, r24	; 0x04
    a42e:	80 e0       	ldi	r24, 0x00	; 0
    a430:	03 c0       	rjmp	.+6      	; 0xa438 <decimal_sub2+0x4a>

   // 1000s
  i = 0;
  while(val>0)
  {
    i++;
    a432:	8f 5f       	subi	r24, 0xFF	; 255
	val-=1000;
    a434:	68 5e       	subi	r22, 0xE8	; 232
    a436:	73 40       	sbci	r23, 0x03	; 3
  if (val<0) { i--; val+=10000; }
  digit[4] = i;

   // 1000s
  i = 0;
  while(val>0)
    a438:	16 16       	cp	r1, r22
    a43a:	17 06       	cpc	r1, r23
    a43c:	d4 f3       	brlt	.-12     	; 0xa432 <decimal_sub2+0x44>
  {
    i++;
	val-=1000;
  }
  if (val<0) { i--; val+=1000; }
    a43e:	61 15       	cp	r22, r1
    a440:	71 05       	cpc	r23, r1
    a442:	19 f0       	breq	.+6      	; 0xa44a <decimal_sub2+0x5c>
    a444:	81 50       	subi	r24, 0x01	; 1
    a446:	68 51       	subi	r22, 0x18	; 24
    a448:	7c 4f       	sbci	r23, 0xFC	; 252
  digit[3] = i;
    a44a:	83 83       	std	Z+3, r24	; 0x03
    a44c:	80 e0       	ldi	r24, 0x00	; 0
    a44e:	03 c0       	rjmp	.+6      	; 0xa456 <decimal_sub2+0x68>

  // 100s
  i = 0;
  while(val>0)
  {
    i++;
    a450:	8f 5f       	subi	r24, 0xFF	; 255
	val-=100;
    a452:	64 56       	subi	r22, 0x64	; 100
    a454:	70 40       	sbci	r23, 0x00	; 0
  if (val<0) { i--; val+=1000; }
  digit[3] = i;

  // 100s
  i = 0;
  while(val>0)
    a456:	16 16       	cp	r1, r22
    a458:	17 06       	cpc	r1, r23
    a45a:	d4 f3       	brlt	.-12     	; 0xa450 <decimal_sub2+0x62>
  {
    i++;
	val-=100;
  }
  if (val<0) { i--; val+=100; }
    a45c:	61 15       	cp	r22, r1
    a45e:	71 05       	cpc	r23, r1
    a460:	19 f0       	breq	.+6      	; 0xa468 <decimal_sub2+0x7a>
    a462:	81 50       	subi	r24, 0x01	; 1
    a464:	6c 59       	subi	r22, 0x9C	; 156
    a466:	7f 4f       	sbci	r23, 0xFF	; 255
  digit[2] = i;
    a468:	82 83       	std	Z+2, r24	; 0x02
    a46a:	80 e0       	ldi	r24, 0x00	; 0
    a46c:	03 c0       	rjmp	.+6      	; 0xa474 <decimal_sub2+0x86>

  // tens
  i = 0;
  while(val>0)
  {
    i++;
    a46e:	8f 5f       	subi	r24, 0xFF	; 255
	val-=10;
    a470:	6a 50       	subi	r22, 0x0A	; 10
    a472:	70 40       	sbci	r23, 0x00	; 0
  if (val<0) { i--; val+=100; }
  digit[2] = i;

  // tens
  i = 0;
  while(val>0)
    a474:	16 16       	cp	r1, r22
    a476:	17 06       	cpc	r1, r23
    a478:	d4 f3       	brlt	.-12     	; 0xa46e <decimal_sub2+0x80>
  {
    i++;
	val-=10;
  }
  if (val<0) { i--; val+=10; }
    a47a:	61 15       	cp	r22, r1
    a47c:	71 05       	cpc	r23, r1
    a47e:	19 f0       	breq	.+6      	; 0xa486 <decimal_sub2+0x98>
    a480:	81 50       	subi	r24, 0x01	; 1
    a482:	66 5f       	subi	r22, 0xF6	; 246
    a484:	7f 4f       	sbci	r23, 0xFF	; 255
  digit[1] = i;
    a486:	81 83       	std	Z+1, r24	; 0x01

  digit[0] = (char) val;
    a488:	60 83       	st	Z, r22

  return(i+1);
}
    a48a:	8f 5f       	subi	r24, 0xFF	; 255
    a48c:	08 95       	ret

0000a48e <uze_hiscore_getrank>:
}



s8	uze_hiscore_getrank(s16 newscore)
{
    a48e:	ac 01       	movw	r20, r24
    a490:	e0 91 8c 0e 	lds	r30, 0x0E8C
    a494:	f0 91 8d 0e 	lds	r31, 0x0E8D
    a498:	20 e0       	ldi	r18, 0x00	; 0
	s8 	i;

	new_position=-1;
	for (i=0;i<MAX_HISCORE;i++)
	{
		if (newscore > scores[i].val)
    a49a:	80 81       	ld	r24, Z
    a49c:	91 81       	ldd	r25, Z+1	; 0x01
    a49e:	84 17       	cp	r24, r20
    a4a0:	95 07       	cpc	r25, r21
    a4a2:	10 f4       	brcc	.+4      	; 0xa4a8 <uze_hiscore_getrank+0x1a>
    a4a4:	82 2f       	mov	r24, r18
    a4a6:	08 95       	ret
{
	s8 	new_position;
	s8 	i;

	new_position=-1;
	for (i=0;i<MAX_HISCORE;i++)
    a4a8:	2f 5f       	subi	r18, 0xFF	; 255
    a4aa:	36 96       	adiw	r30, 0x06	; 6
    a4ac:	25 30       	cpi	r18, 0x05	; 5
    a4ae:	a9 f7       	brne	.-22     	; 0xa49a <uze_hiscore_getrank+0xc>
    a4b0:	8f ef       	ldi	r24, 0xFF	; 255
			new_position=i;
			break;
		}
	}
	return(new_position);
}
    a4b2:	08 95       	ret

0000a4b4 <uze_hiscore_init>:
	}
}


void uze_hiscore_init()
{
    a4b4:	e0 91 8c 0e 	lds	r30, 0x0E8C
    a4b8:	f0 91 8d 0e 	lds	r31, 0x0E8D
    a4bc:	82 e3       	ldi	r24, 0x32	; 50
    a4be:	90 e0       	ldi	r25, 0x00	; 0
	u8 i;

	for ( i=0; i<MAX_HISCORE; i++ )
	{
		scores[i].val = (unsigned short) 10*(MAX_HISCORE-i);
		scores[i].name[0]='U';
    a4c0:	45 e5       	ldi	r20, 0x55	; 85
		scores[i].name[1]='Z';
    a4c2:	3a e5       	ldi	r19, 0x5A	; 90
		scores[i].name[2]='E';
    a4c4:	25 e4       	ldi	r18, 0x45	; 69
{
	u8 i;

	for ( i=0; i<MAX_HISCORE; i++ )
	{
		scores[i].val = (unsigned short) 10*(MAX_HISCORE-i);
    a4c6:	91 83       	std	Z+1, r25	; 0x01
    a4c8:	80 83       	st	Z, r24
		scores[i].name[0]='U';
    a4ca:	42 83       	std	Z+2, r20	; 0x02
		scores[i].name[1]='Z';
    a4cc:	33 83       	std	Z+3, r19	; 0x03
		scores[i].name[2]='E';
    a4ce:	24 83       	std	Z+4, r18	; 0x04
		scores[i].name[3]=0;
    a4d0:	15 82       	std	Z+5, r1	; 0x05
    a4d2:	0a 97       	sbiw	r24, 0x0a	; 10
    a4d4:	36 96       	adiw	r30, 0x06	; 6

void uze_hiscore_init()
{
	u8 i;

	for ( i=0; i<MAX_HISCORE; i++ )
    a4d6:	00 97       	sbiw	r24, 0x00	; 0
    a4d8:	b1 f7       	brne	.-20     	; 0xa4c6 <uze_hiscore_init+0x12>
		scores[i].name[0]='U';
		scores[i].name[1]='Z';
		scores[i].name[2]='E';
		scores[i].name[3]=0;
	}
}
    a4da:	08 95       	ret

0000a4dc <hit_block_vs_baddie>:
			  //	sound(SFX_SNOBEE_DIE,SD_NORMAL);
			  //	respawn(i);
			}
		}
	}
}
    a4dc:	08 95       	ret

0000a4de <read_map>:
	SPRITE( k + f,x,y,0,0);
}


int		read_map(s16 x,s16 y)
{
    a4de:	fc 01       	movw	r30, r24
	if (x<0) return(0x80|WALL_LEFT);
    a4e0:	97 ff       	sbrs	r25, 7
    a4e2:	03 c0       	rjmp	.+6      	; 0xa4ea <read_map+0xc>
    a4e4:	28 e8       	ldi	r18, 0x88	; 136
    a4e6:	30 e0       	ldi	r19, 0x00	; 0
    a4e8:	1f c0       	rjmp	.+62     	; 0xa528 <read_map+0x4a>
	if (x>=MAPW)return(0x80|WALL_RIGHT);
    a4ea:	8d 30       	cpi	r24, 0x0D	; 13
    a4ec:	91 05       	cpc	r25, r1
    a4ee:	1c f0       	brlt	.+6      	; 0xa4f6 <read_map+0x18>
    a4f0:	22 e8       	ldi	r18, 0x82	; 130
    a4f2:	30 e0       	ldi	r19, 0x00	; 0
    a4f4:	19 c0       	rjmp	.+50     	; 0xa528 <read_map+0x4a>
	if (y<0) return(0x80|WALL_TOP);
    a4f6:	77 ff       	sbrs	r23, 7
    a4f8:	03 c0       	rjmp	.+6      	; 0xa500 <read_map+0x22>
    a4fa:	21 e8       	ldi	r18, 0x81	; 129
    a4fc:	30 e0       	ldi	r19, 0x00	; 0
    a4fe:	14 c0       	rjmp	.+40     	; 0xa528 <read_map+0x4a>
	if (y>=MAPH) return(0x80|WALL_BOT);
    a500:	6b 30       	cpi	r22, 0x0B	; 11
    a502:	71 05       	cpc	r23, r1
    a504:	1c f0       	brlt	.+6      	; 0xa50c <read_map+0x2e>
    a506:	24 e8       	ldi	r18, 0x84	; 132
    a508:	30 e0       	ldi	r19, 0x00	; 0
    a50a:	0e c0       	rjmp	.+28     	; 0xa528 <read_map+0x4a>
	return(rmap(x,y)&15);
    a50c:	a4 e0       	ldi	r26, 0x04	; 4
    a50e:	66 0f       	add	r22, r22
    a510:	77 1f       	adc	r23, r23
    a512:	aa 95       	dec	r26
    a514:	e1 f7       	brne	.-8      	; 0xa50e <read_map+0x30>
    a516:	e5 50       	subi	r30, 0x05	; 5
    a518:	f1 4f       	sbci	r31, 0xF1	; 241
    a51a:	e6 0f       	add	r30, r22
    a51c:	f7 1f       	adc	r31, r23
    a51e:	80 81       	ld	r24, Z
    a520:	28 2f       	mov	r18, r24
    a522:	30 e0       	ldi	r19, 0x00	; 0
    a524:	2f 70       	andi	r18, 0x0F	; 15
    a526:	30 70       	andi	r19, 0x00	; 0
}
    a528:	c9 01       	movw	r24, r18
    a52a:	08 95       	ret

0000a52c <read_map_index>:

int		read_map_index(s16 x,s16 y)
{
    a52c:	fc 01       	movw	r30, r24
	if (x<0) return(0x80|WALL_LEFT);
    a52e:	97 ff       	sbrs	r25, 7
    a530:	03 c0       	rjmp	.+6      	; 0xa538 <read_map_index+0xc>
    a532:	28 e8       	ldi	r18, 0x88	; 136
    a534:	30 e0       	ldi	r19, 0x00	; 0
    a536:	1f c0       	rjmp	.+62     	; 0xa576 <read_map_index+0x4a>
	if (x>=MAPW)return(0x80|WALL_RIGHT);
    a538:	8d 30       	cpi	r24, 0x0D	; 13
    a53a:	91 05       	cpc	r25, r1
    a53c:	1c f0       	brlt	.+6      	; 0xa544 <read_map_index+0x18>
    a53e:	22 e8       	ldi	r18, 0x82	; 130
    a540:	30 e0       	ldi	r19, 0x00	; 0
    a542:	19 c0       	rjmp	.+50     	; 0xa576 <read_map_index+0x4a>
	if (y<0) return(0x80|WALL_TOP);
    a544:	77 ff       	sbrs	r23, 7
    a546:	03 c0       	rjmp	.+6      	; 0xa54e <read_map_index+0x22>
    a548:	21 e8       	ldi	r18, 0x81	; 129
    a54a:	30 e0       	ldi	r19, 0x00	; 0
    a54c:	14 c0       	rjmp	.+40     	; 0xa576 <read_map_index+0x4a>
	if (y>=MAPH) return(0x80|WALL_BOT);
    a54e:	6b 30       	cpi	r22, 0x0B	; 11
    a550:	71 05       	cpc	r23, r1
    a552:	1c f0       	brlt	.+6      	; 0xa55a <read_map_index+0x2e>
    a554:	24 e8       	ldi	r18, 0x84	; 132
    a556:	30 e0       	ldi	r19, 0x00	; 0
    a558:	0e c0       	rjmp	.+28     	; 0xa576 <read_map_index+0x4a>
	return((rmap(x,y)>>4)&15);
    a55a:	b4 e0       	ldi	r27, 0x04	; 4
    a55c:	66 0f       	add	r22, r22
    a55e:	77 1f       	adc	r23, r23
    a560:	ba 95       	dec	r27
    a562:	e1 f7       	brne	.-8      	; 0xa55c <read_map_index+0x30>
    a564:	e5 50       	subi	r30, 0x05	; 5
    a566:	f1 4f       	sbci	r31, 0xF1	; 241
    a568:	e6 0f       	add	r30, r22
    a56a:	f7 1f       	adc	r31, r23
    a56c:	80 81       	ld	r24, Z
    a56e:	82 95       	swap	r24
    a570:	8f 70       	andi	r24, 0x0F	; 15
    a572:	28 2f       	mov	r18, r24
    a574:	30 e0       	ldi	r19, 0x00	; 0
}
    a576:	c9 01       	movw	r24, r18
    a578:	08 95       	ret

0000a57a <player_walk>:



void	player_walk()
{
  	player_frame++;
    a57a:	80 91 b6 0e 	lds	r24, 0x0EB6
    a57e:	8f 5f       	subi	r24, 0xFF	; 255
    a580:	80 93 b6 0e 	sts	0x0EB6, r24
  	player_x+=2*spd[player_dir].x;
    a584:	e0 91 83 0e 	lds	r30, 0x0E83
    a588:	f0 e0       	ldi	r31, 0x00	; 0
    a58a:	ee 0f       	add	r30, r30
    a58c:	ff 1f       	adc	r31, r31
    a58e:	ef 5f       	subi	r30, 0xFF	; 255
    a590:	fe 4f       	sbci	r31, 0xFE	; 254
    a592:	20 81       	ld	r18, Z
    a594:	33 27       	eor	r19, r19
    a596:	27 fd       	sbrc	r18, 7
    a598:	30 95       	com	r19
    a59a:	22 0f       	add	r18, r18
    a59c:	33 1f       	adc	r19, r19
    a59e:	80 91 fc 0f 	lds	r24, 0x0FFC
    a5a2:	90 91 fd 0f 	lds	r25, 0x0FFD
    a5a6:	82 0f       	add	r24, r18
    a5a8:	93 1f       	adc	r25, r19
    a5aa:	90 93 fd 0f 	sts	0x0FFD, r25
    a5ae:	80 93 fc 0f 	sts	0x0FFC, r24
  	player_y+=2*spd[player_dir].y;
    a5b2:	21 81       	ldd	r18, Z+1	; 0x01
    a5b4:	33 27       	eor	r19, r19
    a5b6:	27 fd       	sbrc	r18, 7
    a5b8:	30 95       	com	r19
    a5ba:	22 0f       	add	r18, r18
    a5bc:	33 1f       	adc	r19, r19
    a5be:	80 91 87 0e 	lds	r24, 0x0E87
    a5c2:	90 91 88 0e 	lds	r25, 0x0E88
    a5c6:	82 0f       	add	r24, r18
    a5c8:	93 1f       	adc	r25, r19
    a5ca:	90 93 88 0e 	sts	0x0E88, r25
    a5ce:	80 93 87 0e 	sts	0x0E87, r24
	player_gtimer--;
    a5d2:	80 91 8b 0e 	lds	r24, 0x0E8B
	player_gtimer--;
    a5d6:	82 50       	subi	r24, 0x02	; 2
    a5d8:	80 93 8b 0e 	sts	0x0E8B, r24
	if (player_gtimer<=0)
    a5dc:	18 16       	cp	r1, r24
    a5de:	1c f0       	brlt	.+6      	; 0xa5e6 <player_walk+0x6c>
	{
		player_ctrl=PLAYER_ALIVE;
    a5e0:	81 e0       	ldi	r24, 0x01	; 1
    a5e2:	80 93 dd 0e 	sts	0x0EDD, r24
    a5e6:	08 95       	ret

0000a5e8 <check_supas>:
	state = STATE_DIAMONDS;
 	gtimer = TIME_STARS;
}

void check_supas()
{
    a5e8:	0f 93       	push	r16
    a5ea:	1f 93       	push	r17
    a5ec:	cf 93       	push	r28
    a5ee:	df 93       	push	r29
	s16 dx01,dx12,dx20;
	s16 dy01,dy12,dy20;

	supa_count=0;
    a5f0:	10 92 e3 0e 	sts	0x0EE3, r1
   	dx01 = abs(supa_x[0]-supa_x[1]);
    a5f4:	80 91 de 0e 	lds	r24, 0x0EDE
    a5f8:	68 2f       	mov	r22, r24
    a5fa:	70 e0       	ldi	r23, 0x00	; 0
    a5fc:	80 91 df 0e 	lds	r24, 0x0EDF
    a600:	48 2f       	mov	r20, r24
    a602:	50 e0       	ldi	r21, 0x00	; 0
    a604:	eb 01       	movw	r28, r22
    a606:	c4 1b       	sub	r28, r20
    a608:	d5 0b       	sbc	r29, r21
    a60a:	d7 ff       	sbrs	r29, 7
    a60c:	03 c0       	rjmp	.+6      	; 0xa614 <check_supas+0x2c>
    a60e:	d0 95       	com	r29
    a610:	c1 95       	neg	r28
    a612:	df 4f       	sbci	r29, 0xFF	; 255
	dx12 = abs(supa_x[1]-supa_x[2]);
    a614:	80 91 e0 0e 	lds	r24, 0x0EE0
    a618:	28 2f       	mov	r18, r24
    a61a:	30 e0       	ldi	r19, 0x00	; 0
    a61c:	da 01       	movw	r26, r20
    a61e:	a2 1b       	sub	r26, r18
    a620:	b3 0b       	sbc	r27, r19
    a622:	b7 ff       	sbrs	r27, 7
    a624:	03 c0       	rjmp	.+6      	; 0xa62c <check_supas+0x44>
    a626:	b0 95       	com	r27
    a628:	a1 95       	neg	r26
    a62a:	bf 4f       	sbci	r27, 0xFF	; 255
	dx20 = abs(supa_x[2]-supa_x[0]);
    a62c:	f9 01       	movw	r30, r18
    a62e:	e6 1b       	sub	r30, r22
    a630:	f7 0b       	sbc	r31, r23
    a632:	f7 ff       	sbrs	r31, 7
    a634:	03 c0       	rjmp	.+6      	; 0xa63c <check_supas+0x54>
    a636:	f0 95       	com	r31
    a638:	e1 95       	neg	r30
    a63a:	ff 4f       	sbci	r31, 0xFF	; 255
   	dy01 = abs(supa_y[0]-supa_y[1]);
    a63c:	80 91 99 0e 	lds	r24, 0x0E99
    a640:	08 2f       	mov	r16, r24
    a642:	10 e0       	ldi	r17, 0x00	; 0
    a644:	80 91 9a 0e 	lds	r24, 0x0E9A
    a648:	28 2f       	mov	r18, r24
    a64a:	30 e0       	ldi	r19, 0x00	; 0
    a64c:	b8 01       	movw	r22, r16
    a64e:	62 1b       	sub	r22, r18
    a650:	73 0b       	sbc	r23, r19
    a652:	77 ff       	sbrs	r23, 7
    a654:	03 c0       	rjmp	.+6      	; 0xa65c <check_supas+0x74>
    a656:	70 95       	com	r23
    a658:	61 95       	neg	r22
    a65a:	7f 4f       	sbci	r23, 0xFF	; 255
	dy12 = abs(supa_y[1]-supa_y[2]);
    a65c:	80 91 9b 0e 	lds	r24, 0x0E9B
    a660:	90 e0       	ldi	r25, 0x00	; 0
    a662:	a9 01       	movw	r20, r18
    a664:	48 1b       	sub	r20, r24
    a666:	59 0b       	sbc	r21, r25
    a668:	57 ff       	sbrs	r21, 7
    a66a:	03 c0       	rjmp	.+6      	; 0xa672 <check_supas+0x8a>
    a66c:	50 95       	com	r21
    a66e:	41 95       	neg	r20
    a670:	5f 4f       	sbci	r21, 0xFF	; 255
	dy20 = abs(supa_y[2]-supa_y[0]);
    a672:	9c 01       	movw	r18, r24
    a674:	20 1b       	sub	r18, r16
    a676:	31 0b       	sbc	r19, r17
    a678:	37 ff       	sbrs	r19, 7
    a67a:	03 c0       	rjmp	.+6      	; 0xa682 <check_supas+0x9a>
    a67c:	30 95       	com	r19
    a67e:	21 95       	neg	r18
    a680:	3f 4f       	sbci	r19, 0xFF	; 255

	if (dx01&dx12&dx20&dy01&dy12&dy20)
    a682:	cd 01       	movw	r24, r26
    a684:	8c 23       	and	r24, r28
    a686:	9d 23       	and	r25, r29
    a688:	8e 23       	and	r24, r30
    a68a:	9f 23       	and	r25, r31
    a68c:	86 23       	and	r24, r22
    a68e:	97 23       	and	r25, r23
    a690:	84 23       	and	r24, r20
    a692:	95 23       	and	r25, r21
    a694:	82 23       	and	r24, r18
    a696:	93 23       	and	r25, r19
    a698:	89 2b       	or	r24, r25
    a69a:	09 f0       	breq	.+2      	; 0xa69e <check_supas+0xb6>
    a69c:	7c c0       	rjmp	.+248    	; 0xa796 <check_supas+0x1ae>
		return;

	dx01>>=4;
    a69e:	14 e0       	ldi	r17, 0x04	; 4
    a6a0:	d5 95       	asr	r29
    a6a2:	c7 95       	ror	r28
    a6a4:	1a 95       	dec	r17
    a6a6:	e1 f7       	brne	.-8      	; 0xa6a0 <check_supas+0xb8>
	dx12>>=4;
    a6a8:	cd 01       	movw	r24, r26
    a6aa:	a4 e0       	ldi	r26, 0x04	; 4
    a6ac:	95 95       	asr	r25
    a6ae:	87 95       	ror	r24
    a6b0:	aa 95       	dec	r26
    a6b2:	e1 f7       	brne	.-8      	; 0xa6ac <check_supas+0xc4>
	dx20>>=4;
    a6b4:	04 e0       	ldi	r16, 0x04	; 4
    a6b6:	f5 95       	asr	r31
    a6b8:	e7 95       	ror	r30
    a6ba:	0a 95       	dec	r16
    a6bc:	e1 f7       	brne	.-8      	; 0xa6b6 <check_supas+0xce>
    dy01>>=4;
    a6be:	14 e0       	ldi	r17, 0x04	; 4
    a6c0:	75 95       	asr	r23
    a6c2:	67 95       	ror	r22
    a6c4:	1a 95       	dec	r17
    a6c6:	e1 f7       	brne	.-8      	; 0xa6c0 <check_supas+0xd8>
	dy12>>=4;
    a6c8:	b4 e0       	ldi	r27, 0x04	; 4
    a6ca:	55 95       	asr	r21
    a6cc:	47 95       	ror	r20
    a6ce:	ba 95       	dec	r27
    a6d0:	e1 f7       	brne	.-8      	; 0xa6ca <check_supas+0xe2>
	dy20>>=4;
    a6d2:	a4 e0       	ldi	r26, 0x04	; 4
    a6d4:	35 95       	asr	r19
    a6d6:	27 95       	ror	r18
    a6d8:	aa 95       	dec	r26
    a6da:	e1 f7       	brne	.-8      	; 0xa6d4 <check_supas+0xec>

	if (dx01==0 && dx12==0 && dy01<=1 && dy12<=1)
    a6dc:	20 97       	sbiw	r28, 0x00	; 0
    a6de:	81 f4       	brne	.+32     	; 0xa700 <check_supas+0x118>
    a6e0:	00 97       	sbiw	r24, 0x00	; 0
    a6e2:	31 f4       	brne	.+12     	; 0xa6f0 <check_supas+0x108>
    a6e4:	62 30       	cpi	r22, 0x02	; 2
    a6e6:	71 05       	cpc	r23, r1
    a6e8:	1c f4       	brge	.+6      	; 0xa6f0 <check_supas+0x108>
    a6ea:	42 30       	cpi	r20, 0x02	; 2
    a6ec:	51 05       	cpc	r21, r1
    a6ee:	9c f1       	brlt	.+102    	; 0xa756 <check_supas+0x16e>
	{
	   supa_count=2;
	   return;
	}
    if (dx01==0 && dx20==0 && dy01<=1 && dy20<=1)
    a6f0:	30 97       	sbiw	r30, 0x00	; 0
    a6f2:	31 f4       	brne	.+12     	; 0xa700 <check_supas+0x118>
    a6f4:	62 30       	cpi	r22, 0x02	; 2
    a6f6:	71 05       	cpc	r23, r1
    a6f8:	1c f4       	brge	.+6      	; 0xa700 <check_supas+0x118>
    a6fa:	22 30       	cpi	r18, 0x02	; 2
    a6fc:	31 05       	cpc	r19, r1
    a6fe:	5c f1       	brlt	.+86     	; 0xa756 <check_supas+0x16e>
	{
	   supa_count=2;
	   return;
	}
    if (dx12==0 && dx20==0 && dy12<=1 && dy20<=1)
    a700:	00 97       	sbiw	r24, 0x00	; 0
    a702:	41 f4       	brne	.+16     	; 0xa714 <check_supas+0x12c>
    a704:	30 97       	sbiw	r30, 0x00	; 0
    a706:	31 f4       	brne	.+12     	; 0xa714 <check_supas+0x12c>
    a708:	42 30       	cpi	r20, 0x02	; 2
    a70a:	51 05       	cpc	r21, r1
    a70c:	1c f4       	brge	.+6      	; 0xa714 <check_supas+0x12c>
    a70e:	22 30       	cpi	r18, 0x02	; 2
    a710:	31 05       	cpc	r19, r1
    a712:	0c f1       	brlt	.+66     	; 0xa756 <check_supas+0x16e>
	{
	   supa_count=2;
	   return;
	}

    if (dy01==0 && dy12==0 && dx01<=1 && dx12<=1)
    a714:	61 15       	cp	r22, r1
    a716:	71 05       	cpc	r23, r1
    a718:	91 f4       	brne	.+36     	; 0xa73e <check_supas+0x156>
    a71a:	41 15       	cp	r20, r1
    a71c:	51 05       	cpc	r21, r1
    a71e:	31 f4       	brne	.+12     	; 0xa72c <check_supas+0x144>
    a720:	c2 30       	cpi	r28, 0x02	; 2
    a722:	d1 05       	cpc	r29, r1
    a724:	1c f4       	brge	.+6      	; 0xa72c <check_supas+0x144>
    a726:	82 30       	cpi	r24, 0x02	; 2
    a728:	91 05       	cpc	r25, r1
    a72a:	ac f0       	brlt	.+42     	; 0xa756 <check_supas+0x16e>
	{
	   supa_count=2;
	   return;
	}

	if (dy01==0 && dy20==0 && dx01<=1 && dx20<=1)
    a72c:	21 15       	cp	r18, r1
    a72e:	31 05       	cpc	r19, r1
    a730:	31 f4       	brne	.+12     	; 0xa73e <check_supas+0x156>
    a732:	c2 30       	cpi	r28, 0x02	; 2
    a734:	d1 05       	cpc	r29, r1
    a736:	1c f4       	brge	.+6      	; 0xa73e <check_supas+0x156>
    a738:	e2 30       	cpi	r30, 0x02	; 2
    a73a:	f1 05       	cpc	r31, r1
    a73c:	64 f0       	brlt	.+24     	; 0xa756 <check_supas+0x16e>
	{
	   supa_count=2;
	   return;
	}

    if (dy12==0 && dy20==0 && dx12<=1 && dx20<=1)
    a73e:	41 15       	cp	r20, r1
    a740:	51 05       	cpc	r21, r1
    a742:	59 f4       	brne	.+22     	; 0xa75a <check_supas+0x172>
    a744:	21 15       	cp	r18, r1
    a746:	31 05       	cpc	r19, r1
    a748:	41 f4       	brne	.+16     	; 0xa75a <check_supas+0x172>
    a74a:	82 30       	cpi	r24, 0x02	; 2
    a74c:	91 05       	cpc	r25, r1
    a74e:	2c f4       	brge	.+10     	; 0xa75a <check_supas+0x172>
    a750:	e2 30       	cpi	r30, 0x02	; 2
    a752:	f1 05       	cpc	r31, r1
    a754:	14 f4       	brge	.+4      	; 0xa75a <check_supas+0x172>
	{
	   supa_count=2;
    a756:	82 e0       	ldi	r24, 0x02	; 2
    a758:	1c c0       	rjmp	.+56     	; 0xa792 <check_supas+0x1aa>
	   return;
	}


	if (dx01==0 && dy01<=1)
    a75a:	20 97       	sbiw	r28, 0x00	; 0
    a75c:	19 f4       	brne	.+6      	; 0xa764 <check_supas+0x17c>
    a75e:	62 30       	cpi	r22, 0x02	; 2
    a760:	71 05       	cpc	r23, r1
    a762:	b4 f0       	brlt	.+44     	; 0xa790 <check_supas+0x1a8>
	{
	   supa_count=1;
	   return;
	}
    if (dx12==0 && dy12<=1)
    a764:	00 97       	sbiw	r24, 0x00	; 0
    a766:	19 f4       	brne	.+6      	; 0xa76e <check_supas+0x186>
    a768:	42 30       	cpi	r20, 0x02	; 2
    a76a:	51 05       	cpc	r21, r1
    a76c:	8c f0       	brlt	.+34     	; 0xa790 <check_supas+0x1a8>
	{
       supa_count=1;
	   return;
	}
    if (dx20==0 && dy20<=1)
    a76e:	30 97       	sbiw	r30, 0x00	; 0
    a770:	19 f4       	brne	.+6      	; 0xa778 <check_supas+0x190>
    a772:	22 30       	cpi	r18, 0x02	; 2
    a774:	31 05       	cpc	r19, r1
    a776:	64 f0       	brlt	.+24     	; 0xa790 <check_supas+0x1a8>
	{
       supa_count=1;
	   return;
	}
    if (dy01==0 && dx01<=1)
    a778:	67 2b       	or	r22, r23
    a77a:	11 f4       	brne	.+4      	; 0xa780 <check_supas+0x198>
    a77c:	22 97       	sbiw	r28, 0x02	; 2
    a77e:	44 f0       	brlt	.+16     	; 0xa790 <check_supas+0x1a8>
	{
       supa_count=1;
	   return;
	}
    if (dy12==0 && dx12<=1)
    a780:	45 2b       	or	r20, r21
    a782:	11 f4       	brne	.+4      	; 0xa788 <check_supas+0x1a0>
    a784:	02 97       	sbiw	r24, 0x02	; 2
    a786:	24 f0       	brlt	.+8      	; 0xa790 <check_supas+0x1a8>
	{
	   supa_count=1;
	   return;
	}
    if (dy20==0 && dx20<=1)
    a788:	23 2b       	or	r18, r19
    a78a:	29 f4       	brne	.+10     	; 0xa796 <check_supas+0x1ae>
    a78c:	32 97       	sbiw	r30, 0x02	; 2
    a78e:	1c f4       	brge	.+6      	; 0xa796 <check_supas+0x1ae>
	{
	   supa_count=1;
    a790:	81 e0       	ldi	r24, 0x01	; 1
    a792:	80 93 e3 0e 	sts	0x0EE3, r24
	   return;
	}
}
    a796:	df 91       	pop	r29
    a798:	cf 91       	pop	r28
    a79a:	1f 91       	pop	r17
    a79c:	0f 91       	pop	r16
    a79e:	08 95       	ret

0000a7a0 <block_move>:


void	block_move()
{
    a7a0:	ff 92       	push	r15
    a7a2:	0f 93       	push	r16
    a7a4:	1f 93       	push	r17
    a7a6:	cf 93       	push	r28
    a7a8:	df 93       	push	r29
	s16 x,y;
	s16 ok;
	#define m 2

  	block_x+=m*spd[block_dir].x;
    a7aa:	f0 90 9d 0e 	lds	r15, 0x0E9D
    a7ae:	ef 2d       	mov	r30, r15
    a7b0:	f0 e0       	ldi	r31, 0x00	; 0
    a7b2:	ee 0f       	add	r30, r30
    a7b4:	ff 1f       	adc	r31, r31
    a7b6:	ef 5f       	subi	r30, 0xFF	; 255
    a7b8:	fe 4f       	sbci	r31, 0xFE	; 254
    a7ba:	80 81       	ld	r24, Z
    a7bc:	48 2f       	mov	r20, r24
    a7be:	55 27       	eor	r21, r21
    a7c0:	47 fd       	sbrc	r20, 7
    a7c2:	50 95       	com	r21
    a7c4:	ca 01       	movw	r24, r20
    a7c6:	88 0f       	add	r24, r24
    a7c8:	99 1f       	adc	r25, r25
    a7ca:	20 91 81 0e 	lds	r18, 0x0E81
    a7ce:	28 0f       	add	r18, r24
    a7d0:	20 93 81 0e 	sts	0x0E81, r18
  	block_y+=m*spd[block_dir].y;
    a7d4:	81 81       	ldd	r24, Z+1	; 0x01
    a7d6:	68 2f       	mov	r22, r24
    a7d8:	77 27       	eor	r23, r23
    a7da:	67 fd       	sbrc	r22, 7
    a7dc:	70 95       	com	r23
    a7de:	cb 01       	movw	r24, r22
    a7e0:	88 0f       	add	r24, r24
    a7e2:	99 1f       	adc	r25, r25
    a7e4:	90 91 e7 0e 	lds	r25, 0x0EE7
    a7e8:	98 0f       	add	r25, r24
    a7ea:	90 93 e7 0e 	sts	0x0EE7, r25
	block_count-=m;
    a7ee:	80 91 c2 0e 	lds	r24, 0x0EC2
    a7f2:	82 50       	subi	r24, 0x02	; 2
    a7f4:	80 93 c2 0e 	sts	0x0EC2, r24

	if (block_index!=255)
    a7f8:	e0 91 a5 0e 	lds	r30, 0x0EA5
    a7fc:	ef 3f       	cpi	r30, 0xFF	; 255
    a7fe:	41 f0       	breq	.+16     	; 0xa810 <block_move+0x70>
	{
		supa_x[block_index] = block_x;
    a800:	f0 e0       	ldi	r31, 0x00	; 0
    a802:	df 01       	movw	r26, r30
    a804:	a2 52       	subi	r26, 0x22	; 34
    a806:	b1 4f       	sbci	r27, 0xF1	; 241
    a808:	2c 93       	st	X, r18
		supa_y[block_index] = block_y;
    a80a:	e7 56       	subi	r30, 0x67	; 103
    a80c:	f1 4f       	sbci	r31, 0xF1	; 241
    a80e:	90 83       	st	Z, r25
	}

	if (block_count<=0)
    a810:	18 16       	cp	r1, r24
    a812:	0c f4       	brge	.+2      	; 0xa816 <block_move+0x76>
    a814:	4e c0       	rjmp	.+156    	; 0xa8b2 <block_move+0x112>
	{
		x=DIV16(block_x);
    a816:	22 95       	swap	r18
    a818:	2f 70       	andi	r18, 0x0F	; 15
    a81a:	c2 2f       	mov	r28, r18
    a81c:	d0 e0       	ldi	r29, 0x00	; 0
		y=DIV16(block_y);
    a81e:	92 95       	swap	r25
    a820:	9f 70       	andi	r25, 0x0F	; 15
    a822:	09 2f       	mov	r16, r25
    a824:	10 e0       	ldi	r17, 0x00	; 0
		ok=read_map(x+spd[block_dir].x,y+spd[block_dir].y);
    a826:	60 0f       	add	r22, r16
    a828:	71 1f       	adc	r23, r17
    a82a:	ce 01       	movw	r24, r28
    a82c:	84 0f       	add	r24, r20
    a82e:	95 1f       	adc	r25, r21
    a830:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
		// stop moving
		if (ok)
    a834:	89 2b       	or	r24, r25
    a836:	89 f1       	breq	.+98     	; 0xa89a <block_move+0xfa>
		{
			set_map(x,y,block_type);
    a838:	80 91 e2 0e 	lds	r24, 0x0EE2



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    a83c:	cd 30       	cpi	r28, 0x0D	; 13
    a83e:	d1 05       	cpc	r29, r1
    a840:	68 f4       	brcc	.+26     	; 0xa85c <block_move+0xbc>
	if (y<0|| y>=MAPH) return;
    a842:	0b 30       	cpi	r16, 0x0B	; 11
    a844:	11 05       	cpc	r17, r1
    a846:	50 f4       	brcc	.+20     	; 0xa85c <block_move+0xbc>
	rmap(x,y) = a;
    a848:	94 e0       	ldi	r25, 0x04	; 4
    a84a:	00 0f       	add	r16, r16
    a84c:	11 1f       	adc	r17, r17
    a84e:	9a 95       	dec	r25
    a850:	e1 f7       	brne	.-8      	; 0xa84a <block_move+0xaa>
    a852:	c5 50       	subi	r28, 0x05	; 5
    a854:	d1 4f       	sbci	r29, 0xF1	; 241
    a856:	c0 0f       	add	r28, r16
    a858:	d1 1f       	adc	r29, r17
    a85a:	88 83       	st	Y, r24
		// stop moving
		if (ok)
		{
			set_map(x,y,block_type);

			if (block_type>=BLOCK_SUPA && block_type<=BLOCK_SUPA+2)
    a85c:	84 50       	subi	r24, 0x04	; 4
    a85e:	83 30       	cpi	r24, 0x03	; 3
    a860:	b0 f4       	brcc	.+44     	; 0xa88e <block_move+0xee>
			{
			    if (supa_count!=255)
    a862:	80 91 e3 0e 	lds	r24, 0x0EE3
    a866:	8f 3f       	cpi	r24, 0xFF	; 255
    a868:	11 f0       	breq	.+4      	; 0xa86e <block_move+0xce>
			   		check_supas();
    a86a:	0e 94 f4 52 	call	0xa5e8	; 0xa5e8 <check_supas>
				if (supa_count==2)
    a86e:	80 91 e3 0e 	lds	r24, 0x0EE3
    a872:	82 30       	cpi	r24, 0x02	; 2
    a874:	49 f4       	brne	.+18     	; 0xa888 <block_move+0xe8>



void trigger_stars()
{
	state = STATE_DIAMONDS;
    a876:	86 e0       	ldi	r24, 0x06	; 6
    a878:	80 93 ba 0e 	sts	0x0EBA, r24
 	gtimer = TIME_STARS;
    a87c:	80 e9       	ldi	r24, 0x90	; 144
    a87e:	91 e0       	ldi	r25, 0x01	; 1
    a880:	90 93 8a 0e 	sts	0x0E8A, r25
    a884:	80 93 89 0e 	sts	0x0E89, r24
			{
			    if (supa_count!=255)
			   		check_supas();
				if (supa_count==2)
					trigger_stars();
				block_index=255;
    a888:	8f ef       	ldi	r24, 0xFF	; 255
    a88a:	80 93 a5 0e 	sts	0x0EA5, r24
			}
	 		block_ctrl=BLOCK_REMOVE;
    a88e:	83 e0       	ldi	r24, 0x03	; 3
    a890:	80 93 ae 0e 	sts	0x0EAE, r24
		   	block_frame=0;
    a894:	10 92 e6 0e 	sts	0x0EE6, r1
    a898:	0e c0       	rjmp	.+28     	; 0xa8b6 <block_move+0x116>
			return;
		}
		else
		{
			block_count=YGAP;
    a89a:	80 e1       	ldi	r24, 0x10	; 16
    a89c:	80 93 c2 0e 	sts	0x0EC2, r24
			if (block_dir==1 || block_dir==3) block_count=XGAP;
    a8a0:	81 e0       	ldi	r24, 0x01	; 1
    a8a2:	f8 16       	cp	r15, r24
    a8a4:	19 f0       	breq	.+6      	; 0xa8ac <block_move+0x10c>
    a8a6:	83 e0       	ldi	r24, 0x03	; 3
    a8a8:	f8 16       	cp	r15, r24
    a8aa:	19 f4       	brne	.+6      	; 0xa8b2 <block_move+0x112>
    a8ac:	80 e1       	ldi	r24, 0x10	; 16
    a8ae:	80 93 c2 0e 	sts	0x0EC2, r24
		}
	}
	hit_block_vs_baddie();
    a8b2:	0e 94 6e 52 	call	0xa4dc	; 0xa4dc <hit_block_vs_baddie>
}
    a8b6:	df 91       	pop	r29
    a8b8:	cf 91       	pop	r28
    a8ba:	1f 91       	pop	r17
    a8bc:	0f 91       	pop	r16
    a8be:	ff 90       	pop	r15
    a8c0:	08 95       	ret

0000a8c2 <snoblock_crush>:

void	snoblock_crush()
{
	s16 x,y;

	if (snoblock_ctrl==0) return;
    a8c2:	80 91 ac 0e 	lds	r24, 0x0EAC
    a8c6:	88 23       	and	r24, r24
    a8c8:	79 f1       	breq	.+94     	; 0xa928 <snoblock_crush+0x66>

	snoblock_trigger--;
    a8ca:	80 91 17 10 	lds	r24, 0x1017
    a8ce:	81 50       	subi	r24, 0x01	; 1
    a8d0:	80 93 17 10 	sts	0x1017, r24
	if (snoblock_trigger<=0)
    a8d4:	18 16       	cp	r1, r24
    a8d6:	44 f1       	brlt	.+80     	; 0xa928 <snoblock_crush+0x66>
	{
		snoblock_frame++;
    a8d8:	80 91 e5 0e 	lds	r24, 0x0EE5
    a8dc:	8f 5f       	subi	r24, 0xFF	; 255
    a8de:	80 93 e5 0e 	sts	0x0EE5, r24
		snoblock_trigger = 10;
    a8e2:	9a e0       	ldi	r25, 0x0A	; 10
    a8e4:	90 93 17 10 	sts	0x1017, r25
		if (snoblock_frame >= 4)
    a8e8:	84 30       	cpi	r24, 0x04	; 4
    a8ea:	f0 f0       	brcs	.+60     	; 0xa928 <snoblock_crush+0x66>
		{
		    x=DIV16(snoblock_x);
    a8ec:	80 91 e4 0e 	lds	r24, 0x0EE4
    a8f0:	82 95       	swap	r24
    a8f2:	8f 70       	andi	r24, 0x0F	; 15
    a8f4:	e8 2f       	mov	r30, r24
    a8f6:	f0 e0       	ldi	r31, 0x00	; 0
			y=DIV16(snoblock_y);
    a8f8:	80 91 1e 10 	lds	r24, 0x101E



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    a8fc:	ed 30       	cpi	r30, 0x0D	; 13
    a8fe:	f1 05       	cpc	r31, r1
    a900:	80 f4       	brcc	.+32     	; 0xa922 <snoblock_crush+0x60>
		snoblock_frame++;
		snoblock_trigger = 10;
		if (snoblock_frame >= 4)
		{
		    x=DIV16(snoblock_x);
			y=DIV16(snoblock_y);
    a902:	82 95       	swap	r24
    a904:	8f 70       	andi	r24, 0x0F	; 15
    a906:	90 e0       	ldi	r25, 0x00	; 0


void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
	if (y<0|| y>=MAPH) return;
    a908:	8b 30       	cpi	r24, 0x0B	; 11
    a90a:	91 05       	cpc	r25, r1
    a90c:	50 f4       	brcc	.+20     	; 0xa922 <snoblock_crush+0x60>
	rmap(x,y) = a;
    a90e:	a4 e0       	ldi	r26, 0x04	; 4
    a910:	88 0f       	add	r24, r24
    a912:	99 1f       	adc	r25, r25
    a914:	aa 95       	dec	r26
    a916:	e1 f7       	brne	.-8      	; 0xa910 <snoblock_crush+0x4e>
    a918:	e5 50       	subi	r30, 0x05	; 5
    a91a:	f1 4f       	sbci	r31, 0xF1	; 241
    a91c:	e8 0f       	add	r30, r24
    a91e:	f9 1f       	adc	r31, r25
    a920:	10 82       	st	Z, r1
		if (snoblock_frame >= 4)
		{
		    x=DIV16(snoblock_x);
			y=DIV16(snoblock_y);
			set_map(x,y,BLOCK_FLOOR);
			snoblock_ctrl=2;
    a922:	82 e0       	ldi	r24, 0x02	; 2
    a924:	80 93 ac 0e 	sts	0x0EAC, r24
    a928:	08 95       	ret

0000a92a <start_block>:
}


void	start_block(s16 type,s16 x,s16 y)
{
	block_ctrl = BLOCK_ALIVE;
    a92a:	91 e0       	ldi	r25, 0x01	; 1
    a92c:	90 93 ae 0e 	sts	0x0EAE, r25
	block_x = (u8) MUL16(x);
    a930:	62 95       	swap	r22
    a932:	60 7f       	andi	r22, 0xF0	; 240
    a934:	60 93 81 0e 	sts	0x0E81, r22
	block_y = (u8) MUL16(y);
    a938:	42 95       	swap	r20
    a93a:	40 7f       	andi	r20, 0xF0	; 240
    a93c:	40 93 e7 0e 	sts	0x0EE7, r20
	block_oldx = (u8) MUL16(x);
    a940:	60 93 b7 0e 	sts	0x0EB7, r22
	block_oldy = (u8) MUL16(y);
    a944:	40 93 fb 0f 	sts	0x0FFB, r20
	block_oldsprite = BLOCK_SUPA_GREEN_TSP;
    a948:	9b e0       	ldi	r25, 0x0B	; 11
    a94a:	90 93 7f 0e 	sts	0x0E7F, r25
	block_type = (u8) type;
    a94e:	80 93 e2 0e 	sts	0x0EE2, r24
	block_index = 255;
    a952:	8f ef       	ldi	r24, 0xFF	; 255
    a954:	80 93 a5 0e 	sts	0x0EA5, r24
	block_frame=0;
    a958:	10 92 e6 0e 	sts	0x0EE6, r1
}
    a95c:	08 95       	ret

0000a95e <next_player>:
	}
}


s8 next_player(s8 i)
{
    a95e:	98 2f       	mov	r25, r24
	// select next player
	if (number_of_players==2)
    a960:	20 91 0c 10 	lds	r18, 0x100C
    a964:	22 30       	cpi	r18, 0x02	; 2
    a966:	11 f4       	brne	.+4      	; 0xa96c <next_player+0xe>
				i=i^1;
    a968:	81 e0       	ldi	r24, 0x01	; 1
    a96a:	98 27       	eor	r25, r24

	if (lives[i]<=0)
    a96c:	e9 2f       	mov	r30, r25
    a96e:	ff 27       	eor	r31, r31
    a970:	e7 fd       	sbrc	r30, 7
    a972:	f0 95       	com	r31
    a974:	e8 50       	subi	r30, 0x08	; 8
    a976:	f1 4f       	sbci	r31, 0xF1	; 241
    a978:	80 81       	ld	r24, Z
    a97a:	18 16       	cp	r1, r24
    a97c:	74 f0       	brlt	.+28     	; 0xa99a <next_player+0x3c>
	{
	  	if (number_of_players==2)
    a97e:	22 30       	cpi	r18, 0x02	; 2
    a980:	11 f4       	brne	.+4      	; 0xa986 <next_player+0x28>
			i=i^1;
    a982:	81 e0       	ldi	r24, 0x01	; 1
    a984:	98 27       	eor	r25, r24
		if (lives[i]<=0)
    a986:	e9 2f       	mov	r30, r25
    a988:	ff 27       	eor	r31, r31
    a98a:	e7 fd       	sbrc	r30, 7
    a98c:	f0 95       	com	r31
    a98e:	e8 50       	subi	r30, 0x08	; 8
    a990:	f1 4f       	sbci	r31, 0xF1	; 241
    a992:	80 81       	ld	r24, Z
    a994:	18 16       	cp	r1, r24
    a996:	0c f0       	brlt	.+2      	; 0xa99a <next_player+0x3c>
    a998:	9f ef       	ldi	r25, 0xFF	; 255
		{
			return(-1);
		}
	}
	return(i);
}
    a99a:	89 2f       	mov	r24, r25
    a99c:	08 95       	ret

0000a99e <player_die>:

void player_die()
{
	// spin player
	player_trigger--;
    a99e:	80 91 af 0e 	lds	r24, 0x0EAF
    a9a2:	81 50       	subi	r24, 0x01	; 1
    a9a4:	80 93 af 0e 	sts	0x0EAF, r24
	if (player_trigger<=0)
    a9a8:	18 16       	cp	r1, r24
    a9aa:	4c f0       	brlt	.+18     	; 0xa9be <player_die+0x20>
	{
		player_trigger=10;
    a9ac:	8a e0       	ldi	r24, 0x0A	; 10
    a9ae:	80 93 af 0e 	sts	0x0EAF, r24
		player_dir++;
    a9b2:	80 91 83 0e 	lds	r24, 0x0E83
    a9b6:	8f 5f       	subi	r24, 0xFF	; 255
		player_dir&=3;
    a9b8:	83 70       	andi	r24, 0x03	; 3
    a9ba:	80 93 83 0e 	sts	0x0E83, r24
	}
	player_gtimer--;
    a9be:	80 91 8b 0e 	lds	r24, 0x0E8B
    a9c2:	81 50       	subi	r24, 0x01	; 1
    a9c4:	80 93 8b 0e 	sts	0x0E8B, r24
	if (player_gtimer<=0)
    a9c8:	18 16       	cp	r1, r24
    a9ca:	6c f1       	brlt	.+90     	; 0xaa26 <player_die+0x88>
    {
 		lives[current_player]--;
    a9cc:	90 91 ad 0e 	lds	r25, 0x0EAD
    a9d0:	e9 2f       	mov	r30, r25
    a9d2:	ff 27       	eor	r31, r31
    a9d4:	e7 fd       	sbrc	r30, 7
    a9d6:	f0 95       	com	r31
    a9d8:	e8 50       	subi	r30, 0x08	; 8
    a9da:	f1 4f       	sbci	r31, 0xF1	; 241
    a9dc:	80 81       	ld	r24, Z
    a9de:	81 50       	subi	r24, 0x01	; 1
    a9e0:	80 83       	st	Z, r24
		if (lives[current_player]<=0)
    a9e2:	18 16       	cp	r1, r24
    a9e4:	1c f0       	brlt	.+6      	; 0xa9ec <player_die+0x4e>
	  	{
		  	lives[current_player]=0;
    a9e6:	10 82       	st	Z, r1
		  	state=STATE_GAMEOVER;
    a9e8:	89 e0       	ldi	r24, 0x09	; 9
    a9ea:	08 c0       	rjmp	.+16     	; 0xa9fc <player_die+0x5e>
			gtimer=2*SECOND;
		}
		else
		{
#ifdef TWOPLAYER
		   	current_player=next_player(current_player);
    a9ec:	89 2f       	mov	r24, r25
    a9ee:	0e 94 af 54 	call	0xa95e	; 0xa95e <next_player>
    a9f2:	80 93 ad 0e 	sts	0x0EAD, r24
		   	if (current_player==-1)
    a9f6:	8f 3f       	cpi	r24, 0xFF	; 255
    a9f8:	51 f4       	brne	.+20     	; 0xaa0e <player_die+0x70>
			{
				state = STATE_HISCORE;
    a9fa:	8b e0       	ldi	r24, 0x0B	; 11
    a9fc:	80 93 ba 0e 	sts	0x0EBA, r24
				gtimer = 2*SECOND;
    aa00:	88 e7       	ldi	r24, 0x78	; 120
    aa02:	90 e0       	ldi	r25, 0x00	; 0
    aa04:	90 93 8a 0e 	sts	0x0E8A, r25
    aa08:	80 93 89 0e 	sts	0x0E89, r24
    aa0c:	08 95       	ret
			}
			else
			{
		   		pend_state=STATE_PREGAME;
    aa0e:	82 e0       	ldi	r24, 0x02	; 2
    aa10:	80 93 ef 0e 	sts	0x0EEF, r24
				state = STATE_FADER_START;
    aa14:	83 e0       	ldi	r24, 0x03	; 3
    aa16:	80 93 ba 0e 	sts	0x0EBA, r24
				gtimer=SECOND;
    aa1a:	8c e3       	ldi	r24, 0x3C	; 60
    aa1c:	90 e0       	ldi	r25, 0x00	; 0
    aa1e:	90 93 8a 0e 	sts	0x0E8A, r25
    aa22:	80 93 89 0e 	sts	0x0E89, r24
    aa26:	08 95       	ret

0000aa28 <get_map>:




u8 get_map(s16 x,s16 y)
{
    aa28:	dc 01       	movw	r26, r24
    aa2a:	ab 01       	movw	r20, r22
	u8 a;
	u16 offset =  level[current_player];
    aa2c:	e0 91 ad 0e 	lds	r30, 0x0EAD
    aa30:	ff 27       	eor	r31, r31
    aa32:	e7 fd       	sbrc	r30, 7
    aa34:	f0 95       	com	r31
    aa36:	ea 52       	subi	r30, 0x2A	; 42
    aa38:	f1 4f       	sbci	r31, 0xF1	; 241
    aa3a:	20 81       	ld	r18, Z

	offset*=8*13;

	if (x<0) return(MAP_STARS);
    aa3c:	97 fd       	sbrc	r25, 7
    aa3e:	2a c0       	rjmp	.+84     	; 0xaa94 <get_map+0x6c>
	if (x>=15) return(MAP_STARS);
    aa40:	8f 30       	cpi	r24, 0x0F	; 15
    aa42:	91 05       	cpc	r25, r1
    aa44:	3c f5       	brge	.+78     	; 0xaa94 <get_map+0x6c>
    if (y<0) return(MAP_STARS);
    aa46:	77 fd       	sbrc	r23, 7
    aa48:	25 c0       	rjmp	.+74     	; 0xaa94 <get_map+0x6c>
	if (y>=13) return(MAP_STARS);
    aa4a:	6d 30       	cpi	r22, 0x0D	; 13
    aa4c:	71 05       	cpc	r23, r1
    aa4e:	14 f5       	brge	.+68     	; 0xaa94 <get_map+0x6c>


u8 get_map(s16 x,s16 y)
{
	u8 a;
	u16 offset =  level[current_player];
    aa50:	30 e0       	ldi	r19, 0x00	; 0
	if (x<0) return(MAP_STARS);
	if (x>=15) return(MAP_STARS);
    if (y<0) return(MAP_STARS);
	if (y>=13) return(MAP_STARS);

	a = BPTR(&levels[(x/2)+(8*y)+offset]);
    aa52:	83 e0       	ldi	r24, 0x03	; 3
    aa54:	44 0f       	add	r20, r20
    aa56:	55 1f       	adc	r21, r21
    aa58:	8a 95       	dec	r24
    aa5a:	e1 f7       	brne	.-8      	; 0xaa54 <get_map+0x2c>
    aa5c:	cd 01       	movw	r24, r26
    aa5e:	95 95       	asr	r25
    aa60:	87 95       	ror	r24
    aa62:	48 0f       	add	r20, r24
    aa64:	59 1f       	adc	r21, r25
    aa66:	88 e6       	ldi	r24, 0x68	; 104
    aa68:	90 e0       	ldi	r25, 0x00	; 0
    aa6a:	bc 01       	movw	r22, r24
    aa6c:	26 9f       	mul	r18, r22
    aa6e:	c0 01       	movw	r24, r0
    aa70:	27 9f       	mul	r18, r23
    aa72:	90 0d       	add	r25, r0
    aa74:	36 9f       	mul	r19, r22
    aa76:	90 0d       	add	r25, r0
    aa78:	11 24       	eor	r1, r1
    aa7a:	48 0f       	add	r20, r24
    aa7c:	59 1f       	adc	r21, r25
    aa7e:	44 54       	subi	r20, 0x44	; 68
    aa80:	57 4a       	sbci	r21, 0xA7	; 167
    aa82:	fa 01       	movw	r30, r20
    aa84:	64 91       	lpm	r22, Z+
	if ((x&1)) a>>=4;
    aa86:	a0 ff       	sbrs	r26, 0
    aa88:	02 c0       	rjmp	.+4      	; 0xaa8e <get_map+0x66>
    aa8a:	62 95       	swap	r22
    aa8c:	6f 70       	andi	r22, 0x0F	; 15
	a&=15;
    aa8e:	86 2f       	mov	r24, r22
    aa90:	8f 70       	andi	r24, 0x0F	; 15
    aa92:	08 95       	ret
	return(a);
    aa94:	83 e0       	ldi	r24, 0x03	; 3
}
    aa96:	08 95       	ret

0000aa98 <get_mapf>:

u8 get_mapf(s16 x,s16 y)
{
	u8 a;
	a=get_map(x,y);
    aa98:	0e 94 14 55 	call	0xaa28	; 0xaa28 <get_map>
	if (a==MAP_OXYGEN)  a=MAP_FLOOR;
    aa9c:	87 30       	cpi	r24, 0x07	; 7
    aa9e:	41 f0       	breq	.+16     	; 0xaab0 <get_mapf+0x18>
	if (a==MAP_TARGET)  a=MAP_FLOOR;
    aaa0:	85 30       	cpi	r24, 0x05	; 5
    aaa2:	31 f0       	breq	.+12     	; 0xaab0 <get_mapf+0x18>
	if (a==MAP_ORB) 	a=MAP_FLOOR;
    aaa4:	84 30       	cpi	r24, 0x04	; 4
    aaa6:	21 f0       	breq	.+8      	; 0xaab0 <get_mapf+0x18>
	if (a==MAP_WALL) 	a=MAP_FLOOR;
    aaa8:	86 30       	cpi	r24, 0x06	; 6
    aaaa:	19 f4       	brne	.+6      	; 0xaab2 <get_mapf+0x1a>
    aaac:	82 e0       	ldi	r24, 0x02	; 2
    aaae:	08 95       	ret
    aab0:	82 e0       	ldi	r24, 0x02	; 2
	return(a);
}
    aab2:	08 95       	ret

0000aab4 <baddie_stun>:
}



void	baddie_stun(s16 idx)
{
    aab4:	dc 01       	movw	r26, r24
	baddie_frame[idx]++;
    aab6:	fc 01       	movw	r30, r24
    aab8:	ee 54       	subi	r30, 0x4E	; 78
    aaba:	f1 4f       	sbci	r31, 0xF1	; 241
    aabc:	80 81       	ld	r24, Z
    aabe:	8f 5f       	subi	r24, 0xFF	; 255
    aac0:	80 83       	st	Z, r24
	baddie_trigger[idx]--;
    aac2:	fd 01       	movw	r30, r26
    aac4:	ee 0f       	add	r30, r30
    aac6:	ff 1f       	adc	r31, r31
    aac8:	e0 51       	subi	r30, 0x10	; 16
    aaca:	f1 4f       	sbci	r31, 0xF1	; 241
    aacc:	80 81       	ld	r24, Z
    aace:	91 81       	ldd	r25, Z+1	; 0x01
    aad0:	01 97       	sbiw	r24, 0x01	; 1
    aad2:	91 83       	std	Z+1, r25	; 0x01
    aad4:	80 83       	st	Z, r24
	if (baddie_trigger[idx]<=0)
    aad6:	18 16       	cp	r1, r24
    aad8:	19 06       	cpc	r1, r25
    aada:	3c f0       	brlt	.+14     	; 0xaaea <baddie_stun+0x36>
 	{
		baddie_ctrl[idx]=baddie_callb[idx];
    aadc:	fd 01       	movw	r30, r26
    aade:	ec 57       	subi	r30, 0x7C	; 124
    aae0:	f1 4f       	sbci	r31, 0xF1	; 241
    aae2:	80 81       	ld	r24, Z
    aae4:	a2 56       	subi	r26, 0x62	; 98
    aae6:	b1 4f       	sbci	r27, 0xF1	; 241
    aae8:	8c 93       	st	X, r24
    aaea:	08 95       	ret

0000aaec <force_stun>:
}


void force_stun(u8 idx)
{
		if (baddie_ctrl[idx]==0) return;
    aaec:	28 2f       	mov	r18, r24
    aaee:	30 e0       	ldi	r19, 0x00	; 0
    aaf0:	d9 01       	movw	r26, r18
    aaf2:	a2 56       	subi	r26, 0x62	; 98
    aaf4:	b1 4f       	sbci	r27, 0xF1	; 241
    aaf6:	4c 91       	ld	r20, X
    aaf8:	44 23       	and	r20, r20
    aafa:	b9 f0       	breq	.+46     	; 0xab2a <force_stun+0x3e>

 		baddie_trigger[idx]=TIME_SUPA_BADDIE_STUN;
    aafc:	f9 01       	movw	r30, r18
    aafe:	ee 0f       	add	r30, r30
    ab00:	ff 1f       	adc	r31, r31
    ab02:	e0 51       	subi	r30, 0x10	; 16
    ab04:	f1 4f       	sbci	r31, 0xF1	; 241
    ab06:	80 ee       	ldi	r24, 0xE0	; 224
    ab08:	91 e0       	ldi	r25, 0x01	; 1
    ab0a:	91 83       	std	Z+1, r25	; 0x01
    ab0c:	80 83       	st	Z, r24
		baddie_sprite[idx]=BADDIE_STUN_A_SP;
    ab0e:	f9 01       	movw	r30, r18
    ab10:	ed 52       	subi	r30, 0x2D	; 45
    ab12:	f1 4f       	sbci	r31, 0xF1	; 241
    ab14:	88 e0       	ldi	r24, 0x08	; 8
    ab16:	80 83       	st	Z, r24
		baddie_callb[idx]=baddie_ctrl[idx];
    ab18:	f9 01       	movw	r30, r18
    ab1a:	ec 57       	subi	r30, 0x7C	; 124
    ab1c:	f1 4f       	sbci	r31, 0xF1	; 241
    ab1e:	40 83       	st	Z, r20
		baddie_ctrl[idx]=BADDIE_STUN;
    ab20:	84 e0       	ldi	r24, 0x04	; 4
    ab22:	8c 93       	st	X, r24
		baddie_stun(idx);
    ab24:	c9 01       	movw	r24, r18
    ab26:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <baddie_stun>
    ab2a:	08 95       	ret

0000ab2c <baddie_pop>:
		baddie_ctrl[idx]=BADDIE_ALIVE;
	}
}

void baddie_pop(s16 idx)
{
    ab2c:	dc 01       	movw	r26, r24
    baddie_gtimer[idx]--;
    ab2e:	fc 01       	movw	r30, r24
    ab30:	e0 53       	subi	r30, 0x30	; 48
    ab32:	f1 4f       	sbci	r31, 0xF1	; 241
    ab34:	20 81       	ld	r18, Z
    ab36:	21 50       	subi	r18, 0x01	; 1
    ab38:	20 83       	st	Z, r18
	if ((baddie_gtimer[idx]&15)==0)
    ab3a:	82 2f       	mov	r24, r18
    ab3c:	99 27       	eor	r25, r25
    ab3e:	87 fd       	sbrc	r24, 7
    ab40:	90 95       	com	r25
    ab42:	8f 70       	andi	r24, 0x0F	; 15
    ab44:	90 70       	andi	r25, 0x00	; 0
    ab46:	89 2b       	or	r24, r25
    ab48:	31 f4       	brne	.+12     	; 0xab56 <baddie_pop+0x2a>
    	baddie_frame[idx]++;
    ab4a:	fd 01       	movw	r30, r26
    ab4c:	ee 54       	subi	r30, 0x4E	; 78
    ab4e:	f1 4f       	sbci	r31, 0xF1	; 241
    ab50:	80 81       	ld	r24, Z
    ab52:	8f 5f       	subi	r24, 0xFF	; 255
    ab54:	80 83       	st	Z, r24

	if (baddie_gtimer[idx]<=0)
    ab56:	12 16       	cp	r1, r18
    ab58:	1c f0       	brlt	.+6      	; 0xab60 <baddie_pop+0x34>
	{
		baddie_ctrl[idx] = BADDIE_DEAD;
    ab5a:	a2 56       	subi	r26, 0x62	; 98
    ab5c:	b1 4f       	sbci	r27, 0xF1	; 241
    ab5e:	1c 92       	st	X, r1
    ab60:	08 95       	ret

0000ab62 <setup_collision>:
}



void	setup_collision()
{
    ab62:	2f 92       	push	r2
    ab64:	3f 92       	push	r3
    ab66:	4f 92       	push	r4
    ab68:	5f 92       	push	r5
    ab6a:	6f 92       	push	r6
    ab6c:	7f 92       	push	r7
    ab6e:	8f 92       	push	r8
    ab70:	9f 92       	push	r9
    ab72:	af 92       	push	r10
    ab74:	bf 92       	push	r11
    ab76:	cf 92       	push	r12
    ab78:	df 92       	push	r13
    ab7a:	ef 92       	push	r14
    ab7c:	ff 92       	push	r15
    ab7e:	0f 93       	push	r16
    ab80:	1f 93       	push	r17
    ab82:	df 93       	push	r29
    ab84:	cf 93       	push	r28
    ab86:	00 d0       	rcall	.+0      	; 0xab88 <setup_collision+0x26>
    ab88:	0f 92       	push	r0
    ab8a:	cd b7       	in	r28, 0x3d	; 61
    ab8c:	de b7       	in	r29, 0x3e	; 62
	s16 x,y;
	s16 nx,ny;
	u8 a;

	memset(game_grid,BLOCK_FLOOR,sizeof(game_grid));
    ab8e:	80 e0       	ldi	r24, 0x00	; 0
    ab90:	91 e0       	ldi	r25, 0x01	; 1
    ab92:	eb ef       	ldi	r30, 0xFB	; 251
    ab94:	fe e0       	ldi	r31, 0x0E	; 14
    ab96:	df 01       	movw	r26, r30
    ab98:	9c 01       	movw	r18, r24
    ab9a:	1d 92       	st	X+, r1
    ab9c:	21 50       	subi	r18, 0x01	; 1
    ab9e:	30 40       	sbci	r19, 0x00	; 0
    aba0:	e1 f7       	brne	.-8      	; 0xab9a <setup_collision+0x38>
    aba2:	80 e0       	ldi	r24, 0x00	; 0
    aba4:	90 e0       	ldi	r25, 0x00	; 0
    aba6:	65 c0       	rjmp	.+202    	; 0xac72 <setup_collision+0x110>
	for(x=1;x<MAPW+2;x++)
	{
		nx = x-1;
		ny = y-1;

		a = get_map(x,y);
    aba8:	c8 01       	movw	r24, r16
    abaa:	69 81       	ldd	r22, Y+1	; 0x01
    abac:	72 2d       	mov	r23, r2
    abae:	0e 94 14 55 	call	0xaa28	; 0xaa28 <get_map>

		switch( a )
    abb2:	84 30       	cpi	r24, 0x04	; 4
    abb4:	f9 f0       	breq	.+62     	; 0xabf4 <setup_collision+0x92>
    abb6:	85 30       	cpi	r24, 0x05	; 5
    abb8:	28 f4       	brcc	.+10     	; 0xabc4 <setup_collision+0x62>
    abba:	81 30       	cpi	r24, 0x01	; 1
    abbc:	51 f0       	breq	.+20     	; 0xabd2 <setup_collision+0x70>
    abbe:	83 30       	cpi	r24, 0x03	; 3
    abc0:	c1 f5       	brne	.+112    	; 0xac32 <setup_collision+0xd0>
    abc2:	0a c0       	rjmp	.+20     	; 0xabd8 <setup_collision+0x76>
    abc4:	86 30       	cpi	r24, 0x06	; 6
    abc6:	99 f0       	breq	.+38     	; 0xabee <setup_collision+0x8c>
    abc8:	86 30       	cpi	r24, 0x06	; 6
    abca:	68 f0       	brcs	.+26     	; 0xabe6 <setup_collision+0x84>
    abcc:	87 30       	cpi	r24, 0x07	; 7
    abce:	89 f5       	brne	.+98     	; 0xac32 <setup_collision+0xd0>
    abd0:	07 c0       	rjmp	.+14     	; 0xabe0 <setup_collision+0x7e>
		{
			case MAP_FLOOR:
				break;
			case MAP_ENERGY:
	    		rmap(nx,ny)=BLOCK_WALL;
    abd2:	e8 e0       	ldi	r30, 0x08	; 8
    abd4:	d3 01       	movw	r26, r6
    abd6:	09 c0       	rjmp	.+18     	; 0xabea <setup_collision+0x88>
				break;
	    	case MAP_STARS:
				rmap(nx,ny)=BLOCK_INVISIBLE;
    abd8:	aa 81       	ldd	r26, Y+2	; 0x02
    abda:	bb 81       	ldd	r27, Y+3	; 0x03
    abdc:	8c 93       	st	X, r24
    abde:	29 c0       	rjmp	.+82     	; 0xac32 <setup_collision+0xd0>
				break;
	    	case MAP_OXYGEN:
	    		rmap(nx,ny)=BLOCK_OXYGEN;
    abe0:	f4 01       	movw	r30, r8
    abe2:	80 83       	st	Z, r24
    abe4:	26 c0       	rjmp	.+76     	; 0xac32 <setup_collision+0xd0>
				break;
	    	case MAP_TARGET:
	    		rmap(nx,ny)=BLOCK_HOLE;
    abe6:	e9 e0       	ldi	r30, 0x09	; 9
    abe8:	d5 01       	movw	r26, r10
    abea:	ec 93       	st	X, r30
    abec:	22 c0       	rjmp	.+68     	; 0xac32 <setup_collision+0xd0>
				break;
	  		case MAP_WALL:
				rmap(nx,ny)=BLOCK_ICE;
    abee:	e2 e0       	ldi	r30, 0x02	; 2
    abf0:	d6 01       	movw	r26, r12
    abf2:	fb cf       	rjmp	.-10     	; 0xabea <setup_collision+0x88>
				break;
			case MAP_ORB:
				rmap(nx,ny)=BLOCK_SUPA|(supa_count<<4);
    abf4:	20 91 e3 0e 	lds	r18, 0x0EE3
    abf8:	a2 2f       	mov	r26, r18
    abfa:	b0 e0       	ldi	r27, 0x00	; 0
    abfc:	cd 01       	movw	r24, r26
    abfe:	44 e0       	ldi	r20, 0x04	; 4
    ac00:	88 0f       	add	r24, r24
    ac02:	99 1f       	adc	r25, r25
    ac04:	4a 95       	dec	r20
    ac06:	e1 f7       	brne	.-8      	; 0xac00 <setup_collision+0x9e>
    ac08:	84 60       	ori	r24, 0x04	; 4
    ac0a:	f2 01       	movw	r30, r4
    ac0c:	80 83       	st	Z, r24
				supa_x[supa_count]=MUL16(nx);
    ac0e:	fd 01       	movw	r30, r26
    ac10:	e2 52       	subi	r30, 0x22	; 34
    ac12:	f1 4f       	sbci	r31, 0xF1	; 241
    ac14:	80 2f       	mov	r24, r16
    ac16:	81 50       	subi	r24, 0x01	; 1
    ac18:	82 95       	swap	r24
    ac1a:	80 7f       	andi	r24, 0xF0	; 240
    ac1c:	80 83       	st	Z, r24
				supa_y[supa_count]=MUL16(ny);
    ac1e:	fd 01       	movw	r30, r26
    ac20:	e7 56       	subi	r30, 0x67	; 103
    ac22:	f1 4f       	sbci	r31, 0xF1	; 241
    ac24:	30 82       	st	Z, r3
				supa_move[supa_count]=0;
    ac26:	a8 53       	subi	r26, 0x38	; 56
    ac28:	b1 4f       	sbci	r27, 0xF1	; 241
    ac2a:	1c 92       	st	X, r1
				supa_count++;
    ac2c:	2f 5f       	subi	r18, 0xFF	; 255
    ac2e:	20 93 e3 0e 	sts	0x0EE3, r18
	u8 a;

	memset(game_grid,BLOCK_FLOOR,sizeof(game_grid));
   // 	map
	for(y=1;y<MAPH+2;y++)
	for(x=1;x<MAPW+2;x++)
    ac32:	0f 5f       	subi	r16, 0xFF	; 255
    ac34:	1f 4f       	sbci	r17, 0xFF	; 255
    ac36:	08 94       	sec
    ac38:	41 1c       	adc	r4, r1
    ac3a:	51 1c       	adc	r5, r1
    ac3c:	08 94       	sec
    ac3e:	61 1c       	adc	r6, r1
    ac40:	71 1c       	adc	r7, r1
    ac42:	2a 81       	ldd	r18, Y+2	; 0x02
    ac44:	3b 81       	ldd	r19, Y+3	; 0x03
    ac46:	2f 5f       	subi	r18, 0xFF	; 255
    ac48:	3f 4f       	sbci	r19, 0xFF	; 255
    ac4a:	3b 83       	std	Y+3, r19	; 0x03
    ac4c:	2a 83       	std	Y+2, r18	; 0x02
    ac4e:	08 94       	sec
    ac50:	81 1c       	adc	r8, r1
    ac52:	91 1c       	adc	r9, r1
    ac54:	08 94       	sec
    ac56:	a1 1c       	adc	r10, r1
    ac58:	b1 1c       	adc	r11, r1
    ac5a:	08 94       	sec
    ac5c:	c1 1c       	adc	r12, r1
    ac5e:	d1 1c       	adc	r13, r1
    ac60:	0f 30       	cpi	r16, 0x0F	; 15
    ac62:	11 05       	cpc	r17, r1
    ac64:	09 f0       	breq	.+2      	; 0xac68 <setup_collision+0x106>
    ac66:	a0 cf       	rjmp	.-192    	; 0xaba8 <setup_collision+0x46>
	s16 nx,ny;
	u8 a;

	memset(game_grid,BLOCK_FLOOR,sizeof(game_grid));
   // 	map
	for(y=1;y<MAPH+2;y++)
    ac68:	3c e0       	ldi	r19, 0x0C	; 12
    ac6a:	e3 16       	cp	r14, r19
    ac6c:	f1 04       	cpc	r15, r1
    ac6e:	e9 f0       	breq	.+58     	; 0xacaa <setup_collision+0x148>
    ac70:	c7 01       	movw	r24, r14
}



void	setup_collision()
{
    ac72:	7c 01       	movw	r14, r24
    ac74:	08 94       	sec
    ac76:	e1 1c       	adc	r14, r1
    ac78:	f1 1c       	adc	r15, r1
    ac7a:	e9 82       	std	Y+1, r14	; 0x01
    ac7c:	2f 2c       	mov	r2, r15
				rmap(nx,ny)=BLOCK_ICE;
				break;
			case MAP_ORB:
				rmap(nx,ny)=BLOCK_SUPA|(supa_count<<4);
				supa_x[supa_count]=MUL16(nx);
				supa_y[supa_count]=MUL16(ny);
    ac7e:	38 2e       	mov	r3, r24
    ac80:	32 94       	swap	r3
    ac82:	30 ef       	ldi	r19, 0xF0	; 240
    ac84:	33 22       	and	r3, r19
    ac86:	dc 01       	movw	r26, r24
    ac88:	24 e0       	ldi	r18, 0x04	; 4
    ac8a:	aa 0f       	add	r26, r26
    ac8c:	bb 1f       	adc	r27, r27
    ac8e:	2a 95       	dec	r18
    ac90:	e1 f7       	brne	.-8      	; 0xac8a <setup_collision+0x128>
    ac92:	a5 50       	subi	r26, 0x05	; 5
    ac94:	b1 4f       	sbci	r27, 0xF1	; 241
    ac96:	bb 83       	std	Y+3, r27	; 0x03
    ac98:	aa 83       	std	Y+2, r26	; 0x02
    ac9a:	2d 01       	movw	r4, r26
    ac9c:	3d 01       	movw	r6, r26
    ac9e:	4d 01       	movw	r8, r26
    aca0:	5d 01       	movw	r10, r26
    aca2:	6d 01       	movw	r12, r26
    aca4:	01 e0       	ldi	r16, 0x01	; 1
    aca6:	10 e0       	ldi	r17, 0x00	; 0
    aca8:	7f cf       	rjmp	.-258    	; 0xaba8 <setup_collision+0x46>
				supa_move[supa_count]=0;
				supa_count++;
				break;
		}
	}
}
    acaa:	0f 90       	pop	r0
    acac:	0f 90       	pop	r0
    acae:	0f 90       	pop	r0
    acb0:	cf 91       	pop	r28
    acb2:	df 91       	pop	r29
    acb4:	1f 91       	pop	r17
    acb6:	0f 91       	pop	r16
    acb8:	ff 90       	pop	r15
    acba:	ef 90       	pop	r14
    acbc:	df 90       	pop	r13
    acbe:	cf 90       	pop	r12
    acc0:	bf 90       	pop	r11
    acc2:	af 90       	pop	r10
    acc4:	9f 90       	pop	r9
    acc6:	8f 90       	pop	r8
    acc8:	7f 90       	pop	r7
    acca:	6f 90       	pop	r6
    accc:	5f 90       	pop	r5
    acce:	4f 90       	pop	r4
    acd0:	3f 90       	pop	r3
    acd2:	2f 90       	pop	r2
    acd4:	08 95       	ret

0000acd6 <uprintc>:
	uytab = y;
}

void uprintc(u8 a)
{
	u8 x=uxtab>>3;
    acd6:	40 91 b5 0e 	lds	r20, 0x0EB5
	u8 y=uytab>>3;
    acda:	60 91 fa 0e 	lds	r22, 0x0EFA

	if (a<10) a+='0';
    acde:	8a 30       	cpi	r24, 0x0A	; 10
    ace0:	08 f4       	brcc	.+2      	; 0xace4 <uprintc+0xe>
    ace2:	80 5d       	subi	r24, 0xD0	; 208
	if (a>=32 && a<='Z')
    ace4:	80 52       	subi	r24, 0x20	; 32
    ace6:	8b 33       	cpi	r24, 0x3B	; 59
    ace8:	c8 f4       	brcc	.+50     	; 0xad1c <uprintc+0x46>
	return( a );
}

u8 TSPRITE_GET_INDEX(u8 index,u8 offset)
{
   	const char *data=(const char *)pgm_read_word(&tsprite_table[index]);
    acea:	28 ef       	ldi	r18, 0xF8	; 248
    acec:	39 e3       	ldi	r19, 0x39	; 57
    acee:	f9 01       	movw	r30, r18
    acf0:	a5 91       	lpm	r26, Z+
    acf2:	b4 91       	lpm	r27, Z+
   	u8 w=pgm_read_byte(&data[2+offset]);
    acf4:	90 e0       	ldi	r25, 0x00	; 0
    acf6:	02 96       	adiw	r24, 0x02	; 2
    acf8:	a8 0f       	add	r26, r24
    acfa:	b9 1f       	adc	r27, r25
    acfc:	fd 01       	movw	r30, r26
    acfe:	94 91       	lpm	r25, Z+
	{
		a = font_base+TSPRITE_GET_INDEX(A1_CHARSET_TSP,a-32);
		SetTile(x,y,a);
    ad00:	66 95       	lsr	r22
    ad02:	66 95       	lsr	r22
    ad04:	66 95       	lsr	r22
    ad06:	80 91 f7 0e 	lds	r24, 0x0EF7
    ad0a:	98 0f       	add	r25, r24
    ad0c:	84 2f       	mov	r24, r20
    ad0e:	86 95       	lsr	r24
    ad10:	86 95       	lsr	r24
    ad12:	86 95       	lsr	r24
    ad14:	49 2f       	mov	r20, r25
    ad16:	50 e0       	ldi	r21, 0x00	; 0
    ad18:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
	}
	uxtab+=8;
    ad1c:	80 91 b5 0e 	lds	r24, 0x0EB5
    ad20:	88 5f       	subi	r24, 0xF8	; 248
    ad22:	80 93 b5 0e 	sts	0x0EB5, r24
	if (uxtab>=XREZ)
    ad26:	80 3f       	cpi	r24, 0xF0	; 240
    ad28:	38 f0       	brcs	.+14     	; 0xad38 <uprintc+0x62>
	{
		uxtab=0;
    ad2a:	10 92 b5 0e 	sts	0x0EB5, r1
		uytab+=8;
    ad2e:	80 91 fa 0e 	lds	r24, 0x0EFA
    ad32:	88 5f       	subi	r24, 0xF8	; 248
    ad34:	80 93 fa 0e 	sts	0x0EFA, r24
    ad38:	08 95       	ret

0000ad3a <PanelClear>:
#endif
}


void PanelClear()
{
    ad3a:	0f 93       	push	r16
    ad3c:	1f 93       	push	r17
    ad3e:	10 e0       	ldi	r17, 0x00	; 0


void ugo(u8 x,u8 y)
{
	uxtab = x;
	uytab = y;
    ad40:	08 ec       	ldi	r16, 0xC8	; 200
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    ad42:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    ad46:	10 92 fa 0e 	sts	0x0EFA, r1
{
	s16 x;
	for(x=0;x<XREZ;x+=8)
	{
		ugo(x,0);
		uprintc(32);
    ad4a:	80 e2       	ldi	r24, 0x20	; 32
    ad4c:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    ad50:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    ad54:	00 93 fa 0e 	sts	0x0EFA, r16
	for(x=0;x<XREZ;x+=8)
	{
		ugo(x,0);
		uprintc(32);
	    ugo(x,YREZ-8);
		uprintc(32);
    ad58:	80 e2       	ldi	r24, 0x20	; 32
    ad5a:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
    ad5e:	18 5f       	subi	r17, 0xF8	; 248


void PanelClear()
{
	s16 x;
	for(x=0;x<XREZ;x+=8)
    ad60:	10 3f       	cpi	r17, 0xF0	; 240
    ad62:	79 f7       	brne	.-34     	; 0xad42 <PanelClear+0x8>
		ugo(x,0);
		uprintc(32);
	    ugo(x,YREZ-8);
		uprintc(32);
	}
}
    ad64:	1f 91       	pop	r17
    ad66:	0f 91       	pop	r16
    ad68:	08 95       	ret

0000ad6a <print_score>:




void print_score(u16  val,u8 num)
{
    ad6a:	1f 93       	push	r17
    ad6c:	cf 93       	push	r28
    ad6e:	df 93       	push	r29
    ad70:	9c 01       	movw	r18, r24
    ad72:	16 2f       	mov	r17, r22
	s8 i;

	decimal_sub2(digits,val);
    ad74:	88 ed       	ldi	r24, 0xD8	; 216
    ad76:	9e e0       	ldi	r25, 0x0E	; 14
    ad78:	b9 01       	movw	r22, r18
    ad7a:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <decimal_sub2>

   	if (digits[num-1]!=0)
    ad7e:	e1 2f       	mov	r30, r17
    ad80:	f0 e0       	ldi	r31, 0x00	; 0
    ad82:	e9 52       	subi	r30, 0x29	; 41
    ad84:	f1 4f       	sbci	r31, 0xF1	; 241
    ad86:	e0 81       	ld	r30, Z
    ad88:	ee 23       	and	r30, r30
    ad8a:	41 f0       	breq	.+16     	; 0xad9c <print_score+0x32>
   	{
   		uxtab-=8;
    ad8c:	80 91 b5 0e 	lds	r24, 0x0EB5
    ad90:	88 50       	subi	r24, 0x08	; 8
    ad92:	80 93 b5 0e 	sts	0x0EB5, r24
   		uprintc(digits[num-1]);
    ad96:	8e 2f       	mov	r24, r30
    ad98:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
   	}

	for(i=num-2;i>=0;i--)
    ad9c:	12 50       	subi	r17, 0x02	; 2
    ad9e:	c1 2f       	mov	r28, r17
    ada0:	dd 27       	eor	r29, r29
    ada2:	c7 fd       	sbrc	r28, 7
    ada4:	d0 95       	com	r29
    ada6:	c8 52       	subi	r28, 0x28	; 40
    ada8:	d1 4f       	sbci	r29, 0xF1	; 241
    adaa:	05 c0       	rjmp	.+10     	; 0xadb6 <print_score+0x4c>
   		uprintc(digits[i]);
    adac:	88 81       	ld	r24, Y
    adae:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
   	{
   		uxtab-=8;
   		uprintc(digits[num-1]);
   	}

	for(i=num-2;i>=0;i--)
    adb2:	11 50       	subi	r17, 0x01	; 1
    adb4:	21 97       	sbiw	r28, 0x01	; 1
    adb6:	17 ff       	sbrs	r17, 7
    adb8:	f9 cf       	rjmp	.-14     	; 0xadac <print_score+0x42>
   		uprintc(digits[i]);
    uprintc('0');
    adba:	80 e3       	ldi	r24, 0x30	; 48
    adbc:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
}
    adc0:	df 91       	pop	r29
    adc2:	cf 91       	pop	r28
    adc4:	1f 91       	pop	r17
    adc6:	08 95       	ret

0000adc8 <print_decimal>:
}



void print_decimal(u16  val,u8 num)
{
    adc8:	1f 93       	push	r17
    adca:	cf 93       	push	r28
    adcc:	df 93       	push	r29
    adce:	9c 01       	movw	r18, r24
    add0:	16 2f       	mov	r17, r22
	s8 i;

   	decimal_sub2(digits,val);
    add2:	88 ed       	ldi	r24, 0xD8	; 216
    add4:	9e e0       	ldi	r25, 0x0E	; 14
    add6:	b9 01       	movw	r22, r18
    add8:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <decimal_sub2>

  	for(i=num-1;i>=0;i--)
    addc:	11 50       	subi	r17, 0x01	; 1
    adde:	c1 2f       	mov	r28, r17
    ade0:	dd 27       	eor	r29, r29
    ade2:	c7 fd       	sbrc	r28, 7
    ade4:	d0 95       	com	r29
    ade6:	c8 52       	subi	r28, 0x28	; 40
    ade8:	d1 4f       	sbci	r29, 0xF1	; 241
    adea:	05 c0       	rjmp	.+10     	; 0xadf6 <print_decimal+0x2e>
   		uprintc(digits[i]);
    adec:	88 81       	ld	r24, Y
    adee:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
{
	s8 i;

   	decimal_sub2(digits,val);

  	for(i=num-1;i>=0;i--)
    adf2:	11 50       	subi	r17, 0x01	; 1
    adf4:	21 97       	sbiw	r28, 0x01	; 1
    adf6:	17 ff       	sbrs	r17, 7
    adf8:	f9 cf       	rjmp	.-14     	; 0xadec <print_decimal+0x24>
   		uprintc(digits[i]);
}
    adfa:	df 91       	pop	r29
    adfc:	cf 91       	pop	r28
    adfe:	1f 91       	pop	r17
    ae00:	08 95       	ret

0000ae02 <printx_ram>:
		uprintc(a);
	}
}

void printx_ram(const char *text)
{
    ae02:	cf 93       	push	r28
    ae04:	df 93       	push	r29
    ae06:	ec 01       	movw	r28, r24
	char a;

	while(1)
	{
		a=*text;
    ae08:	89 91       	ld	r24, Y+
		text++;
		if (a==0) break;
    ae0a:	88 23       	and	r24, r24
    ae0c:	19 f0       	breq	.+6      	; 0xae14 <printx_ram+0x12>
		uprintc(a);
    ae0e:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
    ae12:	fa cf       	rjmp	.-12     	; 0xae08 <printx_ram+0x6>
	}
}
    ae14:	df 91       	pop	r29
    ae16:	cf 91       	pop	r28
    ae18:	08 95       	ret

0000ae1a <uprintx>:
		pos++;
	}
}

void uprintx(const char *text)
{
    ae1a:	cf 93       	push	r28
    ae1c:	df 93       	push	r29
    ae1e:	ec 01       	movw	r28, r24
	char a;
	while(1)
	{
		a=BPTR(text);
    ae20:	fe 01       	movw	r30, r28
    ae22:	84 91       	lpm	r24, Z+
		text++;
    ae24:	21 96       	adiw	r28, 0x01	; 1
		if (a==0) break;
    ae26:	88 23       	and	r24, r24
    ae28:	19 f0       	breq	.+6      	; 0xae30 <uprintx+0x16>
		uprintc(a);
    ae2a:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
    ae2e:	f8 cf       	rjmp	.-16     	; 0xae20 <uprintx+0x6>
	}
}
    ae30:	df 91       	pop	r29
    ae32:	cf 91       	pop	r28
    ae34:	08 95       	ret

0000ae36 <ucprintx_dot>:
	}
}


void ucprintx_dot(const char *text)
{
    ae36:	ef 92       	push	r14
    ae38:	ff 92       	push	r15
    ae3a:	0f 93       	push	r16
    ae3c:	1f 93       	push	r17
    ae3e:	cf 93       	push	r28
    ae40:	df 93       	push	r29
    ae42:	8c 01       	movw	r16, r24
	char a;

	u8 len=(u8) P_strlen((char*)text);
    ae44:	fc 01       	movw	r30, r24
    ae46:	9e 2f       	mov	r25, r30
    ae48:	90 1b       	sub	r25, r16
{
	u8 a;
	u8 c=0;
	while(1)
	{
		a=pgm_read_byte(text);
    ae4a:	84 91       	lpm	r24, Z+
	  	if (a==0) break;
    ae4c:	88 23       	and	r24, r24
    ae4e:	11 f0       	breq	.+4      	; 0xae54 <ucprintx_dot+0x1e>
		text++;
    ae50:	31 96       	adiw	r30, 0x01	; 1
    ae52:	f9 cf       	rjmp	.-14     	; 0xae46 <ucprintx_dot+0x10>
	uxtab-=MUL8(len)>>1;
    ae54:	99 0f       	add	r25, r25
    ae56:	99 0f       	add	r25, r25
    ae58:	80 91 b5 0e 	lds	r24, 0x0EB5
    ae5c:	89 1b       	sub	r24, r25
    ae5e:	80 93 b5 0e 	sts	0x0EB5, r24

	u8 k=(g_frame>>2)&15;
    ae62:	80 91 18 10 	lds	r24, 0x1018
    ae66:	90 91 19 10 	lds	r25, 0x1019
    ae6a:	95 95       	asr	r25
    ae6c:	87 95       	ror	r24
    ae6e:	95 95       	asr	r25
    ae70:	87 95       	ror	r24
    ae72:	5f e0       	ldi	r21, 0x0F	; 15
    ae74:	e5 2e       	mov	r14, r21
    ae76:	e8 22       	and	r14, r24
    ae78:	c0 e0       	ldi	r28, 0x00	; 0
    ae7a:	d0 e0       	ldi	r29, 0x00	; 0
	u8 pos=0;
	while(1)
	{
		a=BPTR(text);
    ae7c:	f8 01       	movw	r30, r16
    ae7e:	ec 0f       	add	r30, r28
    ae80:	fd 1f       	adc	r31, r29
    ae82:	84 91       	lpm	r24, Z+
		text++;
		if (a==0) break;
    ae84:	88 23       	and	r24, r24
    ae86:	51 f0       	breq	.+20     	; 0xae9c <ucprintx_dot+0x66>
    ae88:	fc 2e       	mov	r15, r28
		if (k==pos) a='?';
    ae8a:	ec 16       	cp	r14, r28
    ae8c:	09 f4       	brne	.+2      	; 0xae90 <ucprintx_dot+0x5a>
    ae8e:	8f e3       	ldi	r24, 0x3F	; 63
		uprintc(a);
    ae90:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
		if (k==pos) break;
    ae94:	ef 14       	cp	r14, r15
    ae96:	11 f0       	breq	.+4      	; 0xae9c <ucprintx_dot+0x66>
    ae98:	21 96       	adiw	r28, 0x01	; 1
    ae9a:	f0 cf       	rjmp	.-32     	; 0xae7c <ucprintx_dot+0x46>
		pos++;
	}
}
    ae9c:	df 91       	pop	r29
    ae9e:	cf 91       	pop	r28
    aea0:	1f 91       	pop	r17
    aea2:	0f 91       	pop	r16
    aea4:	ff 90       	pop	r15
    aea6:	ef 90       	pop	r14
    aea8:	08 95       	ret

0000aeaa <ucprintx_blank>:
		uprintc(a);
	}
}

void ucprintx_blank(const char *text)
{
    aeaa:	cf 93       	push	r28
    aeac:	df 93       	push	r29
    aeae:	ec 01       	movw	r28, r24
	char a;

	u8 len=(u8) P_strlen((char*)text);
    aeb0:	fc 01       	movw	r30, r24
    aeb2:	9e 2f       	mov	r25, r30
    aeb4:	9c 1b       	sub	r25, r28
{
	u8 a;
	u8 c=0;
	while(1)
	{
		a=pgm_read_byte(text);
    aeb6:	84 91       	lpm	r24, Z+
	  	if (a==0) break;
    aeb8:	88 23       	and	r24, r24
    aeba:	11 f0       	breq	.+4      	; 0xaec0 <ucprintx_blank+0x16>
		text++;
    aebc:	31 96       	adiw	r30, 0x01	; 1
    aebe:	f9 cf       	rjmp	.-14     	; 0xaeb2 <ucprintx_blank+0x8>
	uxtab-=MUL8(len)>>1;
    aec0:	99 0f       	add	r25, r25
    aec2:	99 0f       	add	r25, r25
    aec4:	80 91 b5 0e 	lds	r24, 0x0EB5
    aec8:	89 1b       	sub	r24, r25
    aeca:	80 93 b5 0e 	sts	0x0EB5, r24

	while(1)
	{
		a=BPTR(text);
    aece:	fe 01       	movw	r30, r28
    aed0:	84 91       	lpm	r24, Z+
		text++;
    aed2:	21 96       	adiw	r28, 0x01	; 1
		if (a==0) break;
    aed4:	88 23       	and	r24, r24
    aed6:	21 f0       	breq	.+8      	; 0xaee0 <ucprintx_blank+0x36>
		uprintc(32);
    aed8:	80 e2       	ldi	r24, 0x20	; 32
    aeda:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
    aede:	f7 cf       	rjmp	.-18     	; 0xaece <ucprintx_blank+0x24>
	}
}
    aee0:	df 91       	pop	r29
    aee2:	cf 91       	pop	r28
    aee4:	08 95       	ret

0000aee6 <ucprintx>:
		uytab+=8;
	}
}

void ucprintx(const char *text)
{
    aee6:	cf 93       	push	r28
    aee8:	df 93       	push	r29
    aeea:	ec 01       	movw	r28, r24
	char a;

	u8 len=(u8) P_strlen((char*)text);
    aeec:	fc 01       	movw	r30, r24
    aeee:	9e 2f       	mov	r25, r30
    aef0:	9c 1b       	sub	r25, r28
{
	u8 a;
	u8 c=0;
	while(1)
	{
		a=pgm_read_byte(text);
    aef2:	84 91       	lpm	r24, Z+
	  	if (a==0) break;
    aef4:	88 23       	and	r24, r24
    aef6:	11 f0       	breq	.+4      	; 0xaefc <ucprintx+0x16>
		text++;
    aef8:	31 96       	adiw	r30, 0x01	; 1
    aefa:	f9 cf       	rjmp	.-14     	; 0xaeee <ucprintx+0x8>
	uxtab-=MUL8(len)>>1;
    aefc:	99 0f       	add	r25, r25
    aefe:	99 0f       	add	r25, r25
    af00:	80 91 b5 0e 	lds	r24, 0x0EB5
    af04:	89 1b       	sub	r24, r25
    af06:	80 93 b5 0e 	sts	0x0EB5, r24

	while(1)
	{
		a=BPTR(text);
    af0a:	fe 01       	movw	r30, r28
    af0c:	84 91       	lpm	r24, Z+
		text++;
    af0e:	21 96       	adiw	r28, 0x01	; 1
		if (a==0) break;
    af10:	88 23       	and	r24, r24
    af12:	19 f0       	breq	.+6      	; 0xaf1a <ucprintx+0x34>
		uprintc(a);
    af14:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
    af18:	f8 cf       	rjmp	.-16     	; 0xaf0a <ucprintx+0x24>
	}
}
    af1a:	df 91       	pop	r29
    af1c:	cf 91       	pop	r28
    af1e:	08 95       	ret

0000af20 <tile_frame>:
};



void	tile_frame( int a, int x1, int y1, int x2, int y2 )
{
    af20:	9f 92       	push	r9
    af22:	af 92       	push	r10
    af24:	bf 92       	push	r11
    af26:	cf 92       	push	r12
    af28:	df 92       	push	r13
    af2a:	ef 92       	push	r14
    af2c:	ff 92       	push	r15
    af2e:	0f 93       	push	r16
    af30:	1f 93       	push	r17
    af32:	cf 93       	push	r28
    af34:	df 93       	push	r29
    af36:	7c 01       	movw	r14, r24
    af38:	96 2e       	mov	r9, r22
    af3a:	b4 2e       	mov	r11, r20
    af3c:	a5 2e       	mov	r10, r21
    af3e:	69 01       	movw	r12, r18
    af40:	26 2f       	mov	r18, r22
    af42:	37 2f       	mov	r19, r23
    af44:	c9 01       	movw	r24, r18
    af46:	ec 01       	movw	r28, r24
    af48:	0b c0       	rjmp	.+22     	; 0xaf60 <tile_frame+0x40>
	int x,y;

	for(x=x1;x<=x2;x++)
	{
		SetTile(x,y1,a);
    af4a:	8c 2f       	mov	r24, r28
    af4c:	6b 2d       	mov	r22, r11
    af4e:	a7 01       	movw	r20, r14
    af50:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
		SetTile(x,y2,a);
    af54:	8c 2f       	mov	r24, r28
    af56:	60 2f       	mov	r22, r16
    af58:	a7 01       	movw	r20, r14
    af5a:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>

void	tile_frame( int a, int x1, int y1, int x2, int y2 )
{
	int x,y;

	for(x=x1;x<=x2;x++)
    af5e:	21 96       	adiw	r28, 0x01	; 1
    af60:	cc 16       	cp	r12, r28
    af62:	dd 06       	cpc	r13, r29
    af64:	94 f7       	brge	.-28     	; 0xaf4a <tile_frame+0x2a>
    af66:	8b 2d       	mov	r24, r11
    af68:	9a 2d       	mov	r25, r10
    af6a:	9c 01       	movw	r18, r24
    af6c:	e9 01       	movw	r28, r18
    af6e:	0b c0       	rjmp	.+22     	; 0xaf86 <tile_frame+0x66>
		SetTile(x,y2,a);
	}

  	for(y=y1;y<=y2;y++)
	{
		SetTile(x1,y,a);
    af70:	89 2d       	mov	r24, r9
    af72:	6c 2f       	mov	r22, r28
    af74:	a7 01       	movw	r20, r14
    af76:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
		SetTile(x2,y,a);
    af7a:	8c 2d       	mov	r24, r12
    af7c:	6c 2f       	mov	r22, r28
    af7e:	a7 01       	movw	r20, r14
    af80:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
	{
		SetTile(x,y1,a);
		SetTile(x,y2,a);
	}

  	for(y=y1;y<=y2;y++)
    af84:	21 96       	adiw	r28, 0x01	; 1
    af86:	0c 17       	cp	r16, r28
    af88:	1d 07       	cpc	r17, r29
    af8a:	94 f7       	brge	.-28     	; 0xaf70 <tile_frame+0x50>
	{
		SetTile(x1,y,a);
		SetTile(x2,y,a);
	}
}
    af8c:	df 91       	pop	r29
    af8e:	cf 91       	pop	r28
    af90:	1f 91       	pop	r17
    af92:	0f 91       	pop	r16
    af94:	ff 90       	pop	r15
    af96:	ef 90       	pop	r14
    af98:	df 90       	pop	r13
    af9a:	cf 90       	pop	r12
    af9c:	bf 90       	pop	r11
    af9e:	af 90       	pop	r10
    afa0:	9f 90       	pop	r9
    afa2:	08 95       	ret

0000afa4 <draw_fader>:



void	draw_fader( u8 index )
{
    afa4:	ef 92       	push	r14
    afa6:	ff 92       	push	r15
    afa8:	0f 93       	push	r16
    afaa:	1f 93       	push	r17
    afac:	cf 93       	push	r28
    afae:	df 93       	push	r29
	FADER *p = &faders[index];
    afb0:	9a e0       	ldi	r25, 0x0A	; 10
    afb2:	89 9f       	mul	r24, r25
    afb4:	f0 01       	movw	r30, r0
    afb6:	11 24       	eor	r1, r1
    afb8:	e2 57       	subi	r30, 0x72	; 114
    afba:	f1 4f       	sbci	r31, 0xF1	; 241
   	int xm = p->xpos;
    afbc:	92 81       	ldd	r25, Z+2	; 0x02
	int ym = p->ypos;
    afbe:	43 81       	ldd	r20, Z+3	; 0x03
	int x1,y1,x2,y2;
	int ygap = p->size+p->height;
    afc0:	24 81       	ldd	r18, Z+4	; 0x04
    afc2:	71 81       	ldd	r23, Z+1	; 0x01
	int xgap = ygap+p->width;
    afc4:	60 81       	ld	r22, Z

	if (p->ctrl==2) return;
    afc6:	81 85       	ldd	r24, Z+9	; 0x09
    afc8:	82 30       	cpi	r24, 0x02	; 2
    afca:	61 f1       	breq	.+88     	; 0xb024 <draw_fader+0x80>


void	draw_fader( u8 index )
{
	FADER *p = &faders[index];
   	int xm = p->xpos;
    afcc:	89 2f       	mov	r24, r25
    afce:	90 e0       	ldi	r25, 0x00	; 0
	int ym = p->ypos;
    afd0:	50 e0       	ldi	r21, 0x00	; 0
	int x1,y1,x2,y2;
	int ygap = p->size+p->height;
    afd2:	30 e0       	ldi	r19, 0x00	; 0
    afd4:	27 0f       	add	r18, r23
    afd6:	31 1d       	adc	r19, r1
	int xgap = ygap+p->width;
    afd8:	d9 01       	movw	r26, r18
    afda:	a6 0f       	add	r26, r22
    afdc:	b1 1d       	adc	r27, r1
    afde:	bd 01       	movw	r22, r26

	if (p->ctrl==2) return;

	x1=xm-xgap-1;
    afe0:	01 97       	sbiw	r24, 0x01	; 1
    afe2:	7c 01       	movw	r14, r24
    afe4:	ea 1a       	sub	r14, r26
    afe6:	fb 0a       	sbc	r15, r27
    afe8:	dc 01       	movw	r26, r24
    afea:	11 96       	adiw	r26, 0x01	; 1
	x2=xm+xgap;
    afec:	a6 0f       	add	r26, r22
    afee:	b7 1f       	adc	r27, r23
	y1=ym-ygap-1;
    aff0:	41 50       	subi	r20, 0x01	; 1
    aff2:	50 40       	sbci	r21, 0x00	; 0
    aff4:	ea 01       	movw	r28, r20
    aff6:	c2 1b       	sub	r28, r18
    aff8:	d3 0b       	sbc	r29, r19
    affa:	8a 01       	movw	r16, r20
    affc:	0f 5f       	subi	r16, 0xFF	; 255
    affe:	1f 4f       	sbci	r17, 0xFF	; 255
	y2=ym+ygap;
    b000:	02 0f       	add	r16, r18
    b002:	13 1f       	adc	r17, r19

	if (p->color==0)
    b004:	86 81       	ldd	r24, Z+6	; 0x06
    b006:	88 23       	and	r24, r24
    b008:	19 f4       	brne	.+6      	; 0xb010 <draw_fader+0x6c>
	tile_frame( 0 , x1, y1, x2, y2 );
    b00a:	80 e0       	ldi	r24, 0x00	; 0
    b00c:	90 e0       	ldi	r25, 0x00	; 0
    b00e:	05 c0       	rjmp	.+10     	; 0xb01a <draw_fader+0x76>
	else
    tile_frame( p->color + TILE_FADER , x1, y1, x2, y2 );
    b010:	20 91 c1 0e 	lds	r18, 0x0EC1
    b014:	90 e0       	ldi	r25, 0x00	; 0
    b016:	82 0f       	add	r24, r18
    b018:	91 1d       	adc	r25, r1
    b01a:	b7 01       	movw	r22, r14
    b01c:	ae 01       	movw	r20, r28
    b01e:	9d 01       	movw	r18, r26
    b020:	0e 94 90 57 	call	0xaf20	; 0xaf20 <tile_frame>
}
    b024:	df 91       	pop	r29
    b026:	cf 91       	pop	r28
    b028:	1f 91       	pop	r17
    b02a:	0f 91       	pop	r16
    b02c:	ff 90       	pop	r15
    b02e:	ef 90       	pop	r14
    b030:	08 95       	ret

0000b032 <TSPRITE_DIRECT>:
		}
    }
}

void TSPRITE_DIRECT(u8 *data,int x,int y)
{
    b032:	3f 92       	push	r3
    b034:	4f 92       	push	r4
    b036:	5f 92       	push	r5
    b038:	6f 92       	push	r6
    b03a:	7f 92       	push	r7
    b03c:	8f 92       	push	r8
    b03e:	9f 92       	push	r9
    b040:	af 92       	push	r10
    b042:	bf 92       	push	r11
    b044:	cf 92       	push	r12
    b046:	df 92       	push	r13
    b048:	ef 92       	push	r14
    b04a:	ff 92       	push	r15
    b04c:	0f 93       	push	r16
    b04e:	1f 93       	push	r17
    b050:	cf 93       	push	r28
    b052:	df 93       	push	r29
    b054:	7b 01       	movw	r14, r22
    b056:	8a 01       	movw	r16, r20
   	u8 i,j;
   	u8 w=pgm_read_byte(data++);
    b058:	9c 01       	movw	r18, r24
    b05a:	2f 5f       	subi	r18, 0xFF	; 255
    b05c:	3f 4f       	sbci	r19, 0xFF	; 255
    b05e:	fc 01       	movw	r30, r24
    b060:	84 91       	lpm	r24, Z+
   	u8 h=pgm_read_byte(data++);
    b062:	59 01       	movw	r10, r18
    b064:	08 94       	sec
    b066:	a1 1c       	adc	r10, r1
    b068:	b1 1c       	adc	r11, r1
    b06a:	f9 01       	movw	r30, r18
    b06c:	24 91       	lpm	r18, Z+

	x>>=3;
    b06e:	e3 e0       	ldi	r30, 0x03	; 3
    b070:	f5 94       	asr	r15
    b072:	e7 94       	ror	r14
    b074:	ea 95       	dec	r30
    b076:	e1 f7       	brne	.-8      	; 0xb070 <TSPRITE_DIRECT+0x3e>
	y>>=3;
    b078:	73 e0       	ldi	r23, 0x03	; 3
    b07a:	15 95       	asr	r17
    b07c:	07 95       	ror	r16
    b07e:	7a 95       	dec	r23
    b080:	e1 f7       	brne	.-8      	; 0xb07a <TSPRITE_DIRECT+0x48>


	for ( j=y; j<y+h; j++ )
    b082:	30 2e       	mov	r3, r16
    b084:	cc 24       	eor	r12, r12
    b086:	dd 24       	eor	r13, r13
    b088:	38 01       	movw	r6, r16
    b08a:	62 0e       	add	r6, r18
    b08c:	71 1c       	adc	r7, r1
	{
    	for ( i=x; i<x+w; i++ )
    b08e:	4e 2c       	mov	r4, r14
    b090:	47 01       	movw	r8, r14
    b092:	88 0e       	add	r8, r24
    b094:	91 1c       	adc	r9, r1
    b096:	1c c0       	rjmp	.+56     	; 0xb0d0 <TSPRITE_DIRECT+0x9e>
    b098:	c0 e0       	ldi	r28, 0x00	; 0
    b09a:	d0 e0       	ldi	r29, 0x00	; 0
		{
            SetTile(i,j,pgm_read_byte(data++));
    b09c:	56 2e       	mov	r5, r22
    b09e:	50 0e       	add	r5, r16
    b0a0:	0d c0       	rjmp	.+26     	; 0xb0bc <TSPRITE_DIRECT+0x8a>
	y>>=3;


	for ( j=y; j<y+h; j++ )
	{
    	for ( i=x; i<x+w; i++ )
    b0a2:	f5 01       	movw	r30, r10
		{
            SetTile(i,j,pgm_read_byte(data++));
    b0a4:	08 94       	sec
    b0a6:	a1 1c       	adc	r10, r1
    b0a8:	b1 1c       	adc	r11, r1
    b0aa:	e4 91       	lpm	r30, Z+
    b0ac:	82 2f       	mov	r24, r18
    b0ae:	8e 0d       	add	r24, r14
    b0b0:	65 2d       	mov	r22, r5
    b0b2:	4e 2f       	mov	r20, r30
    b0b4:	50 e0       	ldi	r21, 0x00	; 0
    b0b6:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
    b0ba:	21 96       	adiw	r28, 0x01	; 1
		}
    }
}

void TSPRITE_DIRECT(u8 *data,int x,int y)
{
    b0bc:	2c 2f       	mov	r18, r28
	y>>=3;


	for ( j=y; j<y+h; j++ )
	{
    	for ( i=x; i<x+w; i++ )
    b0be:	8c 2f       	mov	r24, r28
    b0c0:	84 0d       	add	r24, r4
    b0c2:	90 e0       	ldi	r25, 0x00	; 0
    b0c4:	88 15       	cp	r24, r8
    b0c6:	99 05       	cpc	r25, r9
    b0c8:	64 f3       	brlt	.-40     	; 0xb0a2 <TSPRITE_DIRECT+0x70>
    b0ca:	08 94       	sec
    b0cc:	c1 1c       	adc	r12, r1
    b0ce:	d1 1c       	adc	r13, r1
		}
    }
}

void TSPRITE_DIRECT(u8 *data,int x,int y)
{
    b0d0:	6c 2d       	mov	r22, r12

	x>>=3;
	y>>=3;


	for ( j=y; j<y+h; j++ )
    b0d2:	8c 2d       	mov	r24, r12
    b0d4:	83 0d       	add	r24, r3
    b0d6:	90 e0       	ldi	r25, 0x00	; 0
    b0d8:	86 15       	cp	r24, r6
    b0da:	97 05       	cpc	r25, r7
    b0dc:	ec f2       	brlt	.-70     	; 0xb098 <TSPRITE_DIRECT+0x66>
		{
            SetTile(i,j,pgm_read_byte(data++));
		}
    }
  //	DrawMap2(x,y,pgm_read_word(&tsprite_table[a]));
}
    b0de:	df 91       	pop	r29
    b0e0:	cf 91       	pop	r28
    b0e2:	1f 91       	pop	r17
    b0e4:	0f 91       	pop	r16
    b0e6:	ff 90       	pop	r15
    b0e8:	ef 90       	pop	r14
    b0ea:	df 90       	pop	r13
    b0ec:	cf 90       	pop	r12
    b0ee:	bf 90       	pop	r11
    b0f0:	af 90       	pop	r10
    b0f2:	9f 90       	pop	r9
    b0f4:	8f 90       	pop	r8
    b0f6:	7f 90       	pop	r7
    b0f8:	6f 90       	pop	r6
    b0fa:	5f 90       	pop	r5
    b0fc:	4f 90       	pop	r4
    b0fe:	3f 90       	pop	r3
    b100:	08 95       	ret

0000b102 <TSPRITE_BLANK>:
}



void TSPRITE_BLANK(int index,int x,int y)
{
    b102:	5f 92       	push	r5
    b104:	6f 92       	push	r6
    b106:	7f 92       	push	r7
    b108:	8f 92       	push	r8
    b10a:	9f 92       	push	r9
    b10c:	af 92       	push	r10
    b10e:	bf 92       	push	r11
    b110:	cf 92       	push	r12
    b112:	df 92       	push	r13
    b114:	ef 92       	push	r14
    b116:	ff 92       	push	r15
    b118:	0f 93       	push	r16
    b11a:	1f 93       	push	r17
    b11c:	cf 93       	push	r28
    b11e:	df 93       	push	r29
    b120:	7b 01       	movw	r14, r22
    b122:	8a 01       	movw	r16, r20
   	u8 i,j;
   	const char *data=(const char *)pgm_read_word(&tsprite_table[index]);
    b124:	88 0f       	add	r24, r24
    b126:	99 1f       	adc	r25, r25
    b128:	8a 50       	subi	r24, 0x0A	; 10
    b12a:	96 4c       	sbci	r25, 0xC6	; 198
    b12c:	fc 01       	movw	r30, r24
    b12e:	25 91       	lpm	r18, Z+
    b130:	34 91       	lpm	r19, Z+
   	u8 w=pgm_read_byte(data++);
    b132:	f9 01       	movw	r30, r18
    b134:	84 91       	lpm	r24, Z+
   	u8 h=pgm_read_byte(data++);
    b136:	2f 5f       	subi	r18, 0xFF	; 255
    b138:	3f 4f       	sbci	r19, 0xFF	; 255
    b13a:	f9 01       	movw	r30, r18
    b13c:	94 91       	lpm	r25, Z+

    x>>=3;
    b13e:	a3 e0       	ldi	r26, 0x03	; 3
    b140:	f5 94       	asr	r15
    b142:	e7 94       	ror	r14
    b144:	aa 95       	dec	r26
    b146:	e1 f7       	brne	.-8      	; 0xb140 <TSPRITE_BLANK+0x3e>
	y>>=3;
    b148:	f3 e0       	ldi	r31, 0x03	; 3
    b14a:	15 95       	asr	r17
    b14c:	07 95       	ror	r16
    b14e:	fa 95       	dec	r31
    b150:	e1 f7       	brne	.-8      	; 0xb14a <TSPRITE_BLANK+0x48>


	for ( j=y; j<y+h; j++ )
    b152:	50 2e       	mov	r5, r16
    b154:	cc 24       	eor	r12, r12
    b156:	dd 24       	eor	r13, r13
    b158:	48 01       	movw	r8, r16
    b15a:	89 0e       	add	r8, r25
    b15c:	91 1c       	adc	r9, r1
	{
    	for ( i=x; i<x+w; i++ )
    b15e:	6e 2c       	mov	r6, r14
    b160:	57 01       	movw	r10, r14
    b162:	a8 0e       	add	r10, r24
    b164:	b1 1c       	adc	r11, r1
    b166:	17 c0       	rjmp	.+46     	; 0xb196 <TSPRITE_BLANK+0x94>
    b168:	c0 e0       	ldi	r28, 0x00	; 0
    b16a:	d0 e0       	ldi	r29, 0x00	; 0
		{
            SetTile(i,j,0);
    b16c:	76 2e       	mov	r7, r22
    b16e:	70 0e       	add	r7, r16
    b170:	08 c0       	rjmp	.+16     	; 0xb182 <TSPRITE_BLANK+0x80>
    b172:	82 2f       	mov	r24, r18
    b174:	8e 0d       	add	r24, r14
    b176:	67 2d       	mov	r22, r7
    b178:	40 e0       	ldi	r20, 0x00	; 0
    b17a:	50 e0       	ldi	r21, 0x00	; 0
    b17c:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
    b180:	21 96       	adiw	r28, 0x01	; 1
}



void TSPRITE_BLANK(int index,int x,int y)
{
    b182:	2c 2f       	mov	r18, r28
	y>>=3;


	for ( j=y; j<y+h; j++ )
	{
    	for ( i=x; i<x+w; i++ )
    b184:	8c 2f       	mov	r24, r28
    b186:	86 0d       	add	r24, r6
    b188:	90 e0       	ldi	r25, 0x00	; 0
    b18a:	8a 15       	cp	r24, r10
    b18c:	9b 05       	cpc	r25, r11
    b18e:	8c f3       	brlt	.-30     	; 0xb172 <TSPRITE_BLANK+0x70>
    b190:	08 94       	sec
    b192:	c1 1c       	adc	r12, r1
    b194:	d1 1c       	adc	r13, r1
}



void TSPRITE_BLANK(int index,int x,int y)
{
    b196:	6c 2d       	mov	r22, r12

    x>>=3;
	y>>=3;


	for ( j=y; j<y+h; j++ )
    b198:	8c 2d       	mov	r24, r12
    b19a:	85 0d       	add	r24, r5
    b19c:	90 e0       	ldi	r25, 0x00	; 0
    b19e:	88 15       	cp	r24, r8
    b1a0:	99 05       	cpc	r25, r9
    b1a2:	14 f3       	brlt	.-60     	; 0xb168 <TSPRITE_BLANK+0x66>
    	for ( i=x; i<x+w; i++ )
		{
            SetTile(i,j,0);
		}
    }
}
    b1a4:	df 91       	pop	r29
    b1a6:	cf 91       	pop	r28
    b1a8:	1f 91       	pop	r17
    b1aa:	0f 91       	pop	r16
    b1ac:	ff 90       	pop	r15
    b1ae:	ef 90       	pop	r14
    b1b0:	df 90       	pop	r13
    b1b2:	cf 90       	pop	r12
    b1b4:	bf 90       	pop	r11
    b1b6:	af 90       	pop	r10
    b1b8:	9f 90       	pop	r9
    b1ba:	8f 90       	pop	r8
    b1bc:	7f 90       	pop	r7
    b1be:	6f 90       	pop	r6
    b1c0:	5f 90       	pop	r5
    b1c2:	08 95       	ret

0000b1c4 <TSPRITE>:




void TSPRITE(int index,int x,int y)
{
    b1c4:	3f 92       	push	r3
    b1c6:	4f 92       	push	r4
    b1c8:	5f 92       	push	r5
    b1ca:	6f 92       	push	r6
    b1cc:	7f 92       	push	r7
    b1ce:	8f 92       	push	r8
    b1d0:	9f 92       	push	r9
    b1d2:	af 92       	push	r10
    b1d4:	bf 92       	push	r11
    b1d6:	cf 92       	push	r12
    b1d8:	df 92       	push	r13
    b1da:	ef 92       	push	r14
    b1dc:	ff 92       	push	r15
    b1de:	0f 93       	push	r16
    b1e0:	1f 93       	push	r17
    b1e2:	cf 93       	push	r28
    b1e4:	df 93       	push	r29
    b1e6:	7b 01       	movw	r14, r22
    b1e8:	8a 01       	movw	r16, r20
   	u8 i,j;
   	const char *data=(const char *)pgm_read_word(&tsprite_table[index]);
    b1ea:	fc 01       	movw	r30, r24
    b1ec:	ee 0f       	add	r30, r30
    b1ee:	ff 1f       	adc	r31, r31
    b1f0:	ea 50       	subi	r30, 0x0A	; 10
    b1f2:	f6 4c       	sbci	r31, 0xC6	; 198
    b1f4:	85 91       	lpm	r24, Z+
    b1f6:	94 91       	lpm	r25, Z+
   	u8 w=pgm_read_byte(data++);
    b1f8:	9c 01       	movw	r18, r24
    b1fa:	2f 5f       	subi	r18, 0xFF	; 255
    b1fc:	3f 4f       	sbci	r19, 0xFF	; 255
    b1fe:	fc 01       	movw	r30, r24
    b200:	84 91       	lpm	r24, Z+
   	u8 h=pgm_read_byte(data++);
    b202:	59 01       	movw	r10, r18
    b204:	08 94       	sec
    b206:	a1 1c       	adc	r10, r1
    b208:	b1 1c       	adc	r11, r1
    b20a:	f9 01       	movw	r30, r18
    b20c:	94 91       	lpm	r25, Z+

	x>>=3;
    b20e:	33 e0       	ldi	r19, 0x03	; 3
    b210:	f5 94       	asr	r15
    b212:	e7 94       	ror	r14
    b214:	3a 95       	dec	r19
    b216:	e1 f7       	brne	.-8      	; 0xb210 <TSPRITE+0x4c>
	y>>=3;
    b218:	23 e0       	ldi	r18, 0x03	; 3
    b21a:	15 95       	asr	r17
    b21c:	07 95       	ror	r16
    b21e:	2a 95       	dec	r18
    b220:	e1 f7       	brne	.-8      	; 0xb21a <TSPRITE+0x56>


	for ( j=y; j<y+h; j++ )
    b222:	30 2e       	mov	r3, r16
    b224:	cc 24       	eor	r12, r12
    b226:	dd 24       	eor	r13, r13
    b228:	38 01       	movw	r6, r16
    b22a:	69 0e       	add	r6, r25
    b22c:	71 1c       	adc	r7, r1
	{
    	for ( i=x; i<x+w; i++ )
    b22e:	4e 2c       	mov	r4, r14
    b230:	47 01       	movw	r8, r14
    b232:	88 0e       	add	r8, r24
    b234:	91 1c       	adc	r9, r1
    b236:	1c c0       	rjmp	.+56     	; 0xb270 <TSPRITE+0xac>
    b238:	c0 e0       	ldi	r28, 0x00	; 0
    b23a:	d0 e0       	ldi	r29, 0x00	; 0
		{
            SetTile(i,j,pgm_read_byte(data++));
    b23c:	56 2e       	mov	r5, r22
    b23e:	50 0e       	add	r5, r16
    b240:	0d c0       	rjmp	.+26     	; 0xb25c <TSPRITE+0x98>
	y>>=3;


	for ( j=y; j<y+h; j++ )
	{
    	for ( i=x; i<x+w; i++ )
    b242:	f5 01       	movw	r30, r10
		{
            SetTile(i,j,pgm_read_byte(data++));
    b244:	08 94       	sec
    b246:	a1 1c       	adc	r10, r1
    b248:	b1 1c       	adc	r11, r1
    b24a:	e4 91       	lpm	r30, Z+
    b24c:	82 2f       	mov	r24, r18
    b24e:	8e 0d       	add	r24, r14
    b250:	65 2d       	mov	r22, r5
    b252:	4e 2f       	mov	r20, r30
    b254:	50 e0       	ldi	r21, 0x00	; 0
    b256:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
    b25a:	21 96       	adiw	r28, 0x01	; 1




void TSPRITE(int index,int x,int y)
{
    b25c:	2c 2f       	mov	r18, r28
	y>>=3;


	for ( j=y; j<y+h; j++ )
	{
    	for ( i=x; i<x+w; i++ )
    b25e:	8c 2f       	mov	r24, r28
    b260:	84 0d       	add	r24, r4
    b262:	90 e0       	ldi	r25, 0x00	; 0
    b264:	88 15       	cp	r24, r8
    b266:	99 05       	cpc	r25, r9
    b268:	64 f3       	brlt	.-40     	; 0xb242 <TSPRITE+0x7e>
    b26a:	08 94       	sec
    b26c:	c1 1c       	adc	r12, r1
    b26e:	d1 1c       	adc	r13, r1




void TSPRITE(int index,int x,int y)
{
    b270:	6c 2d       	mov	r22, r12

	x>>=3;
	y>>=3;


	for ( j=y; j<y+h; j++ )
    b272:	8c 2d       	mov	r24, r12
    b274:	83 0d       	add	r24, r3
    b276:	90 e0       	ldi	r25, 0x00	; 0
    b278:	86 15       	cp	r24, r6
    b27a:	97 05       	cpc	r25, r7
    b27c:	ec f2       	brlt	.-70     	; 0xb238 <TSPRITE+0x74>
		{
            SetTile(i,j,pgm_read_byte(data++));
		}
    }
  //	DrawMap2(x,y,pgm_read_word(&tsprite_table[a]));
}
    b27e:	df 91       	pop	r29
    b280:	cf 91       	pop	r28
    b282:	1f 91       	pop	r17
    b284:	0f 91       	pop	r16
    b286:	ff 90       	pop	r15
    b288:	ef 90       	pop	r14
    b28a:	df 90       	pop	r13
    b28c:	cf 90       	pop	r12
    b28e:	bf 90       	pop	r11
    b290:	af 90       	pop	r10
    b292:	9f 90       	pop	r9
    b294:	8f 90       	pop	r8
    b296:	7f 90       	pop	r7
    b298:	6f 90       	pop	r6
    b29a:	5f 90       	pop	r5
    b29c:	4f 90       	pop	r4
    b29e:	3f 90       	pop	r3
    b2a0:	08 95       	ret

0000b2a2 <draw_oxygen_bar>:
    SelectTileset(TILESET_TITLE);
	TSPRITE_DIRECT((u8 *)a0_logo_smap,4*(XREZ/8-BPTR(a0_logo_smap)) ,2*8);
}

void	draw_oxygen_bar()
{
    b2a2:	cf 93       	push	r28
    b2a4:	df 93       	push	r29
    b2a6:	c1 e0       	ldi	r28, 0x01	; 1
    b2a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ex=1;
	 	if (x<g_oxygen)
			ex=0;

	   	TSPRITE(BAR_GREEN_TSP+ex,3*8+MUL8(x+TOPX), MUL8(TOPY+1+2*MAPH+1) );
    b2aa:	20 e0       	ldi	r18, 0x00	; 0
    b2ac:	30 e0       	ldi	r19, 0x00	; 0
    b2ae:	ae 01       	movw	r20, r28
    b2b0:	41 50       	subi	r20, 0x01	; 1
    b2b2:	80 91 b0 0e 	lds	r24, 0x0EB0
    b2b6:	48 17       	cp	r20, r24
    b2b8:	10 f0       	brcs	.+4      	; 0xb2be <draw_oxygen_bar+0x1c>
    b2ba:	21 e0       	ldi	r18, 0x01	; 1
    b2bc:	30 e0       	ldi	r19, 0x00	; 0
    b2be:	be 01       	movw	r22, r28
    b2c0:	53 e0       	ldi	r21, 0x03	; 3
    b2c2:	66 0f       	add	r22, r22
    b2c4:	77 1f       	adc	r23, r23
    b2c6:	5a 95       	dec	r21
    b2c8:	e1 f7       	brne	.-8      	; 0xb2c2 <draw_oxygen_bar+0x20>
    b2ca:	68 5e       	subi	r22, 0xE8	; 232
    b2cc:	7f 4f       	sbci	r23, 0xFF	; 255
    b2ce:	c9 01       	movw	r24, r18
    b2d0:	03 96       	adiw	r24, 0x03	; 3
    b2d2:	48 ec       	ldi	r20, 0xC8	; 200
    b2d4:	50 e0       	ldi	r21, 0x00	; 0
    b2d6:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
    b2da:	21 96       	adiw	r28, 0x01	; 1
{
	u8 x;
	u8 ex;


   	for(x=0;x<22;x+=1)
    b2dc:	c7 31       	cpi	r28, 0x17	; 23
    b2de:	d1 05       	cpc	r29, r1
    b2e0:	21 f7       	brne	.-56     	; 0xb2aa <draw_oxygen_bar+0x8>
	 	if (x<g_oxygen)
			ex=0;

	   	TSPRITE(BAR_GREEN_TSP+ex,3*8+MUL8(x+TOPX), MUL8(TOPY+1+2*MAPH+1) );
	}
}
    b2e2:	df 91       	pop	r29
    b2e4:	cf 91       	pop	r28
    b2e6:	08 95       	ret

0000b2e8 <update_panel>:
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b2e8:	88 e0       	ldi	r24, 0x08	; 8
    b2ea:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    b2ee:	10 92 fa 0e 	sts	0x0EFA, r1
void update_panel()
{
//	u8 wall;

	ugo(8,PANELY*8);
	if ((g_frame>>4)&1 && current_player==0)
    b2f2:	80 91 18 10 	lds	r24, 0x1018
    b2f6:	90 91 19 10 	lds	r25, 0x1019
    b2fa:	e4 e0       	ldi	r30, 0x04	; 4
    b2fc:	95 95       	asr	r25
    b2fe:	87 95       	ror	r24
    b300:	ea 95       	dec	r30
    b302:	e1 f7       	brne	.-8      	; 0xb2fc <update_panel+0x14>
    b304:	80 ff       	sbrs	r24, 0
    b306:	07 c0       	rjmp	.+14     	; 0xb316 <update_panel+0x2e>
    b308:	80 91 ad 0e 	lds	r24, 0x0EAD
    b30c:	88 23       	and	r24, r24
    b30e:	19 f4       	brne	.+6      	; 0xb316 <update_panel+0x2e>
       uprintx(txt_blank3);
    b310:	8a ee       	ldi	r24, 0xEA	; 234
    b312:	91 e8       	ldi	r25, 0x81	; 129
    b314:	02 c0       	rjmp	.+4      	; 0xb31a <update_panel+0x32>
	else
   	   uprintx(txt_1up);
    b316:	8d e8       	ldi	r24, 0x8D	; 141
    b318:	92 e8       	ldi	r25, 0x82	; 130
    b31a:	0e 94 0d 57 	call	0xae1a	; 0xae1a <uprintx>
	uxtab+=8;
    b31e:	80 91 b5 0e 	lds	r24, 0x0EB5
    b322:	88 5f       	subi	r24, 0xF8	; 248
    b324:	80 93 b5 0e 	sts	0x0EB5, r24
	if (dirty & DIRTY_P1)
    b328:	80 91 7e 0e 	lds	r24, 0x0E7E
    b32c:	80 ff       	sbrs	r24, 0
    b32e:	0c c0       	rjmp	.+24     	; 0xb348 <update_panel+0x60>
	{
	 	print_score(score[0],5);
    b330:	80 91 c3 0e 	lds	r24, 0x0EC3
    b334:	90 91 c4 0e 	lds	r25, 0x0EC4
    b338:	65 e0       	ldi	r22, 0x05	; 5
    b33a:	0e 94 b5 56 	call	0xad6a	; 0xad6a <print_score>
		dirty&=~DIRTY_P1;
    b33e:	80 91 7e 0e 	lds	r24, 0x0E7E
    b342:	8e 7f       	andi	r24, 0xFE	; 254
    b344:	80 93 7e 0e 	sts	0x0E7E, r24
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b348:	88 e5       	ldi	r24, 0x58	; 88
    b34a:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    b34e:	10 92 fa 0e 	sts	0x0EFA, r1
	 	print_score(score[0],5);
		dirty&=~DIRTY_P1;
	}

    ugo(11*8,PANELY*8);
	uprintx(txt_hi);
    b352:	8e e9       	ldi	r24, 0x9E	; 158
    b354:	92 e8       	ldi	r25, 0x82	; 130
    b356:	0e 94 0d 57 	call	0xae1a	; 0xae1a <uprintx>

   	if (dirty & DIRTY_HISCORE)
    b35a:	80 91 7e 0e 	lds	r24, 0x0E7E
    b35e:	82 ff       	sbrs	r24, 2
    b360:	11 c0       	rjmp	.+34     	; 0xb384 <update_panel+0x9c>
	{
		uxtab+=8;
    b362:	80 91 b5 0e 	lds	r24, 0x0EB5
    b366:	88 5f       	subi	r24, 0xF8	; 248
    b368:	80 93 b5 0e 	sts	0x0EB5, r24
		print_score(hiscore,5);
    b36c:	80 91 ea 0e 	lds	r24, 0x0EEA
    b370:	90 91 eb 0e 	lds	r25, 0x0EEB
    b374:	65 e0       	ldi	r22, 0x05	; 5
    b376:	0e 94 b5 56 	call	0xad6a	; 0xad6a <print_score>
	 	dirty&=~DIRTY_HISCORE;
    b37a:	80 91 7e 0e 	lds	r24, 0x0E7E
    b37e:	8b 7f       	andi	r24, 0xFB	; 251
    b380:	80 93 7e 0e 	sts	0x0E7E, r24
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b384:	80 ea       	ldi	r24, 0xA0	; 160
    b386:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    b38a:	10 92 fa 0e 	sts	0x0EFA, r1
		print_score(hiscore,5);
	 	dirty&=~DIRTY_HISCORE;
	}

	ugo(20*8,PANELY*8);
	if ((g_frame>>4)&1 && current_player==1)
    b38e:	80 91 18 10 	lds	r24, 0x1018
    b392:	90 91 19 10 	lds	r25, 0x1019
    b396:	74 e0       	ldi	r23, 0x04	; 4
    b398:	95 95       	asr	r25
    b39a:	87 95       	ror	r24
    b39c:	7a 95       	dec	r23
    b39e:	e1 f7       	brne	.-8      	; 0xb398 <update_panel+0xb0>
    b3a0:	80 ff       	sbrs	r24, 0
    b3a2:	07 c0       	rjmp	.+14     	; 0xb3b2 <update_panel+0xca>
    b3a4:	80 91 ad 0e 	lds	r24, 0x0EAD
    b3a8:	81 30       	cpi	r24, 0x01	; 1
    b3aa:	19 f4       	brne	.+6      	; 0xb3b2 <update_panel+0xca>
       	uprintx(txt_blank3);
    b3ac:	8a ee       	ldi	r24, 0xEA	; 234
    b3ae:	91 e8       	ldi	r25, 0x81	; 129
    b3b0:	02 c0       	rjmp	.+4      	; 0xb3b6 <update_panel+0xce>
	else
		uprintx(txt_2up);
    b3b2:	81 e9       	ldi	r24, 0x91	; 145
    b3b4:	92 e8       	ldi	r25, 0x82	; 130
    b3b6:	0e 94 0d 57 	call	0xae1a	; 0xae1a <uprintx>

	if (dirty & DIRTY_P2)
    b3ba:	80 91 7e 0e 	lds	r24, 0x0E7E
    b3be:	81 ff       	sbrs	r24, 1
    b3c0:	11 c0       	rjmp	.+34     	; 0xb3e4 <update_panel+0xfc>
	{
   		uxtab+=8;
    b3c2:	80 91 b5 0e 	lds	r24, 0x0EB5
    b3c6:	88 5f       	subi	r24, 0xF8	; 248
    b3c8:	80 93 b5 0e 	sts	0x0EB5, r24
   		print_score(score[1],5);
    b3cc:	80 91 c5 0e 	lds	r24, 0x0EC5
    b3d0:	90 91 c6 0e 	lds	r25, 0x0EC6
    b3d4:	65 e0       	ldi	r22, 0x05	; 5
    b3d6:	0e 94 b5 56 	call	0xad6a	; 0xad6a <print_score>
		dirty&=~DIRTY_P2;
    b3da:	80 91 7e 0e 	lds	r24, 0x0E7E
    b3de:	8d 7f       	andi	r24, 0xFD	; 253
    b3e0:	80 93 7e 0e 	sts	0x0E7E, r24
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b3e4:	88 e0       	ldi	r24, 0x08	; 8
    b3e6:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    b3ea:	88 ec       	ldi	r24, 0xC8	; 200
    b3ec:	80 93 fa 0e 	sts	0x0EFA, r24
		dirty&=~DIRTY_P2;
	}

	// act ??
    ugo(8,MUL8(BOTY));
	if (state==STATE_PREGAME &&  ((g_frame>>4)&1))
    b3f0:	80 91 ba 0e 	lds	r24, 0x0EBA
    b3f4:	82 30       	cpi	r24, 0x02	; 2
    b3f6:	81 f4       	brne	.+32     	; 0xb418 <update_panel+0x130>
    b3f8:	80 91 18 10 	lds	r24, 0x1018
    b3fc:	90 91 19 10 	lds	r25, 0x1019
    b400:	64 e0       	ldi	r22, 0x04	; 4
    b402:	95 95       	asr	r25
    b404:	87 95       	ror	r24
    b406:	6a 95       	dec	r22
    b408:	e1 f7       	brne	.-8      	; 0xb402 <update_panel+0x11a>
    b40a:	80 ff       	sbrs	r24, 0
    b40c:	05 c0       	rjmp	.+10     	; 0xb418 <update_panel+0x130>
	{
 	   uprintx(txt_blank10);
    b40e:	8a ed       	ldi	r24, 0xDA	; 218
    b410:	91 e8       	ldi	r25, 0x81	; 129
    b412:	0e 94 0d 57 	call	0xae1a	; 0xae1a <uprintx>
    b416:	10 c0       	rjmp	.+32     	; 0xb438 <update_panel+0x150>
	}
	else
 	{
   	 //	uprintx(txt_sector);
   		print_decimal(level[current_player]+1,2);
    b418:	e0 91 ad 0e 	lds	r30, 0x0EAD
    b41c:	ff 27       	eor	r31, r31
    b41e:	e7 fd       	sbrc	r30, 7
    b420:	f0 95       	com	r31
    b422:	ea 52       	subi	r30, 0x2A	; 42
    b424:	f1 4f       	sbci	r31, 0xF1	; 241
    b426:	80 81       	ld	r24, Z
    b428:	90 e0       	ldi	r25, 0x00	; 0
    b42a:	01 96       	adiw	r24, 0x01	; 1
    b42c:	62 e0       	ldi	r22, 0x02	; 2
    b42e:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <print_decimal>
  		uprintc(32);
    b432:	80 e2       	ldi	r24, 0x20	; 32
    b434:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b438:	80 ee       	ldi	r24, 0xE0	; 224
    b43a:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    b43e:	88 ec       	ldi	r24, 0xC8	; 200
    b440:	80 93 fa 0e 	sts	0x0EFA, r24

	  // lives
    ugo(22*8+6*8,MUL8(BOTY));
   //	uprintx(txt_lives);
   //	uxtab+=8;
	print_decimal(lives[current_player],1);
    b444:	e0 91 ad 0e 	lds	r30, 0x0EAD
    b448:	ff 27       	eor	r31, r31
    b44a:	e7 fd       	sbrc	r30, 7
    b44c:	f0 95       	com	r31
    b44e:	e8 50       	subi	r30, 0x08	; 8
    b450:	f1 4f       	sbci	r31, 0xF1	; 241
    b452:	80 81       	ld	r24, Z
    b454:	99 27       	eor	r25, r25
    b456:	87 fd       	sbrc	r24, 7
    b458:	90 95       	com	r25
    b45a:	61 e0       	ldi	r22, 0x01	; 1
    b45c:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <print_decimal>

	if (wall & WALL_RIGHT)
			draw_rightwall( (u8) (g_hitwall&WALL_RIGHT) );
 #endif

	draw_oxygen_bar();
    b460:	0e 94 51 59 	call	0xb2a2	; 0xb2a2 <draw_oxygen_bar>

 //	ugo(10*8,MUL8(BOTY));
 //   print_byte(g_oxygen);

	g_oldwall = g_hitwall;
    b464:	80 91 e9 0e 	lds	r24, 0x0EE9
    b468:	80 93 98 0e 	sts	0x0E98, r24
}
    b46c:	08 95       	ret

0000b46e <draw_snoblock>:
}


void	draw_snoblock()
{
	if (snoblock_ctrl==0) return;
    b46e:	80 91 ac 0e 	lds	r24, 0x0EAC
    b472:	88 23       	and	r24, r24
    b474:	f9 f0       	breq	.+62     	; 0xb4b4 <draw_snoblock+0x46>
    b476:	60 91 e4 0e 	lds	r22, 0x0EE4
    b47a:	40 91 1e 10 	lds	r20, 0x101E

	if (snoblock_ctrl==2)
    b47e:	82 30       	cpi	r24, 0x02	; 2
    b480:	69 f4       	brne	.+26     	; 0xb49c <draw_snoblock+0x2e>
	{
		snoblock_ctrl=0;
    b482:	10 92 ac 0e 	sts	0x0EAC, r1
	   	TSPRITE_BLANK( BLOCK_DIE_00_TSP, snoblock_x+xoff, snoblock_y+yoff );
    b486:	70 e0       	ldi	r23, 0x00	; 0
    b488:	60 5f       	subi	r22, 0xF0	; 240
    b48a:	7f 4f       	sbci	r23, 0xFF	; 255
    b48c:	50 e0       	ldi	r21, 0x00	; 0
    b48e:	40 5f       	subi	r20, 0xF0	; 240
    b490:	5f 4f       	sbci	r21, 0xFF	; 255
    b492:	86 e0       	ldi	r24, 0x06	; 6
    b494:	90 e0       	ldi	r25, 0x00	; 0
    b496:	0e 94 81 58 	call	0xb102	; 0xb102 <TSPRITE_BLANK>
    b49a:	08 95       	ret
	}
	else
	{
    	TSPRITE( BLOCK_DIE_00_TSP + snoblock_frame, snoblock_x+xoff, snoblock_y+yoff );
    b49c:	80 91 e5 0e 	lds	r24, 0x0EE5
    b4a0:	90 e0       	ldi	r25, 0x00	; 0
    b4a2:	70 e0       	ldi	r23, 0x00	; 0
    b4a4:	60 5f       	subi	r22, 0xF0	; 240
    b4a6:	7f 4f       	sbci	r23, 0xFF	; 255
    b4a8:	50 e0       	ldi	r21, 0x00	; 0
    b4aa:	40 5f       	subi	r20, 0xF0	; 240
    b4ac:	5f 4f       	sbci	r21, 0xFF	; 255
    b4ae:	06 96       	adiw	r24, 0x06	; 6
    b4b0:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
    b4b4:	08 95       	ret

0000b4b6 <TSPRITE2>:
		block_remove();
}


u8	TSPRITE2(s16 index,s16 x,s16 y)
{
    b4b6:	1f 93       	push	r17
    b4b8:	9c 01       	movw	r18, r24
	u8 xdiv = (u8) ((x>>1)&3);
    b4ba:	cb 01       	movw	r24, r22
    b4bc:	95 95       	asr	r25
    b4be:	87 95       	ror	r24
    b4c0:	18 2f       	mov	r17, r24
    b4c2:	13 70       	andi	r17, 0x03	; 3
	{
    	//basex = BLOCK_SB_X00_TSP;
    	//basey = BLOCK_SB_Y00_TSP;
	}

	if (xdiv)
    b4c4:	31 f4       	brne	.+12     	; 0xb4d2 <TSPRITE2+0x1c>


u8	TSPRITE2(s16 index,s16 x,s16 y)
{
	u8 xdiv = (u8) ((x>>1)&3);
	u8 ydiv = (u8) ((y>>1)&3);
    b4c6:	ca 01       	movw	r24, r20
    b4c8:	95 95       	asr	r25
    b4ca:	87 95       	ror	r24
    b4cc:	18 2f       	mov	r17, r24
    b4ce:	13 70       	andi	r17, 0x03	; 3
	if (xdiv)
	{
		TSPRITE(basex+xdiv,x,y);
		fr=basex+xdiv;
	}
	else if (ydiv)
    b4d0:	19 f0       	breq	.+6      	; 0xb4d8 <TSPRITE2+0x22>
	{
		TSPRITE(basey+ydiv,x,y);
    b4d2:	81 2f       	mov	r24, r17
    b4d4:	90 e0       	ldi	r25, 0x00	; 0
    b4d6:	03 c0       	rjmp	.+6      	; 0xb4de <TSPRITE2+0x28>

u8	TSPRITE2(s16 index,s16 x,s16 y)
{
	u8 xdiv = (u8) ((x>>1)&3);
	u8 ydiv = (u8) ((y>>1)&3);
	u8 fr = (u8) index;
    b4d8:	12 2f       	mov	r17, r18
		TSPRITE(basey+ydiv,x,y);
	 	fr=basey+ydiv;
	}
	else
	{
   		TSPRITE(index,x,y);
    b4da:	82 2f       	mov	r24, r18
    b4dc:	93 2f       	mov	r25, r19
    b4de:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
	}
	return(fr);
}
    b4e2:	81 2f       	mov	r24, r17
    b4e4:	1f 91       	pop	r17
    b4e6:	08 95       	ret

0000b4e8 <draw_block>:

void	draw_block()
{
	s16 ex;

	if (block_ctrl==0) return;
    b4e8:	80 91 ae 0e 	lds	r24, 0x0EAE
    b4ec:	88 23       	and	r24, r24
    b4ee:	61 f1       	breq	.+88     	; 0xb548 <draw_block+0x60>

    ex=0;

    TSPRITE_BLANK( block_oldsprite, block_oldx+xoff, block_oldy+yoff );
    b4f0:	60 91 b7 0e 	lds	r22, 0x0EB7
    b4f4:	70 e0       	ldi	r23, 0x00	; 0
    b4f6:	60 5f       	subi	r22, 0xF0	; 240
    b4f8:	7f 4f       	sbci	r23, 0xFF	; 255
    b4fa:	40 91 fb 0f 	lds	r20, 0x0FFB
    b4fe:	50 e0       	ldi	r21, 0x00	; 0
    b500:	40 5f       	subi	r20, 0xF0	; 240
    b502:	5f 4f       	sbci	r21, 0xFF	; 255
    b504:	80 91 7f 0e 	lds	r24, 0x0E7F
    b508:	90 e0       	ldi	r25, 0x00	; 0
    b50a:	0e 94 81 58 	call	0xb102	; 0xb102 <TSPRITE_BLANK>
    block_oldsprite=TSPRITE2( block_sprite+ex+block_frame, block_x+xoff, block_y+yoff );
    b50e:	20 91 e6 0e 	lds	r18, 0x0EE6
    b512:	80 91 b1 0e 	lds	r24, 0x0EB1
    b516:	90 e0       	ldi	r25, 0x00	; 0
    b518:	60 91 81 0e 	lds	r22, 0x0E81
    b51c:	70 e0       	ldi	r23, 0x00	; 0
    b51e:	60 5f       	subi	r22, 0xF0	; 240
    b520:	7f 4f       	sbci	r23, 0xFF	; 255
    b522:	40 91 e7 0e 	lds	r20, 0x0EE7
    b526:	50 e0       	ldi	r21, 0x00	; 0
    b528:	40 5f       	subi	r20, 0xF0	; 240
    b52a:	5f 4f       	sbci	r21, 0xFF	; 255
    b52c:	82 0f       	add	r24, r18
    b52e:	91 1d       	adc	r25, r1
    b530:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <TSPRITE2>
    b534:	80 93 7f 0e 	sts	0x0E7F, r24
	block_oldx=block_x;
    b538:	80 91 81 0e 	lds	r24, 0x0E81
    b53c:	80 93 b7 0e 	sts	0x0EB7, r24
	block_oldy=block_y;
    b540:	80 91 e7 0e 	lds	r24, 0x0EE7
    b544:	80 93 fb 0f 	sts	0x0FFB, r24
    b548:	08 95       	ret

0000b54a <block_crush>:

void	block_crush()
{
	s16 x,y;

	block_trigger--;
    b54a:	80 91 82 0e 	lds	r24, 0x0E82
    b54e:	81 50       	subi	r24, 0x01	; 1
    b550:	80 93 82 0e 	sts	0x0E82, r24
	if (block_trigger<=0)
    b554:	88 23       	and	r24, r24
    b556:	99 f5       	brne	.+102    	; 0xb5be <block_crush+0x74>
	{
		block_frame++;
    b558:	80 91 e6 0e 	lds	r24, 0x0EE6
    b55c:	8f 5f       	subi	r24, 0xFF	; 255
    b55e:	80 93 e6 0e 	sts	0x0EE6, r24
		block_trigger=10;
    b562:	9a e0       	ldi	r25, 0x0A	; 10
    b564:	90 93 82 0e 	sts	0x0E82, r25
		if (block_frame>=4)
    b568:	84 30       	cpi	r24, 0x04	; 4
    b56a:	48 f1       	brcs	.+82     	; 0xb5be <block_crush+0x74>
		{
		    x=DIV16(block_x);
    b56c:	60 91 81 0e 	lds	r22, 0x0E81
    b570:	86 2f       	mov	r24, r22
    b572:	82 95       	swap	r24
    b574:	8f 70       	andi	r24, 0x0F	; 15
    b576:	e8 2f       	mov	r30, r24
    b578:	f0 e0       	ldi	r31, 0x00	; 0
			y=DIV16(block_y);
    b57a:	40 91 e7 0e 	lds	r20, 0x0EE7



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    b57e:	ed 30       	cpi	r30, 0x0D	; 13
    b580:	f1 05       	cpc	r31, r1
    b582:	88 f4       	brcc	.+34     	; 0xb5a6 <block_crush+0x5c>
		block_frame++;
		block_trigger=10;
		if (block_frame>=4)
		{
		    x=DIV16(block_x);
			y=DIV16(block_y);
    b584:	84 2f       	mov	r24, r20
    b586:	82 95       	swap	r24
    b588:	8f 70       	andi	r24, 0x0F	; 15
    b58a:	90 e0       	ldi	r25, 0x00	; 0


void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
	if (y<0|| y>=MAPH) return;
    b58c:	8b 30       	cpi	r24, 0x0B	; 11
    b58e:	91 05       	cpc	r25, r1
    b590:	50 f4       	brcc	.+20     	; 0xb5a6 <block_crush+0x5c>
	rmap(x,y) = a;
    b592:	b4 e0       	ldi	r27, 0x04	; 4
    b594:	88 0f       	add	r24, r24
    b596:	99 1f       	adc	r25, r25
    b598:	ba 95       	dec	r27
    b59a:	e1 f7       	brne	.-8      	; 0xb594 <block_crush+0x4a>
    b59c:	e5 50       	subi	r30, 0x05	; 5
    b59e:	f1 4f       	sbci	r31, 0xF1	; 241
    b5a0:	e8 0f       	add	r30, r24
    b5a2:	f9 1f       	adc	r31, r25
    b5a4:	10 82       	st	Z, r1
		if (block_frame>=4)
		{
		    x=DIV16(block_x);
			y=DIV16(block_y);
			set_map(x,y,0);
			block_ctrl=BLOCK_DEAD;
    b5a6:	10 92 ae 0e 	sts	0x0EAE, r1
			TSPRITE(FLOOR_TILE_D_TSP,block_x+xoff,block_y+yoff);
    b5aa:	70 e0       	ldi	r23, 0x00	; 0
    b5ac:	60 5f       	subi	r22, 0xF0	; 240
    b5ae:	7f 4f       	sbci	r23, 0xFF	; 255
    b5b0:	50 e0       	ldi	r21, 0x00	; 0
    b5b2:	40 5f       	subi	r20, 0xF0	; 240
    b5b4:	5f 4f       	sbci	r21, 0xFF	; 255
    b5b6:	86 e2       	ldi	r24, 0x26	; 38
    b5b8:	90 e0       	ldi	r25, 0x00	; 0
    b5ba:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
    b5be:	08 95       	ret

0000b5c0 <do_block>:



void do_block()
{
	if (block_ctrl==BLOCK_CRUSH)
    b5c0:	80 91 ae 0e 	lds	r24, 0x0EAE
    b5c4:	82 30       	cpi	r24, 0x02	; 2
    b5c6:	19 f4       	brne	.+6      	; 0xb5ce <do_block+0xe>
		block_crush();
    b5c8:	0e 94 a5 5a 	call	0xb54a	; 0xb54a <block_crush>
    b5cc:	08 95       	ret
    else if (block_ctrl==BLOCK_ALIVE)
    b5ce:	81 30       	cpi	r24, 0x01	; 1
    b5d0:	19 f4       	brne	.+6      	; 0xb5d8 <do_block+0x18>
		block_move();
    b5d2:	0e 94 d0 53 	call	0xa7a0	; 0xa7a0 <block_move>
    b5d6:	08 95       	ret
    else if (block_ctrl==BLOCK_REMOVE)
    b5d8:	83 30       	cpi	r24, 0x03	; 3
    b5da:	29 f4       	brne	.+10     	; 0xb5e6 <do_block+0x26>
	}
}

void	block_remove()
{
	block_index=255;
    b5dc:	8f ef       	ldi	r24, 0xFF	; 255
    b5de:	80 93 a5 0e 	sts	0x0EA5, r24
  	block_ctrl=BLOCK_DEAD;
    b5e2:	10 92 ae 0e 	sts	0x0EAE, r1
    b5e6:	08 95       	ret

0000b5e8 <DKFill>:
       	MoveSprite(a[i].spriteIndex, a[i].loc.x, a[i].loc.y, w, h);
	}
}

void DKFill(const rect *r, u8 tileId)
{
    b5e8:	ef 92       	push	r14
    b5ea:	ff 92       	push	r15
    b5ec:	0f 93       	push	r16
    b5ee:	1f 93       	push	r17
    b5f0:	cf 93       	push	r28
    b5f2:	df 93       	push	r29
    b5f4:	ec 01       	movw	r28, r24
    b5f6:	e6 2e       	mov	r14, r22
	u8 x,y;

	for (y = r->top; y < r->btm; y+=TILE_WIDTH)
    b5f8:	0a 81       	ldd	r16, Y+2	; 0x02
    b5fa:	14 c0       	rjmp	.+40     	; 0xb624 <DKFill+0x3c>
	{
    	for (x = r->left; x < r->right; x+=TILE_HEIGHT)
    b5fc:	18 81       	ld	r17, Y
		{
            SetTile(x>>3,y>>3,tileId);
    b5fe:	f0 2e       	mov	r15, r16
    b600:	f6 94       	lsr	r15
    b602:	f6 94       	lsr	r15
    b604:	f6 94       	lsr	r15
    b606:	0a c0       	rjmp	.+20     	; 0xb61c <DKFill+0x34>
{
	u8 x,y;

	for (y = r->top; y < r->btm; y+=TILE_WIDTH)
	{
    	for (x = r->left; x < r->right; x+=TILE_HEIGHT)
    b608:	81 2f       	mov	r24, r17
    b60a:	86 95       	lsr	r24
    b60c:	86 95       	lsr	r24
    b60e:	86 95       	lsr	r24
    b610:	6f 2d       	mov	r22, r15
    b612:	4e 2d       	mov	r20, r14
    b614:	50 e0       	ldi	r21, 0x00	; 0
    b616:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
    b61a:	18 5f       	subi	r17, 0xF8	; 248
    b61c:	89 81       	ldd	r24, Y+1	; 0x01
    b61e:	18 17       	cp	r17, r24
    b620:	98 f3       	brcs	.-26     	; 0xb608 <DKFill+0x20>

void DKFill(const rect *r, u8 tileId)
{
	u8 x,y;

	for (y = r->top; y < r->btm; y+=TILE_WIDTH)
    b622:	08 5f       	subi	r16, 0xF8	; 248
    b624:	8b 81       	ldd	r24, Y+3	; 0x03
    b626:	08 17       	cp	r16, r24
    b628:	48 f3       	brcs	.-46     	; 0xb5fc <DKFill+0x14>
    	for (x = r->left; x < r->right; x+=TILE_HEIGHT)
		{
            SetTile(x>>3,y>>3,tileId);
		}
    }
}
    b62a:	df 91       	pop	r29
    b62c:	cf 91       	pop	r28
    b62e:	1f 91       	pop	r17
    b630:	0f 91       	pop	r16
    b632:	ff 90       	pop	r15
    b634:	ef 90       	pop	r14
    b636:	08 95       	ret

0000b638 <ClearSubMap>:
 	DKFill(&(rect){0,XREZ,y1<<3,y2<<3}, val);
}


void	ClearSubMap(u8 val)
{
    b638:	df 93       	push	r29
    b63a:	cf 93       	push	r28
    b63c:	00 d0       	rcall	.+0      	; 0xb63e <ClearSubMap+0x6>
    b63e:	00 d0       	rcall	.+0      	; 0xb640 <ClearSubMap+0x8>
    b640:	cd b7       	in	r28, 0x3d	; 61
    b642:	de b7       	in	r29, 0x3e	; 62
    b644:	68 2f       	mov	r22, r24
 	DKFill(&(rect){8,XREZ-8,2*8,YREZ-2*8}, val);
    b646:	88 e0       	ldi	r24, 0x08	; 8
    b648:	89 83       	std	Y+1, r24	; 0x01
    b64a:	88 ee       	ldi	r24, 0xE8	; 232
    b64c:	8a 83       	std	Y+2, r24	; 0x02
    b64e:	80 e1       	ldi	r24, 0x10	; 16
    b650:	8b 83       	std	Y+3, r24	; 0x03
    b652:	80 ec       	ldi	r24, 0xC0	; 192
    b654:	8c 83       	std	Y+4, r24	; 0x04
    b656:	ce 01       	movw	r24, r28
    b658:	01 96       	adiw	r24, 0x01	; 1
    b65a:	0e 94 f4 5a 	call	0xb5e8	; 0xb5e8 <DKFill>
}
    b65e:	0f 90       	pop	r0
    b660:	0f 90       	pop	r0
    b662:	0f 90       	pop	r0
    b664:	0f 90       	pop	r0
    b666:	cf 91       	pop	r28
    b668:	df 91       	pop	r29
    b66a:	08 95       	ret

0000b66c <ClearMap>:
	SetTile(x,y,a);
}


void	ClearMap(u8 val)
{
    b66c:	df 93       	push	r29
    b66e:	cf 93       	push	r28
    b670:	00 d0       	rcall	.+0      	; 0xb672 <ClearMap+0x6>
    b672:	00 d0       	rcall	.+0      	; 0xb674 <ClearMap+0x8>
    b674:	cd b7       	in	r28, 0x3d	; 61
    b676:	de b7       	in	r29, 0x3e	; 62
    b678:	68 2f       	mov	r22, r24
 	DKFill(&(rect){0,XREZ,0,YREZ}, val);
    b67a:	19 82       	std	Y+1, r1	; 0x01
    b67c:	80 ef       	ldi	r24, 0xF0	; 240
    b67e:	8a 83       	std	Y+2, r24	; 0x02
    b680:	1b 82       	std	Y+3, r1	; 0x03
    b682:	80 ed       	ldi	r24, 0xD0	; 208
    b684:	8c 83       	std	Y+4, r24	; 0x04
    b686:	ce 01       	movw	r24, r28
    b688:	01 96       	adiw	r24, 0x01	; 1
    b68a:	0e 94 f4 5a 	call	0xb5e8	; 0xb5e8 <DKFill>
}
    b68e:	0f 90       	pop	r0
    b690:	0f 90       	pop	r0
    b692:	0f 90       	pop	r0
    b694:	0f 90       	pop	r0
    b696:	cf 91       	pop	r28
    b698:	df 91       	pop	r29
    b69a:	08 95       	ret

0000b69c <draw_enter>:
	   	printx_ram(scores[i].name);
	}
}

void draw_enter()
{
    b69c:	1f 93       	push	r17
	ClearMap(0);
    b69e:	80 e0       	ldi	r24, 0x00	; 0
    b6a0:	0e 94 36 5b 	call	0xb66c	; 0xb66c <ClearMap>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b6a4:	18 e7       	ldi	r17, 0x78	; 120
    b6a6:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    b6aa:	88 e0       	ldi	r24, 0x08	; 8
    b6ac:	80 93 fa 0e 	sts	0x0EFA, r24
void draw_enter()
{
	ClearMap(0);

	ugo(XREZ/2,8);
	ucprintx(txt_congratulations);
    b6b0:	86 e1       	ldi	r24, 0x16	; 22
    b6b2:	92 e8       	ldi	r25, 0x82	; 130
    b6b4:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b6b8:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    b6bc:	80 e2       	ldi	r24, 0x20	; 32
    b6be:	80 93 fa 0e 	sts	0x0EFA, r24

	ugo(XREZ/2,8);
	ucprintx(txt_congratulations);

    ugo(XREZ/2,4*8);
	ucprintx(txt_youareinthetopten);
    b6c2:	8e ef       	ldi	r24, 0xFE	; 254
    b6c4:	91 e8       	ldi	r25, 0x81	; 129
    b6c6:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b6ca:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    b6ce:	88 e3       	ldi	r24, 0x38	; 56
    b6d0:	80 93 fa 0e 	sts	0x0EFA, r24

    ugo(XREZ/2,4*8);
	ucprintx(txt_youareinthetopten);

    ugo(XREZ/2,7*8);
	ucprintx(txt_please_enter_your_name);
    b6d4:	80 e5       	ldi	r24, 0x50	; 80
    b6d6:	92 e8       	ldi	r25, 0x82	; 130
    b6d8:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}
    b6dc:	1f 91       	pop	r17
    b6de:	08 95       	ret

0000b6e0 <uze_hiscore_insert>:
	}
	return(new_position);
}

int	uze_hiscore_insert(s16 newscore)
{
    b6e0:	0f 93       	push	r16
    b6e2:	1f 93       	push	r17
    b6e4:	cf 93       	push	r28
    b6e6:	df 93       	push	r29
    b6e8:	8c 01       	movw	r16, r24
	s16 	new_position;
	s16 	i;

	new_position = uze_hiscore_getrank(newscore);
    b6ea:	0e 94 47 52 	call	0xa48e	; 0xa48e <uze_hiscore_getrank>
    b6ee:	68 2f       	mov	r22, r24
    b6f0:	77 27       	eor	r23, r23
    b6f2:	67 fd       	sbrc	r22, 7
    b6f4:	70 95       	com	r23
	if (new_position==-1) return(-1);
    b6f6:	8f ef       	ldi	r24, 0xFF	; 255
    b6f8:	6f 3f       	cpi	r22, 0xFF	; 255
    b6fa:	78 07       	cpc	r23, r24
    b6fc:	e9 f1       	breq	.+122    	; 0xb778 <uze_hiscore_insert+0x98>

	// shift all scores down

	if (new_position!=MAX_HISCORE-1)
    b6fe:	64 30       	cpi	r22, 0x04	; 4
    b700:	71 05       	cpc	r23, r1
    b702:	31 f1       	breq	.+76     	; 0xb750 <uze_hiscore_insert+0x70>
    b704:	c3 e0       	ldi	r28, 0x03	; 3
    b706:	d0 e0       	ldi	r29, 0x00	; 0
    b708:	48 e1       	ldi	r20, 0x18	; 24
    b70a:	50 e0       	ldi	r21, 0x00	; 0
    b70c:	1c c0       	rjmp	.+56     	; 0xb746 <uze_hiscore_insert+0x66>
	{
		for (i=MAX_HISCORE-2;i>=new_position;i--)
		{
			scores[i+1].val = scores[i].val;
    b70e:	e0 91 8c 0e 	lds	r30, 0x0E8C
    b712:	f0 91 8d 0e 	lds	r31, 0x0E8D
    b716:	4a 5f       	subi	r20, 0xFA	; 250
    b718:	5f 4f       	sbci	r21, 0xFF	; 255
    b71a:	9f 01       	movw	r18, r30
    b71c:	24 0f       	add	r18, r20
    b71e:	35 1f       	adc	r19, r21
    b720:	46 50       	subi	r20, 0x06	; 6
    b722:	50 40       	sbci	r21, 0x00	; 0
    b724:	e4 0f       	add	r30, r20
    b726:	f5 1f       	adc	r31, r21
    b728:	80 81       	ld	r24, Z
    b72a:	91 81       	ldd	r25, Z+1	; 0x01
    b72c:	d9 01       	movw	r26, r18
    b72e:	8d 93       	st	X+, r24
    b730:	9c 93       	st	X, r25
			memcpy(&scores[i+1].name[0],&scores[i].name[0],NAMESIZE);
    b732:	82 81       	ldd	r24, Z+2	; 0x02
    b734:	93 81       	ldd	r25, Z+3	; 0x03
    b736:	a4 81       	ldd	r26, Z+4	; 0x04
    b738:	b5 81       	ldd	r27, Z+5	; 0x05
    b73a:	f9 01       	movw	r30, r18
    b73c:	82 83       	std	Z+2, r24	; 0x02
    b73e:	93 83       	std	Z+3, r25	; 0x03
    b740:	a4 83       	std	Z+4, r26	; 0x04
    b742:	b5 83       	std	Z+5, r27	; 0x05

	// shift all scores down

	if (new_position!=MAX_HISCORE-1)
	{
		for (i=MAX_HISCORE-2;i>=new_position;i--)
    b744:	21 97       	sbiw	r28, 0x01	; 1
    b746:	46 50       	subi	r20, 0x06	; 6
    b748:	50 40       	sbci	r21, 0x00	; 0
    b74a:	c6 17       	cp	r28, r22
    b74c:	d7 07       	cpc	r29, r23
    b74e:	fc f6       	brge	.-66     	; 0xb70e <uze_hiscore_insert+0x2e>
			memcpy(&scores[i+1].name[0],&scores[i].name[0],NAMESIZE);
		}
  	}

	// add in new score
   scores[new_position].val = (unsigned short) newscore;
    b750:	cb 01       	movw	r24, r22
    b752:	88 0f       	add	r24, r24
    b754:	99 1f       	adc	r25, r25
    b756:	86 0f       	add	r24, r22
    b758:	97 1f       	adc	r25, r23
    b75a:	88 0f       	add	r24, r24
    b75c:	99 1f       	adc	r25, r25
    b75e:	e0 91 8c 0e 	lds	r30, 0x0E8C
    b762:	f0 91 8d 0e 	lds	r31, 0x0E8D
    b766:	e8 0f       	add	r30, r24
    b768:	f9 1f       	adc	r31, r25
    b76a:	11 83       	std	Z+1, r17	; 0x01
    b76c:	00 83       	st	Z, r16
   scores[new_position].name[0]='.';
    b76e:	8e e2       	ldi	r24, 0x2E	; 46
    b770:	82 83       	std	Z+2, r24	; 0x02
   scores[new_position].name[1]='.';
    b772:	83 83       	std	Z+3, r24	; 0x03
   scores[new_position].name[2]='.';
    b774:	84 83       	std	Z+4, r24	; 0x04
   scores[new_position].name[3]=0;
    b776:	15 82       	std	Z+5, r1	; 0x05

   return(new_position);
}
    b778:	cb 01       	movw	r24, r22
    b77a:	df 91       	pop	r29
    b77c:	cf 91       	pop	r28
    b77e:	1f 91       	pop	r17
    b780:	0f 91       	pop	r16
    b782:	08 95       	ret

0000b784 <hiscore_load_from_eeprom>:
	dirty|=DIRTY_P1+current_player;
}


SCORE *hiscore_load_from_eeprom(u8 *ram)
{
    b784:	0f 93       	push	r16
    b786:	1f 93       	push	r17
	struct EepromBlockStruct *ebs = (struct EepromBlockStruct*)ram;
    b788:	18 2f       	mov	r17, r24
    b78a:	09 2f       	mov	r16, r25
	ebs->id = SPACEAGE_EEPROM_ID;
    b78c:	e8 2f       	mov	r30, r24
    b78e:	f9 2f       	mov	r31, r25
    b790:	87 e1       	ldi	r24, 0x17	; 23
    b792:	90 e0       	ldi	r25, 0x00	; 0
    b794:	81 93       	st	Z+, r24
    b796:	91 93       	st	Z+, r25
   	scores = (SCORE *)&ebs->data[0];
    b798:	f0 93 8d 0e 	sts	0x0E8D, r31
    b79c:	e0 93 8c 0e 	sts	0x0E8C, r30

	// if read failed return non zero so init the hiscore
	if (EepromReadBlock(ebs->id, ebs)!=0)
    b7a0:	61 2f       	mov	r22, r17
    b7a2:	70 2f       	mov	r23, r16
    b7a4:	0e 94 85 46 	call	0x8d0a	; 0x8d0a <EepromReadBlock>
    b7a8:	88 23       	and	r24, r24
    b7aa:	31 f0       	breq	.+12     	; 0xb7b8 <hiscore_load_from_eeprom+0x34>
	{
    	uze_hiscore_init();
    b7ac:	0e 94 5a 52 	call	0xa4b4	; 0xa4b4 <uze_hiscore_init>
	   	EepromWriteBlock(ebs);
    b7b0:	81 2f       	mov	r24, r17
    b7b2:	90 2f       	mov	r25, r16
    b7b4:	0e 94 e3 46 	call	0x8dc6	; 0x8dc6 <EepromWriteBlock>
	}
	return(scores);
}
    b7b8:	80 91 8c 0e 	lds	r24, 0x0E8C
    b7bc:	90 91 8d 0e 	lds	r25, 0x0E8D
    b7c0:	1f 91       	pop	r17
    b7c2:	0f 91       	pop	r16
    b7c4:	08 95       	ret

0000b7c6 <draw_hiscore>:

#define HISCORE_GAPY	16
#define HISCORE_STARTY (96+16)

void draw_hiscore()
{
    b7c6:	cf 92       	push	r12
    b7c8:	df 92       	push	r13
    b7ca:	ef 92       	push	r14
    b7cc:	ff 92       	push	r15
    b7ce:	0f 93       	push	r16
    b7d0:	1f 93       	push	r17
    b7d2:	cf 93       	push	r28
    b7d4:	df 93       	push	r29
	u8 i;

	if (scores==0)
    b7d6:	80 91 8c 0e 	lds	r24, 0x0E8C
    b7da:	90 91 8d 0e 	lds	r25, 0x0E8D
    b7de:	89 2b       	or	r24, r25
    b7e0:	41 f4       	brne	.+16     	; 0xb7f2 <draw_hiscore+0x2c>
	{
		scores=hiscore_load_from_eeprom( hiscore_mem );
    b7e2:	8b ef       	ldi	r24, 0xFB	; 251
    b7e4:	9e e0       	ldi	r25, 0x0E	; 14
    b7e6:	0e 94 c2 5b 	call	0xb784	; 0xb784 <hiscore_load_from_eeprom>
    b7ea:	90 93 8d 0e 	sts	0x0E8D, r25
    b7ee:	80 93 8c 0e 	sts	0x0E8C, r24
    b7f2:	10 e7       	ldi	r17, 0x70	; 112
    b7f4:	f1 2e       	mov	r15, r17
    b7f6:	01 e0       	ldi	r16, 0x01	; 1
    b7f8:	10 e0       	ldi	r17, 0x00	; 0
    b7fa:	c0 e0       	ldi	r28, 0x00	; 0
    b7fc:	d0 e0       	ldi	r29, 0x00	; 0
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b7fe:	b0 e1       	ldi	r27, 0x10	; 16
    b800:	cb 2e       	mov	r12, r27
	uytab = y;
    b802:	a8 e6       	ldi	r26, 0x68	; 104
    b804:	da 2e       	mov	r13, r26
    b806:	f8 ec       	ldi	r31, 0xC8	; 200
    b808:	ef 2e       	mov	r14, r31
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b80a:	c0 92 b5 0e 	sts	0x0EB5, r12
	uytab = y;
    b80e:	f0 92 fa 0e 	sts	0x0EFA, r15


	for(i=0;i<MAX_HISCORE;i++)
	{
		ugo(16,HISCORE_GAPY*i+HISCORE_STARTY);
		print_decimal(i+1,1);
    b812:	c8 01       	movw	r24, r16
    b814:	61 e0       	ldi	r22, 0x01	; 1
    b816:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <print_decimal>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b81a:	d0 92 b5 0e 	sts	0x0EB5, r13
	uytab = y;
    b81e:	f0 92 fa 0e 	sts	0x0EFA, r15
	{
		ugo(16,HISCORE_GAPY*i+HISCORE_STARTY);
		print_decimal(i+1,1);

	    ugo(XREZ/2-2*8,HISCORE_GAPY*i+HISCORE_STARTY);
		print_score(scores[i].val,5);
    b822:	e0 91 8c 0e 	lds	r30, 0x0E8C
    b826:	f0 91 8d 0e 	lds	r31, 0x0E8D
    b82a:	ec 0f       	add	r30, r28
    b82c:	fd 1f       	adc	r31, r29
    b82e:	80 81       	ld	r24, Z
    b830:	91 81       	ldd	r25, Z+1	; 0x01
    b832:	65 e0       	ldi	r22, 0x05	; 5
    b834:	0e 94 b5 56 	call	0xad6a	; 0xad6a <print_score>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    b838:	e0 92 b5 0e 	sts	0x0EB5, r14
	uytab = y;
    b83c:	f0 92 fa 0e 	sts	0x0EFA, r15

	    ugo(XREZ/2-2*8,HISCORE_GAPY*i+HISCORE_STARTY);
		print_score(scores[i].val,5);

	   	ugo(XREZ-40,HISCORE_GAPY*i+HISCORE_STARTY);
	   	printx_ram(scores[i].name);
    b840:	80 91 8c 0e 	lds	r24, 0x0E8C
    b844:	90 91 8d 0e 	lds	r25, 0x0E8D
    b848:	8c 0f       	add	r24, r28
    b84a:	9d 1f       	adc	r25, r29
    b84c:	02 96       	adiw	r24, 0x02	; 2
    b84e:	0e 94 01 57 	call	0xae02	; 0xae02 <printx_ram>
    b852:	80 e1       	ldi	r24, 0x10	; 16
    b854:	f8 0e       	add	r15, r24
    b856:	0f 5f       	subi	r16, 0xFF	; 255
    b858:	1f 4f       	sbci	r17, 0xFF	; 255
    b85a:	26 96       	adiw	r28, 0x06	; 6
	{
		scores=hiscore_load_from_eeprom( hiscore_mem );
	}


	for(i=0;i<MAX_HISCORE;i++)
    b85c:	80 ec       	ldi	r24, 0xC0	; 192
    b85e:	f8 16       	cp	r15, r24
    b860:	a1 f6       	brne	.-88     	; 0xb80a <draw_hiscore+0x44>
		print_score(scores[i].val,5);

	   	ugo(XREZ-40,HISCORE_GAPY*i+HISCORE_STARTY);
	   	printx_ram(scores[i].name);
	}
}
    b862:	df 91       	pop	r29
    b864:	cf 91       	pop	r28
    b866:	1f 91       	pop	r17
    b868:	0f 91       	pop	r16
    b86a:	ff 90       	pop	r15
    b86c:	ef 90       	pop	r14
    b86e:	df 90       	pop	r13
    b870:	cf 90       	pop	r12
    b872:	08 95       	ret

0000b874 <SelectTileset>:
}


void SelectTileset(u8 setindex)
{
	switch(setindex)
    b874:	88 23       	and	r24, r24
    b876:	39 f4       	brne	.+14     	; 0xb886 <SelectTileset+0x12>
	{
		case TILESET_TITLE:
	   		font_base = 0x0;
    b878:	10 92 f7 0e 	sts	0x0EF7, r1



void  	ds_setts( char *data, int pengo_logo_data, short *smap )
{
	SetTileTable((char *)data);
    b87c:	86 e7       	ldi	r24, 0x76	; 118
    b87e:	92 e0       	ldi	r25, 0x02	; 2
    b880:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <SetTileTable>
    b884:	08 95       	ret
  	        ds_setts( (char *)ts_data, sizeof(ts_data),(short *)smap );
			break;
	   case TILESET_GAME:
	   default:
		    ds_setts((char *)ts_data,sizeof(ts_data),(short *)smap);
		   	font_base=0;
    b886:	86 e7       	ldi	r24, 0x76	; 118
    b888:	92 e0       	ldi	r25, 0x02	; 2
    b88a:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <SetTileTable>
    b88e:	10 92 f7 0e 	sts	0x0EF7, r1
    b892:	08 95       	ret

0000b894 <draw_title>:
}


void	draw_title()
{
  	ClearMap(0);
    b894:	80 e0       	ldi	r24, 0x00	; 0
    b896:	0e 94 36 5b 	call	0xb66c	; 0xb66c <ClearMap>
    SelectTileset(TILESET_TITLE);
    b89a:	80 e0       	ldi	r24, 0x00	; 0
    b89c:	0e 94 3a 5c 	call	0xb874	; 0xb874 <SelectTileset>
	TSPRITE_DIRECT((u8 *)a0_logo_smap,4*(XREZ/8-BPTR(a0_logo_smap)) ,2*8);
    b8a0:	e4 ee       	ldi	r30, 0xE4	; 228
    b8a2:	f0 e0       	ldi	r31, 0x00	; 0
    b8a4:	84 91       	lpm	r24, Z+
    b8a6:	6e e1       	ldi	r22, 0x1E	; 30
    b8a8:	70 e0       	ldi	r23, 0x00	; 0
    b8aa:	68 1b       	sub	r22, r24
    b8ac:	71 09       	sbc	r23, r1
    b8ae:	66 0f       	add	r22, r22
    b8b0:	77 1f       	adc	r23, r23
    b8b2:	66 0f       	add	r22, r22
    b8b4:	77 1f       	adc	r23, r23
    b8b6:	cf 01       	movw	r24, r30
    b8b8:	40 e1       	ldi	r20, 0x10	; 16
    b8ba:	50 e0       	ldi	r21, 0x00	; 0
    b8bc:	0e 94 19 58 	call	0xb032	; 0xb032 <TSPRITE_DIRECT>
}
    b8c0:	08 95       	ret

0000b8c2 <boot>:
	p=start_bg(1);
	p->level=0;
#endif


	state=0;
    b8c2:	10 92 ba 0e 	sts	0x0EBA, r1
	gtimer=0;
    b8c6:	10 92 8a 0e 	sts	0x0E8A, r1
    b8ca:	10 92 89 0e 	sts	0x0E89, r1
	draw_title();
    b8ce:	0e 94 4a 5c 	call	0xb894	; 0xb894 <draw_title>
	number_of_players=1;
    b8d2:	81 e0       	ldi	r24, 0x01	; 1
    b8d4:	80 93 0c 10 	sts	0x100C, r24
	g_frame=0;
    b8d8:	10 92 19 10 	sts	0x1019, r1
    b8dc:	10 92 18 10 	sts	0x1018, r1
	scores=0;
    b8e0:	10 92 8d 0e 	sts	0x0E8D, r1
    b8e4:	10 92 8c 0e 	sts	0x0E8C, r1
	pend_gtimer=0;
    b8e8:	10 92 b8 0e 	sts	0x0EB8, r1
	gtimer=0;
    b8ec:	10 92 8a 0e 	sts	0x0E8A, r1
    b8f0:	10 92 89 0e 	sts	0x0E89, r1
	music_vol=0xff;
    b8f4:	8f ef       	ldi	r24, 0xFF	; 255
    b8f6:	80 93 20 10 	sts	0x1020, r24
   	//	hiscore=2000;
	scores=hiscore_load_from_eeprom(hiscore_mem);
    b8fa:	8b ef       	ldi	r24, 0xFB	; 251
    b8fc:	9e e0       	ldi	r25, 0x0E	; 14
    b8fe:	0e 94 c2 5b 	call	0xb784	; 0xb784 <hiscore_load_from_eeprom>
    b902:	fc 01       	movw	r30, r24
    b904:	90 93 8d 0e 	sts	0x0E8D, r25
    b908:	80 93 8c 0e 	sts	0x0E8C, r24
	hiscore = scores[0].val;
    b90c:	80 81       	ld	r24, Z
    b90e:	91 81       	ldd	r25, Z+1	; 0x01
    b910:	90 93 eb 0e 	sts	0x0EEB, r25
    b914:	80 93 ea 0e 	sts	0x0EEA, r24
	return( a );
}

u8 TSPRITE_GET_INDEX(u8 index,u8 offset)
{
   	const char *data=(const char *)pgm_read_word(&tsprite_table[index]);
    b918:	8a ef       	ldi	r24, 0xFA	; 250
    b91a:	99 e3       	ldi	r25, 0x39	; 57
    b91c:	fc 01       	movw	r30, r24
    b91e:	25 91       	lpm	r18, Z+
    b920:	34 91       	lpm	r19, Z+
   	u8 w=pgm_read_byte(&data[2+offset]);
    b922:	2e 5f       	subi	r18, 0xFE	; 254
    b924:	3f 4f       	sbci	r19, 0xFF	; 255
    b926:	f9 01       	movw	r30, r18
    b928:	84 91       	lpm	r24, Z+

	// 	hiscore test
	//	score[0]=0xFFFF;
 	//	state=STATE_GAMEOVER;
 	//	gtimer=1;
 	TILE_FADER		= TSPRITE_GET_INDEX(A1_FADER_TSP,0);
    b92a:	80 93 c1 0e 	sts	0x0EC1, r24
}
    b92e:	08 95       	ret

0000b930 <hiscore_check>:

   return(new_position);
}

void	hiscore_check(s16 newscore)
{
    b930:	cf 93       	push	r28
    b932:	df 93       	push	r29
    b934:	ec 01       	movw	r28, r24
	his_rank=uze_hiscore_getrank(newscore);
    b936:	0e 94 47 52 	call	0xa48e	; 0xa48e <uze_hiscore_getrank>
    b93a:	80 93 04 10 	sts	0x1004, r24
	if (his_rank>=0)
    b93e:	87 fd       	sbrc	r24, 7
    b940:	14 c0       	rjmp	.+40     	; 0xb96a <hiscore_check+0x3a>
	{
	   	uze_hiscore_insert(newscore);
    b942:	ce 01       	movw	r24, r28
    b944:	0e 94 70 5b 	call	0xb6e0	; 0xb6e0 <uze_hiscore_insert>
	  	gtimer=0;
    b948:	10 92 8a 0e 	sts	0x0E8A, r1
    b94c:	10 92 89 0e 	sts	0x0E89, r1
		his_pos=0;
    b950:	10 92 c7 0e 	sts	0x0EC7, r1
		his_let=0;
    b954:	10 92 bc 0e 	sts	0x0EBC, r1
	   	state=STATE_ENTERNAME;
    b958:	8a e0       	ldi	r24, 0x0A	; 10
    b95a:	80 93 ba 0e 	sts	0x0EBA, r24
		ClearMap(0);
    b95e:	80 e0       	ldi	r24, 0x00	; 0
    b960:	0e 94 36 5b 	call	0xb66c	; 0xb66c <ClearMap>
		draw_enter();
    b964:	0e 94 4e 5b 	call	0xb69c	; 0xb69c <draw_enter>
    b968:	10 c0       	rjmp	.+32     	; 0xb98a <hiscore_check+0x5a>
	}
	else
	{
		gtimer=3*SECOND;
    b96a:	84 eb       	ldi	r24, 0xB4	; 180
    b96c:	90 e0       	ldi	r25, 0x00	; 0
    b96e:	90 93 8a 0e 	sts	0x0E8A, r25
    b972:	80 93 89 0e 	sts	0x0E89, r24
		state=STATE_HISCORE;
    b976:	8b e0       	ldi	r24, 0x0B	; 11
    b978:	80 93 ba 0e 	sts	0x0EBA, r24
	   	ClearMap(0);
    b97c:	80 e0       	ldi	r24, 0x00	; 0
    b97e:	0e 94 36 5b 	call	0xb66c	; 0xb66c <ClearMap>
		draw_title();
    b982:	0e 94 4a 5c 	call	0xb894	; 0xb894 <draw_title>
		draw_hiscore();
    b986:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <draw_hiscore>
	}
}
    b98a:	df 91       	pop	r29
    b98c:	cf 91       	pop	r28
    b98e:	08 95       	ret

0000b990 <play_music>:


void play_music(int a)
{
	a&=0x7FFF;
	switch(a)
    b990:	9f 77       	andi	r25, 0x7F	; 127
    b992:	82 30       	cpi	r24, 0x02	; 2
    b994:	91 05       	cpc	r25, r1
    b996:	81 f0       	breq	.+32     	; 0xb9b8 <play_music+0x28>
    b998:	83 30       	cpi	r24, 0x03	; 3
    b99a:	91 05       	cpc	r25, r1
    b99c:	19 f0       	breq	.+6      	; 0xb9a4 <play_music+0x14>
    b99e:	01 97       	sbiw	r24, 0x01	; 1
    b9a0:	71 f4       	brne	.+28     	; 0xb9be <play_music+0x2e>
    b9a2:	07 c0       	rjmp	.+14     	; 0xb9b2 <play_music+0x22>
	{
	 	case MUSIC_INGAME:
			if (music_vol)
    b9a4:	80 91 20 10 	lds	r24, 0x1020
    b9a8:	88 23       	and	r24, r24
    b9aa:	49 f0       	breq	.+18     	; 0xb9be <play_music+0x2e>
   			//StartSong(music_pengo_music_ingame_sega);
				StartSong(music_telstar);	//pengo_ch0_a);
    b9ac:	8c e1       	ldi	r24, 0x1C	; 28
    b9ae:	93 e7       	ldi	r25, 0x73	; 115
    b9b0:	08 c0       	rjmp	.+16     	; 0xb9c2 <play_music+0x32>
			else
   		  		StartSong(music_stop);
			break;
	    case MUSIC_DIE:
 		   	StartSong(music_pengo_music_die);
    b9b2:	8b e8       	ldi	r24, 0x8B	; 139
    b9b4:	9b e6       	ldi	r25, 0x6B	; 107
    b9b6:	05 c0       	rjmp	.+10     	; 0xb9c2 <play_music+0x32>
			break;
		case MUSIC_START:
  			StartSong(music_pengo_music_start);
    b9b8:	80 ea       	ldi	r24, 0xA0	; 160
    b9ba:	9c e6       	ldi	r25, 0x6C	; 108
    b9bc:	02 c0       	rjmp	.+4      	; 0xb9c2 <play_music+0x32>
			break;
	   	default:
   		  	StartSong(music_stop);
    b9be:	87 e9       	ldi	r24, 0x97	; 151
    b9c0:	91 e8       	ldi	r25, 0x81	; 129
    b9c2:	0e 94 f3 47 	call	0x8fe6	; 0x8fe6 <StartSong>
    b9c6:	08 95       	ret

0000b9c8 <player_start_die>:
	}
}

void	player_start_die()
{
   	player_ctrl = PLAYER_DIE;
    b9c8:	83 e0       	ldi	r24, 0x03	; 3
    b9ca:	80 93 dd 0e 	sts	0x0EDD, r24
   	player_trigger = 0;
    b9ce:	10 92 af 0e 	sts	0x0EAF, r1
   	player_gtimer = 2*SECOND;
    b9d2:	88 e7       	ldi	r24, 0x78	; 120
    b9d4:	80 93 8b 0e 	sts	0x0E8B, r24
   	play_music(0x8000|MUSIC_DIE);
    b9d8:	81 e0       	ldi	r24, 0x01	; 1
    b9da:	90 e8       	ldi	r25, 0x80	; 128
    b9dc:	0e 94 c8 5c 	call	0xb990	; 0xb990 <play_music>
}
    b9e0:	08 95       	ret

0000b9e2 <fire_bullet>:
}


void	fire_bullet()
{
	if (bullet_life[bullet_slot]<=0)
    b9e2:	e0 91 0e 0e 	lds	r30, 0x0E0E
    b9e6:	f0 e0       	ldi	r31, 0x00	; 0
    b9e8:	e3 54       	subi	r30, 0x43	; 67
    b9ea:	f1 4f       	sbci	r31, 0xF1	; 241
    b9ec:	80 81       	ld	r24, Z
    b9ee:	18 16       	cp	r1, r24
    b9f0:	64 f1       	brlt	.+88     	; 0xba4a <fire_bullet+0x68>



void	sound(int a,int pri)
{
	TriggerFxChannel(2,a,255,1);
    b9f2:	82 e0       	ldi	r24, 0x02	; 2
    b9f4:	64 e0       	ldi	r22, 0x04	; 4
    b9f6:	4f ef       	ldi	r20, 0xFF	; 255
    b9f8:	21 e0       	ldi	r18, 0x01	; 1
    b9fa:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
	{
  		sound(SFX_SHOOT,SD_NORMAL);
   		bullet_life[bullet_slot] = 60;
    b9fe:	90 91 0e 0e 	lds	r25, 0x0E0E
    ba02:	a9 2f       	mov	r26, r25
    ba04:	b0 e0       	ldi	r27, 0x00	; 0
    ba06:	fd 01       	movw	r30, r26
    ba08:	e3 54       	subi	r30, 0x43	; 67
    ba0a:	f1 4f       	sbci	r31, 0xF1	; 241
    ba0c:	8c e3       	ldi	r24, 0x3C	; 60
    ba0e:	80 83       	st	Z, r24
   		bullet_x[bullet_slot] = player_x;
    ba10:	30 91 fc 0f 	lds	r19, 0x0FFC
    ba14:	fd 01       	movw	r30, r26
    ba16:	ef 55       	subi	r30, 0x5F	; 95
    ba18:	f1 4f       	sbci	r31, 0xF1	; 241
    ba1a:	30 83       	st	Z, r19
		bullet_y[bullet_slot] = player_y;
    ba1c:	20 91 87 0e 	lds	r18, 0x0E87
    ba20:	fd 01       	movw	r30, r26
    ba22:	e2 50       	subi	r30, 0x02	; 2
    ba24:	f0 4f       	sbci	r31, 0xF0	; 240
    ba26:	20 83       	st	Z, r18
		bullet_dir[bullet_slot] = player_dir;
    ba28:	fd 01       	movw	r30, r26
    ba2a:	ef 5d       	subi	r30, 0xDF	; 223
    ba2c:	ff 4e       	sbci	r31, 0xEF	; 239
    ba2e:	80 91 83 0e 	lds	r24, 0x0E83
    ba32:	80 83       	st	Z, r24
		bullet_oldx[bullet_slot] = player_x;
    ba34:	fd 01       	movw	r30, r26
    ba36:	e6 5e       	subi	r30, 0xE6	; 230
    ba38:	ff 4e       	sbci	r31, 0xEF	; 239
    ba3a:	30 83       	st	Z, r19
		bullet_oldy[bullet_slot] = player_y;
    ba3c:	a4 53       	subi	r26, 0x34	; 52
    ba3e:	b1 4f       	sbci	r27, 0xF1	; 241
    ba40:	2c 93       	st	X, r18
		bullet_slot++;
		bullet_slot&=3;
    ba42:	9f 5f       	subi	r25, 0xFF	; 255
    ba44:	93 70       	andi	r25, 0x03	; 3
    ba46:	90 93 0e 0e 	sts	0x0E0E, r25
    ba4a:	08 95       	ret

0000ba4c <hit_alien>:
#endif
}


u8 	hit_alien(s16 x,s16 y)
{
    ba4c:	cf 92       	push	r12
    ba4e:	df 92       	push	r13
    ba50:	ef 92       	push	r14
    ba52:	ff 92       	push	r15
    ba54:	0f 93       	push	r16
    ba56:	1f 93       	push	r17
    ba58:	cf 93       	push	r28
    ba5a:	df 93       	push	r29
    ba5c:	7c 01       	movw	r14, r24
    ba5e:	a6 ea       	ldi	r26, 0xA6	; 166
    ba60:	be e0       	ldi	r27, 0x0E	; 14
    ba62:	9d e0       	ldi	r25, 0x0D	; 13
    ba64:	c9 2e       	mov	r12, r25
    ba66:	90 e1       	ldi	r25, 0x10	; 16
    ba68:	d9 2e       	mov	r13, r25
    ba6a:	c0 e0       	ldi	r28, 0x00	; 0
    ba6c:	d0 e0       	ldi	r29, 0x00	; 0
	s16 dx,dy;
	u8 i;

	for(i=0;i<MAX_BADDIE;i++)
	{
		if (baddie_ctrl[i]==BADDIE_MOVE || baddie_ctrl[i]==BADDIE_ALIVE)
    ba6e:	8e 01       	movw	r16, r28
    ba70:	02 56       	subi	r16, 0x62	; 98
    ba72:	11 4f       	sbci	r17, 0xF1	; 241
    ba74:	f8 01       	movw	r30, r16
    ba76:	40 81       	ld	r20, Z
    ba78:	84 2f       	mov	r24, r20
    ba7a:	82 50       	subi	r24, 0x02	; 2
    ba7c:	82 30       	cpi	r24, 0x02	; 2
    ba7e:	38 f5       	brcc	.+78     	; 0xbace <hit_alien+0x82>
		{
			dx=baddie_x[i]-x;
			dy=baddie_y[i]-y;
    ba80:	f6 01       	movw	r30, r12
    ba82:	20 81       	ld	r18, Z
    ba84:	31 81       	ldd	r19, Z+1	; 0x01
			if (abs(dx)<8 && abs(dy)<8)
    ba86:	8d 91       	ld	r24, X+
    ba88:	9c 91       	ld	r25, X
    ba8a:	11 97       	sbiw	r26, 0x01	; 1
    ba8c:	8e 19       	sub	r24, r14
    ba8e:	9f 09       	sbc	r25, r15
    ba90:	07 96       	adiw	r24, 0x07	; 7
    ba92:	0f 97       	sbiw	r24, 0x0f	; 15
    ba94:	e0 f4       	brcc	.+56     	; 0xbace <hit_alien+0x82>
    ba96:	26 1b       	sub	r18, r22
    ba98:	37 0b       	sbc	r19, r23
    ba9a:	29 5f       	subi	r18, 0xF9	; 249
    ba9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ba9e:	2f 30       	cpi	r18, 0x0F	; 15
    baa0:	31 05       	cpc	r19, r1
    baa2:	a8 f4       	brcc	.+42     	; 0xbace <hit_alien+0x82>
			{
				if (baddie_ctrl[i]!=BADDIE_POP)
    baa4:	48 30       	cpi	r20, 0x08	; 8
    baa6:	89 f0       	breq	.+34     	; 0xbaca <hit_alien+0x7e>
    baa8:	82 e0       	ldi	r24, 0x02	; 2
    baaa:	67 e0       	ldi	r22, 0x07	; 7
    baac:	4f ef       	ldi	r20, 0xFF	; 255
    baae:	21 e0       	ldi	r18, 0x01	; 1
    bab0:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
				{
					sound(SFX_SNOBEE_DIE,SD_NORMAL);
			  		baddie_ctrl[i] = BADDIE_POP;
    bab4:	88 e0       	ldi	r24, 0x08	; 8
    bab6:	f8 01       	movw	r30, r16
    bab8:	80 83       	st	Z, r24
			   		baddie_gtimer[i] = SECOND;
    baba:	fe 01       	movw	r30, r28
    babc:	e0 53       	subi	r30, 0x30	; 48
    babe:	f1 4f       	sbci	r31, 0xF1	; 241
    bac0:	8c e3       	ldi	r24, 0x3C	; 60
    bac2:	80 83       	st	Z, r24
					baddie_frame[i] = 0;
    bac4:	ce 54       	subi	r28, 0x4E	; 78
    bac6:	d1 4f       	sbci	r29, 0xF1	; 241
    bac8:	18 82       	st	Y, r1
    baca:	81 e0       	ldi	r24, 0x01	; 1
    bacc:	0a c0       	rjmp	.+20     	; 0xbae2 <hit_alien+0x96>
    bace:	21 96       	adiw	r28, 0x01	; 1
    bad0:	12 96       	adiw	r26, 0x02	; 2
    bad2:	82 e0       	ldi	r24, 0x02	; 2
    bad4:	90 e0       	ldi	r25, 0x00	; 0
    bad6:	c8 0e       	add	r12, r24
    bad8:	d9 1e       	adc	r13, r25
u8 	hit_alien(s16 x,s16 y)
{
	s16 dx,dy;
	u8 i;

	for(i=0;i<MAX_BADDIE;i++)
    bada:	c3 30       	cpi	r28, 0x03	; 3
    badc:	d1 05       	cpc	r29, r1
    bade:	39 f6       	brne	.-114    	; 0xba6e <hit_alien+0x22>
    bae0:	80 e0       	ldi	r24, 0x00	; 0
				return(1);
			}
		}
	}
	return(0);
}
    bae2:	df 91       	pop	r29
    bae4:	cf 91       	pop	r28
    bae6:	1f 91       	pop	r17
    bae8:	0f 91       	pop	r16
    baea:	ff 90       	pop	r15
    baec:	ef 90       	pop	r14
    baee:	df 90       	pop	r13
    baf0:	cf 90       	pop	r12
    baf2:	08 95       	ret

0000baf4 <move_bullets>:

void move_bullets()
{
    baf4:	3f 92       	push	r3
    baf6:	4f 92       	push	r4
    baf8:	5f 92       	push	r5
    bafa:	6f 92       	push	r6
    bafc:	7f 92       	push	r7
    bafe:	8f 92       	push	r8
    bb00:	9f 92       	push	r9
    bb02:	af 92       	push	r10
    bb04:	bf 92       	push	r11
    bb06:	cf 92       	push	r12
    bb08:	df 92       	push	r13
    bb0a:	ef 92       	push	r14
    bb0c:	ff 92       	push	r15
    bb0e:	0f 93       	push	r16
    bb10:	1f 93       	push	r17
    bb12:	cf 93       	push	r28
    bb14:	df 93       	push	r29
    bb16:	fd eb       	ldi	r31, 0xBD	; 189
    bb18:	af 2e       	mov	r10, r31
    bb1a:	fe e0       	ldi	r31, 0x0E	; 14
    bb1c:	bf 2e       	mov	r11, r31
    bb1e:	65 01       	movw	r12, r10
    bb20:	ee 24       	eor	r14, r14
    bb22:	ff 24       	eor	r15, r15



   	for (i=0;i<4;i++)
	{
		if (bullet_life[i])
    bb24:	d6 01       	movw	r26, r12
    bb26:	8c 91       	ld	r24, X
    bb28:	88 23       	and	r24, r24
    bb2a:	09 f4       	brne	.+2      	; 0xbb2e <move_bullets+0x3a>
    bb2c:	3f c0       	rjmp	.+126    	; 0xbbac <move_bullets+0xb8>
		{
		    mx = DIV16(bullet_x[i]);
			my = DIV16(bullet_y[i]);
		    ok = read_map(mx,my);
    bb2e:	f7 01       	movw	r30, r14
    bb30:	ef 55       	subi	r30, 0x5F	; 95
    bb32:	f1 4f       	sbci	r31, 0xF1	; 241
    bb34:	80 81       	ld	r24, Z
    bb36:	82 95       	swap	r24
    bb38:	8f 70       	andi	r24, 0x0F	; 15
    bb3a:	08 2f       	mov	r16, r24
    bb3c:	10 e0       	ldi	r17, 0x00	; 0
    bb3e:	f7 01       	movw	r30, r14
    bb40:	e2 50       	subi	r30, 0x02	; 2
    bb42:	f0 4f       	sbci	r31, 0xF0	; 240
    bb44:	80 81       	ld	r24, Z
    bb46:	82 95       	swap	r24
    bb48:	8f 70       	andi	r24, 0x0F	; 15
    bb4a:	c8 2f       	mov	r28, r24
    bb4c:	d0 e0       	ldi	r29, 0x00	; 0
    bb4e:	c8 01       	movw	r24, r16
    bb50:	be 01       	movw	r22, r28
    bb52:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
		    if (ok==BLOCK_FLOOR)
    bb56:	88 23       	and	r24, r24
    bb58:	81 f4       	brne	.+32     	; 0xbb7a <move_bullets+0x86>
		        TSPRITE(FLOOR_TILE_D_TSP,MUL16(mx)+xoff,yoff+MUL16(my));
    bb5a:	e4 e0       	ldi	r30, 0x04	; 4
    bb5c:	00 0f       	add	r16, r16
    bb5e:	11 1f       	adc	r17, r17
    bb60:	ea 95       	dec	r30
    bb62:	e1 f7       	brne	.-8      	; 0xbb5c <move_bullets+0x68>
    bb64:	00 5f       	subi	r16, 0xF0	; 240
    bb66:	1f 4f       	sbci	r17, 0xFF	; 255
    bb68:	74 e0       	ldi	r23, 0x04	; 4
    bb6a:	cc 0f       	add	r28, r28
    bb6c:	dd 1f       	adc	r29, r29
    bb6e:	7a 95       	dec	r23
    bb70:	e1 f7       	brne	.-8      	; 0xbb6a <move_bullets+0x76>
    bb72:	60 96       	adiw	r28, 0x10	; 16
    bb74:	86 e2       	ldi	r24, 0x26	; 38
    bb76:	90 e0       	ldi	r25, 0x00	; 0
    bb78:	11 c0       	rjmp	.+34     	; 0xbb9c <move_bullets+0xa8>
	        if (ok==BLOCK_HOLE)
    bb7a:	89 30       	cpi	r24, 0x09	; 9
    bb7c:	99 f4       	brne	.+38     	; 0xbba4 <move_bullets+0xb0>
		        TSPRITE(FLOOR_TILE_F_TSP,MUL16(mx)+xoff,yoff+MUL16(my));
    bb7e:	64 e0       	ldi	r22, 0x04	; 4
    bb80:	00 0f       	add	r16, r16
    bb82:	11 1f       	adc	r17, r17
    bb84:	6a 95       	dec	r22
    bb86:	e1 f7       	brne	.-8      	; 0xbb80 <move_bullets+0x8c>
    bb88:	00 5f       	subi	r16, 0xF0	; 240
    bb8a:	1f 4f       	sbci	r17, 0xFF	; 255
    bb8c:	54 e0       	ldi	r21, 0x04	; 4
    bb8e:	cc 0f       	add	r28, r28
    bb90:	dd 1f       	adc	r29, r29
    bb92:	5a 95       	dec	r21
    bb94:	e1 f7       	brne	.-8      	; 0xbb8e <move_bullets+0x9a>
    bb96:	60 96       	adiw	r28, 0x10	; 16
    bb98:	89 e2       	ldi	r24, 0x29	; 41
    bb9a:	90 e0       	ldi	r25, 0x00	; 0
    bb9c:	b8 01       	movw	r22, r16
    bb9e:	ae 01       	movw	r20, r28
    bba0:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
		   // SetTileX( DIV8(xoff+bullet_x[i]), DIV8(yoff+bullet_y[i]), FLOOR_TILE_D_TSP  );
		  	bullet_life[i]--;
    bba4:	f6 01       	movw	r30, r12
    bba6:	80 81       	ld	r24, Z
    bba8:	81 50       	subi	r24, 0x01	; 1
    bbaa:	80 83       	st	Z, r24
    bbac:	08 94       	sec
    bbae:	e1 1c       	adc	r14, r1
    bbb0:	f1 1c       	adc	r15, r1
    bbb2:	08 94       	sec
    bbb4:	c1 1c       	adc	r12, r1
    bbb6:	d1 1c       	adc	r13, r1
	u8 index;
	u8 mx,my;



   	for (i=0;i<4;i++)
    bbb8:	f4 e0       	ldi	r31, 0x04	; 4
    bbba:	ef 16       	cp	r14, r31
    bbbc:	f1 04       	cpc	r15, r1
    bbbe:	09 f0       	breq	.+2      	; 0xbbc2 <move_bullets+0xce>
    bbc0:	b1 cf       	rjmp	.-158    	; 0xbb24 <move_bullets+0x30>
    bbc2:	41 e2       	ldi	r20, 0x21	; 33
    bbc4:	64 2e       	mov	r6, r20
    bbc6:	40 e1       	ldi	r20, 0x10	; 16
    bbc8:	74 2e       	mov	r7, r20
    bbca:	3e ef       	ldi	r19, 0xFE	; 254
    bbcc:	83 2e       	mov	r8, r19
    bbce:	3f e0       	ldi	r19, 0x0F	; 15
    bbd0:	93 2e       	mov	r9, r19
    bbd2:	21 ea       	ldi	r18, 0xA1	; 161
    bbd4:	c2 2e       	mov	r12, r18
    bbd6:	2e e0       	ldi	r18, 0x0E	; 14
    bbd8:	d2 2e       	mov	r13, r18
				{
			 	    sound( SFX_CRUSH, SD_NORMAL );
	  		   	 	set_map(mx,my,BLOCK_INVISIBLE);
	  		   		start_block(BLOCK_ICE, mx, my);
	  		  		block_ctrl = BLOCK_CRUSH;
					block_sprite = BLOCK_DIE_00_TSP;
    bbda:	96 e0       	ldi	r25, 0x06	; 6
    bbdc:	49 2e       	mov	r4, r25
		  			block_trigger = 10;
    bbde:	8a e0       	ldi	r24, 0x0A	; 10
    bbe0:	38 2e       	mov	r3, r24

void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
	if (y<0|| y>=MAPH) return;
	rmap(x,y) = a;
    bbe2:	03 e0       	ldi	r16, 0x03	; 3
    bbe4:	50 2e       	mov	r5, r16
		}
	}

	for (i=0;i<4;i++)
	{
		if (bullet_life[i])
    bbe6:	d5 01       	movw	r26, r10
    bbe8:	8c 91       	ld	r24, X
    bbea:	88 23       	and	r24, r24
    bbec:	09 f4       	brne	.+2      	; 0xbbf0 <move_bullets+0xfc>
    bbee:	e3 c0       	rjmp	.+454    	; 0xbdb6 <move_bullets+0x2c2>
		{
			k = bullet_dir[i];
    bbf0:	f3 01       	movw	r30, r6
    bbf2:	f0 80       	ld	r15, Z
			bullet_x[i]+=spd[k].x<<2;
    bbf4:	ef 2d       	mov	r30, r15
    bbf6:	f0 e0       	ldi	r31, 0x00	; 0
    bbf8:	ee 0f       	add	r30, r30
    bbfa:	ff 1f       	adc	r31, r31
    bbfc:	ef 5f       	subi	r30, 0xFF	; 255
    bbfe:	fe 4f       	sbci	r31, 0xFE	; 254
    bc00:	20 81       	ld	r18, Z
    bc02:	22 0f       	add	r18, r18
    bc04:	22 0f       	add	r18, r18
    bc06:	d6 01       	movw	r26, r12
    bc08:	8c 91       	ld	r24, X
    bc0a:	28 0f       	add	r18, r24
    bc0c:	2c 93       	st	X, r18
			bullet_y[i]+=spd[k].y<<2;
    bc0e:	81 81       	ldd	r24, Z+1	; 0x01
    bc10:	88 0f       	add	r24, r24
    bc12:	88 0f       	add	r24, r24
    bc14:	f4 01       	movw	r30, r8
    bc16:	90 81       	ld	r25, Z
    bc18:	89 0f       	add	r24, r25
    bc1a:	80 83       	st	Z, r24
			x = bullet_x[i];
    bc1c:	c2 2f       	mov	r28, r18
    bc1e:	d0 e0       	ldi	r29, 0x00	; 0
			y = bullet_y[i];
    bc20:	08 2f       	mov	r16, r24
    bc22:	10 e0       	ldi	r17, 0x00	; 0
			ok = hit_alien(x,y);
    bc24:	ce 01       	movw	r24, r28
    bc26:	b8 01       	movw	r22, r16
    bc28:	0e 94 26 5d 	call	0xba4c	; 0xba4c <hit_alien>
			if (ok)
    bc2c:	88 23       	and	r24, r24
    bc2e:	09 f0       	breq	.+2      	; 0xbc32 <move_bullets+0x13e>
    bc30:	84 c0       	rjmp	.+264    	; 0xbd3a <move_bullets+0x246>
		  		bullet_life[i] = 0;
				continue;
			}
			mx = DIV16(x);
			my = DIV16(y);
			ok = read_map(mx,my);
    bc32:	b4 e0       	ldi	r27, 0x04	; 4
    bc34:	d6 95       	lsr	r29
    bc36:	c7 95       	ror	r28
    bc38:	ba 95       	dec	r27
    bc3a:	e1 f7       	brne	.-8      	; 0xbc34 <move_bullets+0x140>
    bc3c:	a4 e0       	ldi	r26, 0x04	; 4
    bc3e:	16 95       	lsr	r17
    bc40:	07 95       	ror	r16
    bc42:	aa 95       	dec	r26
    bc44:	e1 f7       	brne	.-8      	; 0xbc3e <move_bullets+0x14a>
    bc46:	ce 01       	movw	r24, r28
    bc48:	b8 01       	movw	r22, r16
    bc4a:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
			if ( ok == BLOCK_SUPAFIXED || ok==BLOCK_INVISIBLE || ok==BLOCK_WALL)
    bc4e:	8a 30       	cpi	r24, 0x0A	; 10
    bc50:	09 f4       	brne	.+2      	; 0xbc54 <move_bullets+0x160>
    bc52:	7e c0       	rjmp	.+252    	; 0xbd50 <move_bullets+0x25c>
    bc54:	83 30       	cpi	r24, 0x03	; 3
    bc56:	09 f4       	brne	.+2      	; 0xbc5a <move_bullets+0x166>
    bc58:	7b c0       	rjmp	.+246    	; 0xbd50 <move_bullets+0x25c>
    bc5a:	88 30       	cpi	r24, 0x08	; 8
    bc5c:	09 f4       	brne	.+2      	; 0xbc60 <move_bullets+0x16c>
    bc5e:	78 c0       	rjmp	.+240    	; 0xbd50 <move_bullets+0x25c>
			{
				bullet_life[i]=0;
			}
			else if ( ok == BLOCK_SUPA )
    bc60:	84 30       	cpi	r24, 0x04	; 4
    bc62:	99 f4       	brne	.+38     	; 0xbc8a <move_bullets+0x196>
			{
				index = read_map_index(mx,my);
    bc64:	ce 01       	movw	r24, r28
    bc66:	b8 01       	movw	r22, r16
    bc68:	0e 94 96 52 	call	0xa52c	; 0xa52c <read_map_index>
				if (supa_trigger[index]==0)
    bc6c:	e8 2f       	mov	r30, r24
    bc6e:	f0 e0       	ldi	r31, 0x00	; 0
    bc70:	df 01       	movw	r26, r30
    bc72:	ad 5e       	subi	r26, 0xED	; 237
    bc74:	bf 4e       	sbci	r27, 0xEF	; 239
    bc76:	8c 91       	ld	r24, X
    bc78:	88 23       	and	r24, r24
    bc7a:	09 f0       	breq	.+2      	; 0xbc7e <move_bullets+0x18a>
    bc7c:	5e c0       	rjmp	.+188    	; 0xbd3a <move_bullets+0x246>
				{
			  		supa_move[index]=k;
    bc7e:	e8 53       	subi	r30, 0x38	; 56
    bc80:	f1 4f       	sbci	r31, 0xF1	; 241
    bc82:	f0 82       	st	Z, r15
					supa_trigger[index]=2;
    bc84:	82 e0       	ldi	r24, 0x02	; 2
    bc86:	8c 93       	st	X, r24
    bc88:	58 c0       	rjmp	.+176    	; 0xbd3a <move_bullets+0x246>
				}
		  		bullet_life[i] = 0;
			}
		    else if ( ok == BLOCK_OXYGEN )
    bc8a:	87 30       	cpi	r24, 0x07	; 7
    bc8c:	19 f5       	brne	.+70     	; 0xbcd4 <move_bullets+0x1e0>
			{
			    TSPRITE(FLOOR_TILE_D_TSP,MUL16(mx)+xoff,yoff+MUL16(my));
    bc8e:	78 01       	movw	r14, r16
    bc90:	f4 e0       	ldi	r31, 0x04	; 4
    bc92:	ee 0c       	add	r14, r14
    bc94:	ff 1c       	adc	r15, r15
    bc96:	fa 95       	dec	r31
    bc98:	e1 f7       	brne	.-8      	; 0xbc92 <move_bullets+0x19e>
    bc9a:	be 01       	movw	r22, r28
    bc9c:	e4 e0       	ldi	r30, 0x04	; 4
    bc9e:	66 0f       	add	r22, r22
    bca0:	77 1f       	adc	r23, r23
    bca2:	ea 95       	dec	r30
    bca4:	e1 f7       	brne	.-8      	; 0xbc9e <move_bullets+0x1aa>
    bca6:	60 5f       	subi	r22, 0xF0	; 240
    bca8:	7f 4f       	sbci	r23, 0xFF	; 255
    bcaa:	a7 01       	movw	r20, r14
    bcac:	40 5f       	subi	r20, 0xF0	; 240
    bcae:	5f 4f       	sbci	r21, 0xFF	; 255
    bcb0:	86 e2       	ldi	r24, 0x26	; 38
    bcb2:	90 e0       	ldi	r25, 0x00	; 0
    bcb4:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    bcb8:	cd 30       	cpi	r28, 0x0D	; 13
    bcba:	d1 05       	cpc	r29, r1
    bcbc:	08 f0       	brcs	.+2      	; 0xbcc0 <move_bullets+0x1cc>
    bcbe:	48 c0       	rjmp	.+144    	; 0xbd50 <move_bullets+0x25c>
	if (y<0|| y>=MAPH) return;
    bcc0:	0b 30       	cpi	r16, 0x0B	; 11
    bcc2:	11 05       	cpc	r17, r1
    bcc4:	08 f0       	brcs	.+2      	; 0xbcc8 <move_bullets+0x1d4>
    bcc6:	44 c0       	rjmp	.+136    	; 0xbd50 <move_bullets+0x25c>
	rmap(x,y) = a;
    bcc8:	c5 50       	subi	r28, 0x05	; 5
    bcca:	d1 4f       	sbci	r29, 0xF1	; 241
    bccc:	ce 0d       	add	r28, r14
    bcce:	df 1d       	adc	r29, r15
    bcd0:	18 82       	st	Y, r1
    bcd2:	3e c0       	rjmp	.+124    	; 0xbd50 <move_bullets+0x25c>
			{
			    TSPRITE(FLOOR_TILE_D_TSP,MUL16(mx)+xoff,yoff+MUL16(my));
	    		set_map(mx,my,0);
		    	bullet_life[i] = 0;
			}
			else if ( ok == BLOCK_ICE )
    bcd4:	82 30       	cpi	r24, 0x02	; 2
    bcd6:	a1 f5       	brne	.+104    	; 0xbd40 <move_bullets+0x24c>
			{
				if (block_ctrl==0)
    bcd8:	80 91 ae 0e 	lds	r24, 0x0EAE
    bcdc:	88 23       	and	r24, r24
    bcde:	69 f5       	brne	.+90     	; 0xbd3a <move_bullets+0x246>
    bce0:	82 e0       	ldi	r24, 0x02	; 2
    bce2:	69 e0       	ldi	r22, 0x09	; 9
    bce4:	4f ef       	ldi	r20, 0xFF	; 255
    bce6:	21 e0       	ldi	r18, 0x01	; 1
    bce8:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    bcec:	cd 30       	cpi	r28, 0x0D	; 13
    bcee:	d1 05       	cpc	r29, r1
    bcf0:	78 f4       	brcc	.+30     	; 0xbd10 <move_bullets+0x21c>
	if (y<0|| y>=MAPH) return;
    bcf2:	0b 30       	cpi	r16, 0x0B	; 11
    bcf4:	11 05       	cpc	r17, r1
    bcf6:	60 f4       	brcc	.+24     	; 0xbd10 <move_bullets+0x21c>
	rmap(x,y) = a;
    bcf8:	c8 01       	movw	r24, r16
    bcfa:	64 e0       	ldi	r22, 0x04	; 4
    bcfc:	88 0f       	add	r24, r24
    bcfe:	99 1f       	adc	r25, r25
    bd00:	6a 95       	dec	r22
    bd02:	e1 f7       	brne	.-8      	; 0xbcfc <move_bullets+0x208>
    bd04:	fe 01       	movw	r30, r28
    bd06:	e5 50       	subi	r30, 0x05	; 5
    bd08:	f1 4f       	sbci	r31, 0xF1	; 241
    bd0a:	e8 0f       	add	r30, r24
    bd0c:	f9 1f       	adc	r31, r25
    bd0e:	50 82       	st	Z, r5
			{
				if (block_ctrl==0)
				{
			 	    sound( SFX_CRUSH, SD_NORMAL );
	  		   	 	set_map(mx,my,BLOCK_INVISIBLE);
	  		   		start_block(BLOCK_ICE, mx, my);
    bd10:	82 e0       	ldi	r24, 0x02	; 2
    bd12:	90 e0       	ldi	r25, 0x00	; 0
    bd14:	be 01       	movw	r22, r28
    bd16:	a8 01       	movw	r20, r16
    bd18:	0e 94 95 54 	call	0xa92a	; 0xa92a <start_block>
	  		  		block_ctrl = BLOCK_CRUSH;
    bd1c:	82 e0       	ldi	r24, 0x02	; 2
    bd1e:	80 93 ae 0e 	sts	0x0EAE, r24
					block_sprite = BLOCK_DIE_00_TSP;
    bd22:	40 92 b1 0e 	sts	0x0EB1, r4
		  			block_trigger = 10;
    bd26:	30 92 82 0e 	sts	0x0E82, r3
					block_frame = 0;
    bd2a:	10 92 e6 0e 	sts	0x0EE6, r1
		   			block_crush();
    bd2e:	0e 94 a5 5a 	call	0xb54a	; 0xb54a <block_crush>
					add_score(SCORE_BREAK_BLOCK);
    bd32:	83 e0       	ldi	r24, 0x03	; 3
    bd34:	90 e0       	ldi	r25, 0x00	; 0
    bd36:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <add_score>
				}
		  		bullet_life[i] = 0;
    bd3a:	d5 01       	movw	r26, r10
    bd3c:	1c 92       	st	X, r1
    bd3e:	3b c0       	rjmp	.+118    	; 0xbdb6 <move_bullets+0x2c2>
			}
			else if (bullet_x[i]<0 || bullet_x[i]>=XREZ-4*8 || bullet_y[i]<0 || bullet_y[i]>=YREZ-4*8)
    bd40:	f6 01       	movw	r30, r12
    bd42:	40 81       	ld	r20, Z
    bd44:	40 3d       	cpi	r20, 0xD0	; 208
    bd46:	20 f4       	brcc	.+8      	; 0xbd50 <move_bullets+0x25c>
    bd48:	d4 01       	movw	r26, r8
    bd4a:	9c 91       	ld	r25, X
    bd4c:	90 3b       	cpi	r25, 0xB0	; 176
    bd4e:	18 f0       	brcs	.+6      	; 0xbd56 <move_bullets+0x262>
			{
		  		bullet_life[i] = 0;
    bd50:	f5 01       	movw	r30, r10
    bd52:	10 82       	st	Z, r1
    bd54:	30 c0       	rjmp	.+96     	; 0xbdb6 <move_bullets+0x2c2>
			}
			else
			{
				if (bullet_dir[i]&1)
    bd56:	d3 01       	movw	r26, r6
    bd58:	8c 91       	ld	r24, X
    bd5a:	24 2f       	mov	r18, r20
    bd5c:	30 e0       	ldi	r19, 0x00	; 0
    bd5e:	69 2f       	mov	r22, r25
    bd60:	70 e0       	ldi	r23, 0x00	; 0
    bd62:	80 ff       	sbrs	r24, 0
    bd64:	05 c0       	rjmp	.+10     	; 0xbd70 <move_bullets+0x27c>
				{
					frame = bullet_x[i]>>1;
    bd66:	46 95       	lsr	r20
}


u8 TSPRITE_TILE(u8 index)
{
   	const char *data=(const char *)pgm_read_word(&tsprite_table[index]);
    bd68:	47 70       	andi	r20, 0x07	; 7
    bd6a:	45 5e       	subi	r20, 0xE5	; 229
    bd6c:	84 2f       	mov	r24, r20
    bd6e:	04 c0       	rjmp	.+8      	; 0xbd78 <move_bullets+0x284>
					frame = TSPRITE_TILE( BULLET_RIGHT_00_TSP + frame );
		    		SetTile( DIV8(xoff+bullet_x[i]), DIV8(yoff+bullet_y[i]), frame );
				}
				else
				{
			    	frame = bullet_y[i]>>1;
    bd70:	96 95       	lsr	r25
    bd72:	97 70       	andi	r25, 0x07	; 7
    bd74:	9d 5e       	subi	r25, 0xED	; 237
    bd76:	89 2f       	mov	r24, r25
    bd78:	90 e0       	ldi	r25, 0x00	; 0
    bd7a:	88 0f       	add	r24, r24
    bd7c:	99 1f       	adc	r25, r25
    bd7e:	8a 50       	subi	r24, 0x0A	; 10
    bd80:	96 4c       	sbci	r25, 0xC6	; 198
    bd82:	fc 01       	movw	r30, r24
    bd84:	45 91       	lpm	r20, Z+
    bd86:	54 91       	lpm	r21, Z+
   	u8 a = pgm_read_byte( &data[2] );
    bd88:	4e 5f       	subi	r20, 0xFE	; 254
    bd8a:	5f 4f       	sbci	r21, 0xFF	; 255
    bd8c:	fa 01       	movw	r30, r20
    bd8e:	94 91       	lpm	r25, Z+
					frame &= 7;
					frame = TSPRITE_TILE( BULLET_DOWN_00_TSP + frame );
			    	SetTile( DIV8(xoff+bullet_x[i]), DIV8(yoff+bullet_y[i]), frame );
    bd90:	20 5f       	subi	r18, 0xF0	; 240
    bd92:	3f 4f       	sbci	r19, 0xFF	; 255
    bd94:	43 e0       	ldi	r20, 0x03	; 3
    bd96:	35 95       	asr	r19
    bd98:	27 95       	ror	r18
    bd9a:	4a 95       	dec	r20
    bd9c:	e1 f7       	brne	.-8      	; 0xbd96 <move_bullets+0x2a2>
    bd9e:	60 5f       	subi	r22, 0xF0	; 240
    bda0:	7f 4f       	sbci	r23, 0xFF	; 255
    bda2:	33 e0       	ldi	r19, 0x03	; 3
    bda4:	75 95       	asr	r23
    bda6:	67 95       	ror	r22
    bda8:	3a 95       	dec	r19
    bdaa:	e1 f7       	brne	.-8      	; 0xbda4 <move_bullets+0x2b0>
    bdac:	82 2f       	mov	r24, r18
    bdae:	49 2f       	mov	r20, r25
    bdb0:	50 e0       	ldi	r21, 0x00	; 0
    bdb2:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
    bdb6:	08 94       	sec
    bdb8:	a1 1c       	adc	r10, r1
    bdba:	b1 1c       	adc	r11, r1
    bdbc:	08 94       	sec
    bdbe:	61 1c       	adc	r6, r1
    bdc0:	71 1c       	adc	r7, r1
    bdc2:	08 94       	sec
    bdc4:	81 1c       	adc	r8, r1
    bdc6:	91 1c       	adc	r9, r1
    bdc8:	08 94       	sec
    bdca:	c1 1c       	adc	r12, r1
    bdcc:	d1 1c       	adc	r13, r1
		   // SetTileX( DIV8(xoff+bullet_x[i]), DIV8(yoff+bullet_y[i]), FLOOR_TILE_D_TSP  );
		  	bullet_life[i]--;
		}
	}

	for (i=0;i<4;i++)
    bdce:	f1 ec       	ldi	r31, 0xC1	; 193
    bdd0:	af 16       	cp	r10, r31
    bdd2:	fe e0       	ldi	r31, 0x0E	; 14
    bdd4:	bf 06       	cpc	r11, r31
    bdd6:	09 f0       	breq	.+2      	; 0xbdda <move_bullets+0x2e6>
    bdd8:	06 cf       	rjmp	.-500    	; 0xbbe6 <move_bullets+0xf2>
			    	SetTile( DIV8(xoff+bullet_x[i]), DIV8(yoff+bullet_y[i]), frame );
				}
			}
		}
	}
}
    bdda:	df 91       	pop	r29
    bddc:	cf 91       	pop	r28
    bdde:	1f 91       	pop	r17
    bde0:	0f 91       	pop	r16
    bde2:	ff 90       	pop	r15
    bde4:	ef 90       	pop	r14
    bde6:	df 90       	pop	r13
    bde8:	cf 90       	pop	r12
    bdea:	bf 90       	pop	r11
    bdec:	af 90       	pop	r10
    bdee:	9f 90       	pop	r9
    bdf0:	8f 90       	pop	r8
    bdf2:	7f 90       	pop	r7
    bdf4:	6f 90       	pop	r6
    bdf6:	5f 90       	pop	r5
    bdf8:	4f 90       	pop	r4
    bdfa:	3f 90       	pop	r3
    bdfc:	08 95       	ret

0000bdfe <draw_main>:
}



void draw_main()
{
    bdfe:	1f 93       	push	r17
#ifdef TWOPLAYER
		if (xpad(JOY_UP))
    be00:	80 91 0a 0e 	lds	r24, 0x0E0A
    be04:	84 ff       	sbrs	r24, 4
    be06:	16 c0       	rjmp	.+44     	; 0xbe34 <draw_main+0x36>



void	sound(int a,int pri)
{
	TriggerFxChannel(2,a,255,1);
    be08:	82 e0       	ldi	r24, 0x02	; 2
    be0a:	64 e0       	ldi	r22, 0x04	; 4
    be0c:	4f ef       	ldi	r20, 0xFF	; 255
    be0e:	21 e0       	ldi	r18, 0x01	; 1
    be10:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
		{
			sound(SFX_SHOOT,SD_NORMAL);
			number_of_players=1;
    be14:	81 e0       	ldi	r24, 0x01	; 1
    be16:	80 93 0c 10 	sts	0x100C, r24
		  	g_frame=0;
    be1a:	10 92 19 10 	sts	0x1019, r1
    be1e:	10 92 18 10 	sts	0x1018, r1
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    be22:	88 e7       	ldi	r24, 0x78	; 120
    be24:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    be28:	80 93 fa 0e 	sts	0x0EFA, r24
		{
			sound(SFX_SHOOT,SD_NORMAL);
			number_of_players=1;
		  	g_frame=0;
      		ugo(XREZ/2,15*8);
		 	ucprintx_blank(txt_1player);
    be2c:	8c e3       	ldi	r24, 0x3C	; 60
    be2e:	92 e8       	ldi	r25, 0x82	; 130
    be30:	0e 94 55 57 	call	0xaeaa	; 0xaeaa <ucprintx_blank>
		}
		if (xpad(JOY_DOWN))
    be34:	80 91 0a 0e 	lds	r24, 0x0E0A
    be38:	85 ff       	sbrs	r24, 5
    be3a:	17 c0       	rjmp	.+46     	; 0xbe6a <draw_main+0x6c>
    be3c:	82 e0       	ldi	r24, 0x02	; 2
    be3e:	64 e0       	ldi	r22, 0x04	; 4
    be40:	4f ef       	ldi	r20, 0xFF	; 255
    be42:	21 e0       	ldi	r18, 0x01	; 1
    be44:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
		{
			sound(SFX_SHOOT,SD_NORMAL);
			number_of_players=2;
    be48:	82 e0       	ldi	r24, 0x02	; 2
    be4a:	80 93 0c 10 	sts	0x100C, r24
			g_frame=0;
    be4e:	10 92 19 10 	sts	0x1019, r1
    be52:	10 92 18 10 	sts	0x1018, r1
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    be56:	88 e7       	ldi	r24, 0x78	; 120
    be58:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    be5c:	88 e8       	ldi	r24, 0x88	; 136
    be5e:	80 93 fa 0e 	sts	0x0EFA, r24
		{
			sound(SFX_SHOOT,SD_NORMAL);
			number_of_players=2;
			g_frame=0;
			ugo(XREZ/2,17*8);
		 	ucprintx_blank(txt_2player);
    be62:	86 e4       	ldi	r24, 0x46	; 70
    be64:	92 e8       	ldi	r25, 0x82	; 130
    be66:	0e 94 55 57 	call	0xaeaa	; 0xaeaa <ucprintx_blank>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    be6a:	88 e7       	ldi	r24, 0x78	; 120
    be6c:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    be70:	80 93 fa 0e 	sts	0x0EFA, r24
			ugo(XREZ/2,17*8);
		 	ucprintx_blank(txt_2player);
		}

	    ugo(XREZ/2,15*8);
		if (number_of_players==1)
    be74:	80 91 0c 10 	lds	r24, 0x100C
    be78:	81 30       	cpi	r24, 0x01	; 1
    be7a:	29 f4       	brne	.+10     	; 0xbe86 <draw_main+0x88>
	   	ucprintx_dot(txt_1player);
    be7c:	8c e3       	ldi	r24, 0x3C	; 60
    be7e:	92 e8       	ldi	r25, 0x82	; 130
    be80:	0e 94 1b 57 	call	0xae36	; 0xae36 <ucprintx_dot>
    be84:	04 c0       	rjmp	.+8      	; 0xbe8e <draw_main+0x90>
		else
	    ucprintx(txt_1player);
    be86:	8c e3       	ldi	r24, 0x3C	; 60
    be88:	92 e8       	ldi	r25, 0x82	; 130
    be8a:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    be8e:	88 e7       	ldi	r24, 0x78	; 120
    be90:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    be94:	88 e8       	ldi	r24, 0x88	; 136
    be96:	80 93 fa 0e 	sts	0x0EFA, r24
		else
	    ucprintx(txt_1player);


		ugo(XREZ/2,17*8);
		if (number_of_players==2)
    be9a:	80 91 0c 10 	lds	r24, 0x100C
    be9e:	82 30       	cpi	r24, 0x02	; 2
    bea0:	29 f4       	brne	.+10     	; 0xbeac <draw_main+0xae>
		ucprintx_dot(txt_2player);
    bea2:	86 e4       	ldi	r24, 0x46	; 70
    bea4:	92 e8       	ldi	r25, 0x82	; 130
    bea6:	0e 94 1b 57 	call	0xae36	; 0xae36 <ucprintx_dot>
    beaa:	04 c0       	rjmp	.+8      	; 0xbeb4 <draw_main+0xb6>
		else
	    ucprintx(txt_2player);
    beac:	86 e4       	ldi	r24, 0x46	; 70
    beae:	92 e8       	ldi	r25, 0x82	; 130
    beb0:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    beb4:	18 e4       	ldi	r17, 0x48	; 72
    beb6:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    beba:	88 e7       	ldi	r24, 0x78	; 120
    bebc:	80 93 fa 0e 	sts	0x0EFA, r24
		else
	    ucprintx(txt_2player);

		// clear marker
		ugo((XREZ/2)-6*8,15*8);
	   	uprintc(' ');
    bec0:	80 e2       	ldi	r24, 0x20	; 32
    bec2:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    bec6:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    beca:	88 e8       	ldi	r24, 0x88	; 136
    becc:	80 93 fa 0e 	sts	0x0EFA, r24

		// clear marker
		ugo((XREZ/2)-6*8,15*8);
	   	uprintc(' ');
	    ugo((XREZ/2)-6*8,17*8);
	   	uprintc(' ');
    bed0:	80 e2       	ldi	r24, 0x20	; 32
    bed2:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    bed6:	88 e7       	ldi	r24, 0x78	; 120
    bed8:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    bedc:	88 ec       	ldi	r24, 0xC8	; 200
    bede:	80 93 fa 0e 	sts	0x0EFA, r24
			else
		    	ucprintx(txt_blank10);
#endif

			ugo(XREZ/2,YREZ-8);
			ucprintx(txt_pjones);
    bee2:	84 ec       	ldi	r24, 0xC4	; 196
    bee4:	91 e8       	ldi	r25, 0x81	; 129
    bee6:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}
    beea:	1f 91       	pop	r17
    beec:	08 95       	ret

0000beee <check_stun>:
		baddie_ctrl[idx]=BADDIE_STUN;
		baddie_stun(idx);
}

int	check_stun(s16 idx)
{
    beee:	9c 01       	movw	r18, r24
	s16 x,y;
	u8 stun=0;


	x=baddie_x[idx];
    bef0:	fc 01       	movw	r30, r24
    bef2:	ee 0f       	add	r30, r30
    bef4:	ff 1f       	adc	r31, r31
    bef6:	df 01       	movw	r26, r30
    bef8:	aa 55       	subi	r26, 0x5A	; 90
    befa:	b1 4f       	sbci	r27, 0xF1	; 241
    befc:	0d 90       	ld	r0, X+
    befe:	bc 91       	ld	r27, X
    bf00:	a0 2d       	mov	r26, r0
	y=baddie_y[idx];
    bf02:	e3 5f       	subi	r30, 0xF3	; 243
    bf04:	ff 4e       	sbci	r31, 0xEF	; 239
    bf06:	01 90       	ld	r0, Z+
    bf08:	f0 81       	ld	r31, Z
    bf0a:	e0 2d       	mov	r30, r0

    if ((g_hitwall&WALL_TOP) && y==0) stun=1;
    bf0c:	80 91 e9 0e 	lds	r24, 0x0EE9
    bf10:	90 e0       	ldi	r25, 0x00	; 0
    bf12:	80 ff       	sbrs	r24, 0
    bf14:	04 c0       	rjmp	.+8      	; 0xbf1e <check_stun+0x30>
    bf16:	90 e0       	ldi	r25, 0x00	; 0
    bf18:	30 97       	sbiw	r30, 0x00	; 0
    bf1a:	09 f4       	brne	.+2      	; 0xbf1e <check_stun+0x30>
    bf1c:	91 e0       	ldi	r25, 0x01	; 1
	if ((g_hitwall&WALL_BOT) && y==(MAPH-1)*YGAP) stun=1;
    bf1e:	82 ff       	sbrs	r24, 2
    bf20:	04 c0       	rjmp	.+8      	; 0xbf2a <check_stun+0x3c>
    bf22:	e0 3a       	cpi	r30, 0xA0	; 160
    bf24:	f1 05       	cpc	r31, r1
    bf26:	09 f4       	brne	.+2      	; 0xbf2a <check_stun+0x3c>
    bf28:	91 e0       	ldi	r25, 0x01	; 1
	if ((g_hitwall&WALL_LEFT) && x==0) stun=1;
    bf2a:	83 ff       	sbrs	r24, 3
    bf2c:	03 c0       	rjmp	.+6      	; 0xbf34 <check_stun+0x46>
    bf2e:	10 97       	sbiw	r26, 0x00	; 0
    bf30:	09 f4       	brne	.+2      	; 0xbf34 <check_stun+0x46>
    bf32:	91 e0       	ldi	r25, 0x01	; 1
	if ((g_hitwall&WALL_RIGHT) && x==(MAPW-1)*XGAP) stun=1;
    bf34:	81 ff       	sbrs	r24, 1
    bf36:	03 c0       	rjmp	.+6      	; 0xbf3e <check_stun+0x50>
    bf38:	a0 3c       	cpi	r26, 0xC0	; 192
    bf3a:	b1 05       	cpc	r27, r1
    bf3c:	29 f0       	breq	.+10     	; 0xbf48 <check_stun+0x5a>

  //	if (pad(JOY_A)==0) stun=0;

	if (stun)
    bf3e:	99 23       	and	r25, r25
    bf40:	19 f4       	brne	.+6      	; 0xbf48 <check_stun+0x5a>
    bf42:	20 e0       	ldi	r18, 0x00	; 0
    bf44:	30 e0       	ldi	r19, 0x00	; 0
    bf46:	23 c0       	rjmp	.+70     	; 0xbf8e <check_stun+0xa0>
	{
		baddie_trigger[idx] = TIME_BADDIE_STUN;
    bf48:	f9 01       	movw	r30, r18
    bf4a:	ee 0f       	add	r30, r30
    bf4c:	ff 1f       	adc	r31, r31
    bf4e:	e0 51       	subi	r30, 0x10	; 16
    bf50:	f1 4f       	sbci	r31, 0xF1	; 241
    bf52:	84 eb       	ldi	r24, 0xB4	; 180
    bf54:	90 e0       	ldi	r25, 0x00	; 0
    bf56:	91 83       	std	Z+1, r25	; 0x01
    bf58:	80 83       	st	Z, r24
		baddie_sprite[idx] = BADDIE_STUN_A_SP;
    bf5a:	f9 01       	movw	r30, r18
    bf5c:	ed 52       	subi	r30, 0x2D	; 45
    bf5e:	f1 4f       	sbci	r31, 0xF1	; 241
    bf60:	88 e0       	ldi	r24, 0x08	; 8
    bf62:	80 83       	st	Z, r24
		baddie_callb[idx] = baddie_ctrl[idx];
    bf64:	d9 01       	movw	r26, r18
    bf66:	ac 57       	subi	r26, 0x7C	; 124
    bf68:	b1 4f       	sbci	r27, 0xF1	; 241
    bf6a:	f9 01       	movw	r30, r18
    bf6c:	e2 56       	subi	r30, 0x62	; 98
    bf6e:	f1 4f       	sbci	r31, 0xF1	; 241
    bf70:	80 81       	ld	r24, Z
    bf72:	8c 93       	st	X, r24
		baddie_ctrl[idx] = BADDIE_STUN;
    bf74:	84 e0       	ldi	r24, 0x04	; 4
    bf76:	80 83       	st	Z, r24
		baddie_stun(idx);
    bf78:	c9 01       	movw	r24, r18
    bf7a:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <baddie_stun>
    bf7e:	82 e0       	ldi	r24, 0x02	; 2
    bf80:	6c e0       	ldi	r22, 0x0C	; 12
    bf82:	4f ef       	ldi	r20, 0xFF	; 255
    bf84:	21 e0       	ldi	r18, 0x01	; 1
    bf86:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
    bf8a:	21 e0       	ldi	r18, 0x01	; 1
    bf8c:	30 e0       	ldi	r19, 0x00	; 0
		sound(SFX_STUN,SD_NORMAL);
		return(1);
	}
	return(0);
}
    bf8e:	c9 01       	movw	r24, r18
    bf90:	08 95       	ret

0000bf92 <baddie_move>:

void	baddie_move(s16 idx)
{
    bf92:	cf 93       	push	r28
    bf94:	df 93       	push	r29
    bf96:	ec 01       	movw	r28, r24
	s16 x,y;

	x=baddie_x[idx];
	y=baddie_y[idx];

	if (check_stun(idx)) return;
    bf98:	0e 94 77 5f 	call	0xbeee	; 0xbeee <check_stun>
    bf9c:	89 2b       	or	r24, r25
    bf9e:	d9 f5       	brne	.+118    	; 0xc016 <baddie_move+0x84>

  	baddie_frame[idx]++;
    bfa0:	fe 01       	movw	r30, r28
    bfa2:	ee 54       	subi	r30, 0x4E	; 78
    bfa4:	f1 4f       	sbci	r31, 0xF1	; 241
    bfa6:	80 81       	ld	r24, Z
    bfa8:	8f 5f       	subi	r24, 0xFF	; 255
    bfaa:	80 83       	st	Z, r24
  	baddie_x[idx]+=1*spd[baddie_dir[idx]].x;
    bfac:	fe 01       	movw	r30, r28
    bfae:	e7 5f       	subi	r30, 0xF7	; 247
    bfb0:	ff 4e       	sbci	r31, 0xEF	; 239
    bfb2:	e0 81       	ld	r30, Z
    bfb4:	f0 e0       	ldi	r31, 0x00	; 0
    bfb6:	be 01       	movw	r22, r28
    bfb8:	66 0f       	add	r22, r22
    bfba:	77 1f       	adc	r23, r23
    bfbc:	ab 01       	movw	r20, r22
    bfbe:	4a 55       	subi	r20, 0x5A	; 90
    bfc0:	51 4f       	sbci	r21, 0xF1	; 241
    bfc2:	ee 0f       	add	r30, r30
    bfc4:	ff 1f       	adc	r31, r31
    bfc6:	ef 5f       	subi	r30, 0xFF	; 255
    bfc8:	fe 4f       	sbci	r31, 0xFE	; 254
    bfca:	20 81       	ld	r18, Z
    bfcc:	33 27       	eor	r19, r19
    bfce:	27 fd       	sbrc	r18, 7
    bfd0:	30 95       	com	r19
    bfd2:	da 01       	movw	r26, r20
    bfd4:	8d 91       	ld	r24, X+
    bfd6:	9c 91       	ld	r25, X
    bfd8:	11 97       	sbiw	r26, 0x01	; 1
    bfda:	82 0f       	add	r24, r18
    bfdc:	93 1f       	adc	r25, r19
    bfde:	8d 93       	st	X+, r24
    bfe0:	9c 93       	st	X, r25
  	baddie_y[idx]+=1*spd[baddie_dir[idx]].y;
    bfe2:	db 01       	movw	r26, r22
    bfe4:	a3 5f       	subi	r26, 0xF3	; 243
    bfe6:	bf 4e       	sbci	r27, 0xEF	; 239
    bfe8:	21 81       	ldd	r18, Z+1	; 0x01
    bfea:	33 27       	eor	r19, r19
    bfec:	27 fd       	sbrc	r18, 7
    bfee:	30 95       	com	r19
    bff0:	8d 91       	ld	r24, X+
    bff2:	9c 91       	ld	r25, X
    bff4:	11 97       	sbiw	r26, 0x01	; 1
    bff6:	82 0f       	add	r24, r18
    bff8:	93 1f       	adc	r25, r19
    bffa:	8d 93       	st	X+, r24
    bffc:	9c 93       	st	X, r25
	baddie_gtimer[idx]--;
    bffe:	fe 01       	movw	r30, r28
    c000:	e0 53       	subi	r30, 0x30	; 48
    c002:	f1 4f       	sbci	r31, 0xF1	; 241
    c004:	80 81       	ld	r24, Z
    c006:	81 50       	subi	r24, 0x01	; 1
    c008:	80 83       	st	Z, r24
	if (baddie_gtimer[idx]<=0)
    c00a:	18 16       	cp	r1, r24
    c00c:	24 f0       	brlt	.+8      	; 0xc016 <baddie_move+0x84>
	{
		baddie_ctrl[idx] = BADDIE_ALIVE;
    c00e:	c2 56       	subi	r28, 0x62	; 98
    c010:	d1 4f       	sbci	r29, 0xF1	; 241
    c012:	82 e0       	ldi	r24, 0x02	; 2
    c014:	88 83       	st	Y, r24
	}
}
    c016:	df 91       	pop	r29
    c018:	cf 91       	pop	r28
    c01a:	08 95       	ret

0000c01c <draw_supa>:
	}
}


void	draw_supa(u8 index)
{
    c01c:	af 92       	push	r10
    c01e:	bf 92       	push	r11
    c020:	cf 92       	push	r12
    c022:	df 92       	push	r13
    c024:	ef 92       	push	r14
    c026:	ff 92       	push	r15
    c028:	0f 93       	push	r16
    c02a:	1f 93       	push	r17
    c02c:	cf 93       	push	r28
    c02e:	df 93       	push	r29
	s16 ex;
	u8 k;
	u8 x,y,mx,my;
	u8 ok;

	if (supa_trigger[index]>0)
    c030:	e8 2e       	mov	r14, r24
    c032:	ff 24       	eor	r15, r15
    c034:	e7 01       	movw	r28, r14
    c036:	cd 5e       	subi	r28, 0xED	; 237
    c038:	df 4e       	sbci	r29, 0xEF	; 239
    c03a:	88 81       	ld	r24, Y
    c03c:	18 16       	cp	r1, r24
    c03e:	0c f0       	brlt	.+2      	; 0xc042 <draw_supa+0x26>
    c040:	d9 c0       	rjmp	.+434    	; 0xc1f4 <draw_supa+0x1d8>
	{
		k = supa_move[index];
    c042:	f7 01       	movw	r30, r14
    c044:	e8 53       	subi	r30, 0x38	; 56
    c046:	f1 4f       	sbci	r31, 0xF1	; 241
    c048:	d0 80       	ld	r13, Z
		x = supa_x[index];
    c04a:	f7 01       	movw	r30, r14
    c04c:	e2 52       	subi	r30, 0x22	; 34
    c04e:	f1 4f       	sbci	r31, 0xF1	; 241
    c050:	10 81       	ld	r17, Z
		y = supa_y[index];
    c052:	f7 01       	movw	r30, r14
    c054:	e7 56       	subi	r30, 0x67	; 103
    c056:	f1 4f       	sbci	r31, 0xF1	; 241
    c058:	00 81       	ld	r16, Z
		mx = DIV16(x);
		my = DIV16(y);
		// start check if its ok
		if (supa_trigger[index]==2)
    c05a:	82 30       	cpi	r24, 0x02	; 2
    c05c:	01 f5       	brne	.+64     	; 0xc09e <draw_supa+0x82>
		{
			ok=read_map(mx+spd[k].x,my+spd[k].y);
    c05e:	ed 2d       	mov	r30, r13
    c060:	f0 e0       	ldi	r31, 0x00	; 0
    c062:	31 2f       	mov	r19, r17
    c064:	32 95       	swap	r19
    c066:	3f 70       	andi	r19, 0x0F	; 15
    c068:	ee 0f       	add	r30, r30
    c06a:	ff 1f       	adc	r31, r31
    c06c:	ef 5f       	subi	r30, 0xFF	; 255
    c06e:	fe 4f       	sbci	r31, 0xFE	; 254
    c070:	80 81       	ld	r24, Z
    c072:	99 27       	eor	r25, r25
    c074:	87 fd       	sbrc	r24, 7
    c076:	90 95       	com	r25
    c078:	20 2f       	mov	r18, r16
    c07a:	22 95       	swap	r18
    c07c:	2f 70       	andi	r18, 0x0F	; 15
    c07e:	61 81       	ldd	r22, Z+1	; 0x01
    c080:	77 27       	eor	r23, r23
    c082:	67 fd       	sbrc	r22, 7
    c084:	70 95       	com	r23
    c086:	62 0f       	add	r22, r18
    c088:	71 1d       	adc	r23, r1
    c08a:	83 0f       	add	r24, r19
    c08c:	91 1d       	adc	r25, r1
    c08e:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
			if (ok!=BLOCK_FLOOR && ok!=BLOCK_HOLE)
    c092:	88 23       	and	r24, r24
    c094:	21 f0       	breq	.+8      	; 0xc09e <draw_supa+0x82>
    c096:	89 30       	cpi	r24, 0x09	; 9
    c098:	11 f0       	breq	.+4      	; 0xc09e <draw_supa+0x82>
			{
				supa_trigger[index]=0;
    c09a:	18 82       	st	Y, r1
    c09c:	d6 c0       	rjmp	.+428    	; 0xc24a <draw_supa+0x22e>
				return;
			}
		}
	  	if (x&15)
    c09e:	61 2f       	mov	r22, r17
    c0a0:	70 e0       	ldi	r23, 0x00	; 0
    c0a2:	cb 01       	movw	r24, r22
    c0a4:	8f 70       	andi	r24, 0x0F	; 15
    c0a6:	90 70       	andi	r25, 0x00	; 0
    c0a8:	40 2f       	mov	r20, r16
    c0aa:	50 e0       	ldi	r21, 0x00	; 0
    c0ac:	89 2b       	or	r24, r25
    c0ae:	39 f0       	breq	.+14     	; 0xc0be <draw_supa+0xa2>
	  		TSPRITE( FLOOR_TILE_D_X_TSP, x+xoff, y+yoff );
    c0b0:	60 5f       	subi	r22, 0xF0	; 240
    c0b2:	7f 4f       	sbci	r23, 0xFF	; 255
    c0b4:	40 5f       	subi	r20, 0xF0	; 240
    c0b6:	5f 4f       	sbci	r21, 0xFF	; 255
    c0b8:	87 e2       	ldi	r24, 0x27	; 39
    c0ba:	90 e0       	ldi	r25, 0x00	; 0
    c0bc:	0f c0       	rjmp	.+30     	; 0xc0dc <draw_supa+0xc0>
    c0be:	60 5f       	subi	r22, 0xF0	; 240
    c0c0:	7f 4f       	sbci	r23, 0xFF	; 255
    c0c2:	9a 01       	movw	r18, r20
    c0c4:	20 5f       	subi	r18, 0xF0	; 240
    c0c6:	3f 4f       	sbci	r19, 0xFF	; 255
	  	else if (y&15)
    c0c8:	4f 70       	andi	r20, 0x0F	; 15
    c0ca:	50 70       	andi	r21, 0x00	; 0
    c0cc:	45 2b       	or	r20, r21
    c0ce:	19 f0       	breq	.+6      	; 0xc0d6 <draw_supa+0xba>
	  		TSPRITE( FLOOR_TILE_D_Y_TSP, x+xoff, y+yoff );
    c0d0:	88 e2       	ldi	r24, 0x28	; 40
    c0d2:	90 e0       	ldi	r25, 0x00	; 0
    c0d4:	02 c0       	rjmp	.+4      	; 0xc0da <draw_supa+0xbe>
		else
	   		TSPRITE( FLOOR_TILE_D_TSP, 	 x+xoff, y+yoff );
    c0d6:	86 e2       	ldi	r24, 0x26	; 38
    c0d8:	90 e0       	ldi	r25, 0x00	; 0
    c0da:	a9 01       	movw	r20, r18
    c0dc:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>

	  	x+=8*spd[k].x;
    c0e0:	ad 2c       	mov	r10, r13
    c0e2:	bb 24       	eor	r11, r11
    c0e4:	f5 01       	movw	r30, r10
    c0e6:	ee 0f       	add	r30, r30
    c0e8:	ff 1f       	adc	r31, r31
    c0ea:	ef 5f       	subi	r30, 0xFF	; 255
    c0ec:	fe 4f       	sbci	r31, 0xFE	; 254
    c0ee:	20 81       	ld	r18, Z
    c0f0:	22 0f       	add	r18, r18
    c0f2:	22 0f       	add	r18, r18
    c0f4:	22 0f       	add	r18, r18
    c0f6:	21 0f       	add	r18, r17
		y+=8*spd[k].y;
    c0f8:	91 81       	ldd	r25, Z+1	; 0x01
    c0fa:	99 0f       	add	r25, r25
    c0fc:	99 0f       	add	r25, r25
    c0fe:	99 0f       	add	r25, r25
    c100:	90 0f       	add	r25, r16
		supa_x[index]=x;
    c102:	f7 01       	movw	r30, r14
    c104:	e2 52       	subi	r30, 0x22	; 34
    c106:	f1 4f       	sbci	r31, 0xF1	; 241
    c108:	20 83       	st	Z, r18
		supa_y[index]=y;
    c10a:	f7 01       	movw	r30, r14
    c10c:	e7 56       	subi	r30, 0x67	; 103
    c10e:	f1 4f       	sbci	r31, 0xF1	; 241
    c110:	90 83       	st	Z, r25
	    mx=DIV16(x);
		my=DIV16(y);
		supa_trigger[index]--;
    c112:	f7 01       	movw	r30, r14
    c114:	ed 5e       	subi	r30, 0xED	; 237
    c116:	ff 4e       	sbci	r31, 0xEF	; 239
    c118:	80 81       	ld	r24, Z
    c11a:	81 50       	subi	r24, 0x01	; 1
    c11c:	80 83       	st	Z, r24
		if (supa_trigger[index]==0)
    c11e:	88 23       	and	r24, r24
    c120:	09 f0       	breq	.+2      	; 0xc124 <draw_supa+0x108>
    c122:	68 c0       	rjmp	.+208    	; 0xc1f4 <draw_supa+0x1d8>

	  	x+=8*spd[k].x;
		y+=8*spd[k].y;
		supa_x[index]=x;
		supa_y[index]=y;
	    mx=DIV16(x);
    c124:	d2 2e       	mov	r13, r18
    c126:	d2 94       	swap	r13
    c128:	af e0       	ldi	r26, 0x0F	; 15
    c12a:	da 22       	and	r13, r26
		my=DIV16(y);
    c12c:	c9 2e       	mov	r12, r25
    c12e:	c2 94       	swap	r12
    c130:	ff e0       	ldi	r31, 0x0F	; 15
    c132:	cf 22       	and	r12, r31
		supa_trigger[index]--;
		if (supa_trigger[index]==0)
		{
			// made it to the target
			if (read_map(mx,my)==BLOCK_HOLE)
    c134:	cd 2d       	mov	r28, r13
    c136:	d0 e0       	ldi	r29, 0x00	; 0
    c138:	0c 2d       	mov	r16, r12
    c13a:	10 e0       	ldi	r17, 0x00	; 0
    c13c:	ce 01       	movw	r24, r28
    c13e:	b8 01       	movw	r22, r16
    c140:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
    c144:	09 97       	sbiw	r24, 0x09	; 9
    c146:	11 f5       	brne	.+68     	; 0xc18c <draw_supa+0x170>
    c148:	82 e0       	ldi	r24, 0x02	; 2
    c14a:	6c e0       	ldi	r22, 0x0C	; 12
    c14c:	4f ef       	ldi	r20, 0xFF	; 255
    c14e:	21 e0       	ldi	r18, 0x01	; 1
    c150:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    c154:	cd 30       	cpi	r28, 0x0D	; 13
    c156:	d1 05       	cpc	r29, r1
    c158:	70 f4       	brcc	.+28     	; 0xc176 <draw_supa+0x15a>
	if (y<0|| y>=MAPH) return;
    c15a:	0b 30       	cpi	r16, 0x0B	; 11
    c15c:	11 05       	cpc	r17, r1
    c15e:	58 f4       	brcc	.+22     	; 0xc176 <draw_supa+0x15a>
	rmap(x,y) = a;
    c160:	e4 e0       	ldi	r30, 0x04	; 4
    c162:	00 0f       	add	r16, r16
    c164:	11 1f       	adc	r17, r17
    c166:	ea 95       	dec	r30
    c168:	e1 f7       	brne	.-8      	; 0xc162 <draw_supa+0x146>
    c16a:	c5 50       	subi	r28, 0x05	; 5
    c16c:	d1 4f       	sbci	r29, 0xF1	; 241
    c16e:	c0 0f       	add	r28, r16
    c170:	d1 1f       	adc	r29, r17
    c172:	8a e0       	ldi	r24, 0x0A	; 10
    c174:	88 83       	st	Y, r24
			// made it to the target
			if (read_map(mx,my)==BLOCK_HOLE)
			{
				sound(SFX_STUN,SD_NORMAL);
    			set_map(mx,my,BLOCK_SUPAFIXED);
				supa_trigger[index]=-1;
    c176:	f7 01       	movw	r30, r14
    c178:	ed 5e       	subi	r30, 0xED	; 237
    c17a:	ff 4e       	sbci	r31, 0xEF	; 239
    c17c:	8f ef       	ldi	r24, 0xFF	; 255
    c17e:	80 83       	st	Z, r24
				supa_done--;
    c180:	80 91 bb 0e 	lds	r24, 0x0EBB
    c184:	81 50       	subi	r24, 0x01	; 1
    c186:	80 93 bb 0e 	sts	0x0EBB, r24
    c18a:	17 c0       	rjmp	.+46     	; 0xc1ba <draw_supa+0x19e>



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    c18c:	cd 30       	cpi	r28, 0x0D	; 13
    c18e:	d1 05       	cpc	r29, r1
    c190:	a0 f4       	brcc	.+40     	; 0xc1ba <draw_supa+0x19e>
	if (y<0|| y>=MAPH) return;
    c192:	0b 30       	cpi	r16, 0x0B	; 11
    c194:	11 05       	cpc	r17, r1
    c196:	88 f4       	brcc	.+34     	; 0xc1ba <draw_supa+0x19e>
	rmap(x,y) = a;
    c198:	74 e0       	ldi	r23, 0x04	; 4
    c19a:	00 0f       	add	r16, r16
    c19c:	11 1f       	adc	r17, r17
    c19e:	7a 95       	dec	r23
    c1a0:	e1 f7       	brne	.-8      	; 0xc19a <draw_supa+0x17e>
    c1a2:	c5 50       	subi	r28, 0x05	; 5
    c1a4:	d1 4f       	sbci	r29, 0xF1	; 241
    c1a6:	c0 0f       	add	r28, r16
    c1a8:	d1 1f       	adc	r29, r17
    c1aa:	c7 01       	movw	r24, r14
    c1ac:	64 e0       	ldi	r22, 0x04	; 4
    c1ae:	88 0f       	add	r24, r24
    c1b0:	99 1f       	adc	r25, r25
    c1b2:	6a 95       	dec	r22
    c1b4:	e1 f7       	brne	.-8      	; 0xc1ae <draw_supa+0x192>
    c1b6:	84 60       	ori	r24, 0x04	; 4
    c1b8:	88 83       	st	Y, r24
			{
    			set_map(mx,my,BLOCK_SUPA|(index<<4));
			}
			// cleat the original position
			mx-=spd[k].x;
			my-=spd[k].y;
    c1ba:	f5 01       	movw	r30, r10
    c1bc:	ee 0f       	add	r30, r30
    c1be:	ff 1f       	adc	r31, r31
    c1c0:	ef 5f       	subi	r30, 0xFF	; 255
    c1c2:	fe 4f       	sbci	r31, 0xFE	; 254
    c1c4:	91 81       	ldd	r25, Z+1	; 0x01
			set_map(mx,my,0);
    c1c6:	80 81       	ld	r24, Z
    c1c8:	d8 1a       	sub	r13, r24
    c1ca:	ed 2d       	mov	r30, r13
    c1cc:	f0 e0       	ldi	r31, 0x00	; 0



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    c1ce:	ed 30       	cpi	r30, 0x0D	; 13
    c1d0:	f1 05       	cpc	r31, r1
    c1d2:	80 f4       	brcc	.+32     	; 0xc1f4 <draw_supa+0x1d8>
    			set_map(mx,my,BLOCK_SUPA|(index<<4));
			}
			// cleat the original position
			mx-=spd[k].x;
			my-=spd[k].y;
			set_map(mx,my,0);
    c1d4:	c9 1a       	sub	r12, r25
    c1d6:	8c 2d       	mov	r24, r12
    c1d8:	90 e0       	ldi	r25, 0x00	; 0


void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
	if (y<0|| y>=MAPH) return;
    c1da:	8b 30       	cpi	r24, 0x0B	; 11
    c1dc:	91 05       	cpc	r25, r1
    c1de:	50 f4       	brcc	.+20     	; 0xc1f4 <draw_supa+0x1d8>
	rmap(x,y) = a;
    c1e0:	44 e0       	ldi	r20, 0x04	; 4
    c1e2:	88 0f       	add	r24, r24
    c1e4:	99 1f       	adc	r25, r25
    c1e6:	4a 95       	dec	r20
    c1e8:	e1 f7       	brne	.-8      	; 0xc1e2 <draw_supa+0x1c6>
    c1ea:	e5 50       	subi	r30, 0x05	; 5
    c1ec:	f1 4f       	sbci	r31, 0xF1	; 241
    c1ee:	e8 0f       	add	r30, r24
    c1f0:	f9 1f       	adc	r31, r25
    c1f2:	10 82       	st	Z, r1
		}
	}


	// normal flicker
   	ex=((g_frame>>4)&1);
    c1f4:	20 91 18 10 	lds	r18, 0x1018
    c1f8:	30 91 19 10 	lds	r19, 0x1019
   	if (supa_trigger[index]<0)
    c1fc:	f7 01       	movw	r30, r14
    c1fe:	ed 5e       	subi	r30, 0xED	; 237
    c200:	ff 4e       	sbci	r31, 0xEF	; 239
    c202:	80 81       	ld	r24, Z
    c204:	87 fd       	sbrc	r24, 7
    c206:	07 c0       	rjmp	.+14     	; 0xc216 <draw_supa+0x1fa>
		}
	}


	// normal flicker
   	ex=((g_frame>>4)&1);
    c208:	c9 01       	movw	r24, r18
    c20a:	34 e0       	ldi	r19, 0x04	; 4
    c20c:	95 95       	asr	r25
    c20e:	87 95       	ror	r24
    c210:	3a 95       	dec	r19
    c212:	e1 f7       	brne	.-8      	; 0xc20c <draw_supa+0x1f0>
    c214:	05 c0       	rjmp	.+10     	; 0xc220 <draw_supa+0x204>
   	if (supa_trigger[index]<0)
   		ex=((g_frame>>2)&1);
    c216:	c9 01       	movw	r24, r18
    c218:	95 95       	asr	r25
    c21a:	87 95       	ror	r24
    c21c:	95 95       	asr	r25
    c21e:	87 95       	ror	r24
    c220:	81 70       	andi	r24, 0x01	; 1
    c222:	90 70       	andi	r25, 0x00	; 0
	TSPRITE( BLOCK_SUPA_GREEN_TSP+ex, supa_x[index]+xoff, supa_y[index]+yoff );
    c224:	f7 01       	movw	r30, r14
    c226:	e2 52       	subi	r30, 0x22	; 34
    c228:	f1 4f       	sbci	r31, 0xF1	; 241
    c22a:	60 81       	ld	r22, Z
    c22c:	70 e0       	ldi	r23, 0x00	; 0
    c22e:	60 5f       	subi	r22, 0xF0	; 240
    c230:	7f 4f       	sbci	r23, 0xFF	; 255
    c232:	29 e9       	ldi	r18, 0x99	; 153
    c234:	3e e0       	ldi	r19, 0x0E	; 14
    c236:	e2 0e       	add	r14, r18
    c238:	f3 1e       	adc	r15, r19
    c23a:	f7 01       	movw	r30, r14
    c23c:	40 81       	ld	r20, Z
    c23e:	50 e0       	ldi	r21, 0x00	; 0
    c240:	40 5f       	subi	r20, 0xF0	; 240
    c242:	5f 4f       	sbci	r21, 0xFF	; 255
    c244:	0b 96       	adiw	r24, 0x0b	; 11
    c246:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
}
    c24a:	df 91       	pop	r29
    c24c:	cf 91       	pop	r28
    c24e:	1f 91       	pop	r17
    c250:	0f 91       	pop	r16
    c252:	ff 90       	pop	r15
    c254:	ef 90       	pop	r14
    c256:	df 90       	pop	r13
    c258:	cf 90       	pop	r12
    c25a:	bf 90       	pop	r11
    c25c:	af 90       	pop	r10
    c25e:	08 95       	ret

0000c260 <uze_hiscore_enter>:

#define ENTER_STARTY 5*16


void uze_hiscore_enter()
{
    c260:	0f 93       	push	r16
    c262:	1f 93       	push	r17
	u8 i=his_rank;
    c264:	00 91 04 10 	lds	r16, 0x1004
	const u8 xpos = (XREZ/2)-16;

	if (xpad(JOY_A) && his_pos<3)
    c268:	80 91 0a 0e 	lds	r24, 0x0E0A
    c26c:	90 91 0b 0e 	lds	r25, 0x0E0B
    c270:	90 ff       	sbrs	r25, 0
    c272:	0f c0       	rjmp	.+30     	; 0xc292 <uze_hiscore_enter+0x32>
    c274:	80 91 c7 0e 	lds	r24, 0x0EC7
    c278:	83 30       	cpi	r24, 0x03	; 3
    c27a:	5c f4       	brge	.+22     	; 0xc292 <uze_hiscore_enter+0x32>
    c27c:	82 e0       	ldi	r24, 0x02	; 2
    c27e:	6e e0       	ldi	r22, 0x0E	; 14
    c280:	4f ef       	ldi	r20, 0xFF	; 255
    c282:	21 e0       	ldi	r18, 0x01	; 1
    c284:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
	{
		sound(SFX_HISCORE_ENTER,SD_NORMAL);
	  	his_pos++;
    c288:	80 91 c7 0e 	lds	r24, 0x0EC7
    c28c:	8f 5f       	subi	r24, 0xFF	; 255
    c28e:	80 93 c7 0e 	sts	0x0EC7, r24
	}
	gtimer--;
    c292:	80 91 89 0e 	lds	r24, 0x0E89
    c296:	90 91 8a 0e 	lds	r25, 0x0E8A
    c29a:	01 97       	sbiw	r24, 0x01	; 1
    c29c:	90 93 8a 0e 	sts	0x0E8A, r25
    c2a0:	80 93 89 0e 	sts	0x0E89, r24

    if (xpad( (JOY_LEFT|JOY_RIGHT) ))  gtimer=0;
    c2a4:	80 91 0a 0e 	lds	r24, 0x0E0A
    c2a8:	80 7c       	andi	r24, 0xC0	; 192
    c2aa:	21 f0       	breq	.+8      	; 0xc2b4 <uze_hiscore_enter+0x54>
    c2ac:	10 92 8a 0e 	sts	0x0E8A, r1
    c2b0:	10 92 89 0e 	sts	0x0E89, r1

	if (gtimer<=0)
    c2b4:	80 91 89 0e 	lds	r24, 0x0E89
    c2b8:	90 91 8a 0e 	lds	r25, 0x0E8A
    c2bc:	18 16       	cp	r1, r24
    c2be:	19 06       	cpc	r1, r25
    c2c0:	bc f1       	brlt	.+110    	; 0xc330 <uze_hiscore_enter+0xd0>
	{
 		if (pad(JOY_LEFT)) { sound(SFX_HISCORE_CLICK,SD_NORMAL); gtimer=10; his_let--;  }
    c2c2:	80 91 0c 0e 	lds	r24, 0x0E0C
    c2c6:	86 ff       	sbrs	r24, 6
    c2c8:	11 c0       	rjmp	.+34     	; 0xc2ec <uze_hiscore_enter+0x8c>
    c2ca:	82 e0       	ldi	r24, 0x02	; 2
    c2cc:	6d e0       	ldi	r22, 0x0D	; 13
    c2ce:	4f ef       	ldi	r20, 0xFF	; 255
    c2d0:	21 e0       	ldi	r18, 0x01	; 1
    c2d2:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
    c2d6:	8a e0       	ldi	r24, 0x0A	; 10
    c2d8:	90 e0       	ldi	r25, 0x00	; 0
    c2da:	90 93 8a 0e 	sts	0x0E8A, r25
    c2de:	80 93 89 0e 	sts	0x0E89, r24
    c2e2:	80 91 bc 0e 	lds	r24, 0x0EBC
    c2e6:	81 50       	subi	r24, 0x01	; 1
    c2e8:	80 93 bc 0e 	sts	0x0EBC, r24
   		if (pad(JOY_RIGHT)) { sound(SFX_HISCORE_CLICK,SD_NORMAL);gtimer=10; his_let++; }
    c2ec:	80 91 0c 0e 	lds	r24, 0x0E0C
    c2f0:	87 ff       	sbrs	r24, 7
    c2f2:	11 c0       	rjmp	.+34     	; 0xc316 <uze_hiscore_enter+0xb6>
    c2f4:	82 e0       	ldi	r24, 0x02	; 2
    c2f6:	6d e0       	ldi	r22, 0x0D	; 13
    c2f8:	4f ef       	ldi	r20, 0xFF	; 255
    c2fa:	21 e0       	ldi	r18, 0x01	; 1
    c2fc:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
    c300:	8a e0       	ldi	r24, 0x0A	; 10
    c302:	90 e0       	ldi	r25, 0x00	; 0
    c304:	90 93 8a 0e 	sts	0x0E8A, r25
    c308:	80 93 89 0e 	sts	0x0E89, r24
    c30c:	80 91 bc 0e 	lds	r24, 0x0EBC
    c310:	8f 5f       	subi	r24, 0xFF	; 255
    c312:	80 93 bc 0e 	sts	0x0EBC, r24
   		if (his_let<0) his_let=26;
    c316:	80 91 bc 0e 	lds	r24, 0x0EBC
    c31a:	87 ff       	sbrs	r24, 7
    c31c:	03 c0       	rjmp	.+6      	; 0xc324 <uze_hiscore_enter+0xc4>
    c31e:	8a e1       	ldi	r24, 0x1A	; 26
    c320:	80 93 bc 0e 	sts	0x0EBC, r24
   		if (his_let>26) his_let=0;
    c324:	80 91 bc 0e 	lds	r24, 0x0EBC
    c328:	8b 31       	cpi	r24, 0x1B	; 27
    c32a:	14 f0       	brlt	.+4      	; 0xc330 <uze_hiscore_enter+0xd0>
    c32c:	10 92 bc 0e 	sts	0x0EBC, r1
	}
	if (his_pos<=2)
    c330:	40 91 c7 0e 	lds	r20, 0x0EC7
    c334:	43 30       	cpi	r20, 0x03	; 3
    c336:	fc f4       	brge	.+62     	; 0xc376 <uze_hiscore_enter+0x116>
 		scores[i].name[his_pos]=BPTR(&his_lets[his_let]);
    c338:	80 91 bc 0e 	lds	r24, 0x0EBC
    c33c:	e8 2f       	mov	r30, r24
    c33e:	ff 27       	eor	r31, r31
    c340:	e7 fd       	sbrc	r30, 7
    c342:	f0 95       	com	r31
    c344:	ef 58       	subi	r30, 0x8F	; 143
    c346:	fd 47       	sbci	r31, 0x7D	; 125
    c348:	54 91       	lpm	r21, Z+
    c34a:	20 2f       	mov	r18, r16
    c34c:	30 e0       	ldi	r19, 0x00	; 0
    c34e:	c9 01       	movw	r24, r18
    c350:	88 0f       	add	r24, r24
    c352:	99 1f       	adc	r25, r25
    c354:	82 0f       	add	r24, r18
    c356:	93 1f       	adc	r25, r19
    c358:	88 0f       	add	r24, r24
    c35a:	99 1f       	adc	r25, r25
    c35c:	e0 91 8c 0e 	lds	r30, 0x0E8C
    c360:	f0 91 8d 0e 	lds	r31, 0x0E8D
    c364:	e8 0f       	add	r30, r24
    c366:	f9 1f       	adc	r31, r25
    c368:	84 2f       	mov	r24, r20
    c36a:	99 27       	eor	r25, r25
    c36c:	87 fd       	sbrc	r24, 7
    c36e:	90 95       	com	r25
    c370:	e8 0f       	add	r30, r24
    c372:	f9 1f       	adc	r31, r25
    c374:	52 83       	std	Z+2, r21	; 0x02
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    c376:	18 e6       	ldi	r17, 0x68	; 104
    c378:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    c37c:	80 e5       	ldi	r24, 0x50	; 80
    c37e:	80 93 fa 0e 	sts	0x0EFA, r24
	}
	if (his_pos<=2)
 		scores[i].name[his_pos]=BPTR(&his_lets[his_let]);

   	ugo(xpos,ENTER_STARTY);
	printx_ram(scores[i].name);
    c382:	26 e0       	ldi	r18, 0x06	; 6
    c384:	02 9f       	mul	r16, r18
    c386:	90 01       	movw	r18, r0
    c388:	11 24       	eor	r1, r1
    c38a:	80 91 8c 0e 	lds	r24, 0x0E8C
    c38e:	90 91 8d 0e 	lds	r25, 0x0E8D
    c392:	82 0f       	add	r24, r18
    c394:	93 1f       	adc	r25, r19
    c396:	02 96       	adiw	r24, 0x02	; 2
    c398:	0e 94 01 57 	call	0xae02	; 0xae02 <printx_ram>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    c39c:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    c3a0:	18 e5       	ldi	r17, 0x58	; 88
    c3a2:	10 93 fa 0e 	sts	0x0EFA, r17

   	ugo(xpos,ENTER_STARTY);
	printx_ram(scores[i].name);

   	ugo(xpos,8+ENTER_STARTY);
	uprintx(txt_blank10);
    c3a6:	8a ed       	ldi	r24, 0xDA	; 218
    c3a8:	91 e8       	ldi	r25, 0x81	; 129
    c3aa:	0e 94 0d 57 	call	0xae1a	; 0xae1a <uprintx>


	// blank out current letter
	if (his_pos<=2)
    c3ae:	90 91 c7 0e 	lds	r25, 0x0EC7
    c3b2:	93 30       	cpi	r25, 0x03	; 3
    c3b4:	7c f4       	brge	.+30     	; 0xc3d4 <uze_hiscore_enter+0x174>
    if ((g_frame>>3)&1)
    c3b6:	80 91 18 10 	lds	r24, 0x1018
    c3ba:	83 ff       	sbrs	r24, 3
    c3bc:	0b c0       	rjmp	.+22     	; 0xc3d4 <uze_hiscore_enter+0x174>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    c3be:	99 0f       	add	r25, r25
    c3c0:	99 0f       	add	r25, r25
    c3c2:	99 0f       	add	r25, r25
    c3c4:	98 59       	subi	r25, 0x98	; 152
    c3c6:	90 93 b5 0e 	sts	0x0EB5, r25
	uytab = y;
    c3ca:	10 93 fa 0e 	sts	0x0EFA, r17
	// blank out current letter
	if (his_pos<=2)
    if ((g_frame>>3)&1)
	{
	   	ugo(xpos+MUL8(his_pos),8+ENTER_STARTY);
		uprintc('_');
    c3ce:	8f e5       	ldi	r24, 0x5F	; 95
    c3d0:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
	}

	// end of hiscore enter
	if (his_pos>=3)
    c3d4:	80 91 c7 0e 	lds	r24, 0x0EC7
    c3d8:	83 30       	cpi	r24, 0x03	; 3
    c3da:	ac f0       	brlt	.+42     	; 0xc406 <uze_hiscore_enter+0x1a6>
}

void	hiscore_save_to_eeprom(u8 *ram)
{
	struct EepromBlockStruct *ebs = (struct EepromBlockStruct*)ram;
	ebs->id = SPACEAGE_EEPROM_ID;
    c3dc:	87 e1       	ldi	r24, 0x17	; 23
    c3de:	90 e0       	ldi	r25, 0x00	; 0
    c3e0:	90 93 fc 0e 	sts	0x0EFC, r25
    c3e4:	80 93 fb 0e 	sts	0x0EFB, r24
	EepromWriteBlock(ebs);
    c3e8:	8b ef       	ldi	r24, 0xFB	; 251
    c3ea:	9e e0       	ldi	r25, 0x0E	; 14
    c3ec:	0e 94 e3 46 	call	0x8dc6	; 0x8dc6 <EepromWriteBlock>

	// end of hiscore enter
	if (his_pos>=3)
	{
		hiscore_save_to_eeprom( hiscore_mem );
		state=STATE_HISCORE;
    c3f0:	8b e0       	ldi	r24, 0x0B	; 11
    c3f2:	80 93 ba 0e 	sts	0x0EBA, r24
		gtimer=6*SECOND;
    c3f6:	88 e6       	ldi	r24, 0x68	; 104
    c3f8:	91 e0       	ldi	r25, 0x01	; 1
    c3fa:	90 93 8a 0e 	sts	0x0E8A, r25
    c3fe:	80 93 89 0e 	sts	0x0E89, r24
		draw_title();
    c402:	0e 94 4a 5c 	call	0xb894	; 0xb894 <draw_title>
	}
}
    c406:	1f 91       	pop	r17
    c408:	0f 91       	pop	r16
    c40a:	08 95       	ret

0000c40c <SPRITE>:
 	DKFill(&(rect){8,XREZ-8,2*8,YREZ-2*8}, val);
}


void	SPRITE(u8 index, u8 x, u8 y, u8 flip, u8 pal)
{
    c40c:	ef 92       	push	r14
    c40e:	ff 92       	push	r15
    c410:	0f 93       	push	r16
   	const char *data=(const char *)pgm_read_word(&sprite_table[index]);
    c412:	e8 2f       	mov	r30, r24
    c414:	f0 e0       	ldi	r31, 0x00	; 0
    c416:	ee 0f       	add	r30, r30
    c418:	ff 1f       	adc	r31, r31
    c41a:	e8 58       	subi	r30, 0x88	; 136
    c41c:	f7 4a       	sbci	r31, 0xA7	; 167
    c41e:	e5 90       	lpm	r14, Z+
    c420:	f4 90       	lpm	r15, Z+
   	u8 w=pgm_read_byte(data);
    c422:	f7 01       	movw	r30, r14
    c424:	24 91       	lpm	r18, Z+
   	u8 h=pgm_read_byte(data+1);
    c426:	08 94       	sec
    c428:	e1 1c       	adc	r14, r1
    c42a:	f1 1c       	adc	r15, r1
    c42c:	f7 01       	movw	r30, r14
    c42e:	04 91       	lpm	r16, Z+
    c430:	08 94       	sec
    c432:	e1 08       	sbc	r14, r1
    c434:	f1 08       	sbc	r15, r1
   	MoveSprite(free_slot, x, y, w, h);
    c436:	80 91 1f 10 	lds	r24, 0x101F
    c43a:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <MoveSprite>
 	DKMapSprite(0,(char *)pgm_read_word(&sprite_table[index]),0);
    c43e:	80 e0       	ldi	r24, 0x00	; 0
    c440:	b7 01       	movw	r22, r14
    c442:	40 e0       	ldi	r20, 0x00	; 0
    c444:	0e 94 e1 50 	call	0xa1c2	; 0xa1c2 <DKMapSprite>
}
    c448:	0f 91       	pop	r16
    c44a:	ff 90       	pop	r15
    c44c:	ef 90       	pop	r14
    c44e:	08 95       	ret

0000c450 <draw_player>:




void	draw_player()
{
    c450:	0f 93       	push	r16
	s16 x,y,f,k;
	u8 offset=0;


	f=(player_frame>>2)&1;
    c452:	90 91 b6 0e 	lds	r25, 0x0EB6
	k=BPTR(&frames_pengo_walk[player_dir]);
    c456:	e0 91 83 0e 	lds	r30, 0x0E83
    c45a:	f0 e0       	ldi	r31, 0x00	; 0
    c45c:	e1 52       	subi	r30, 0x21	; 33
    c45e:	fd 47       	sbci	r31, 0x7D	; 125
    c460:	24 91       	lpm	r18, Z+


	// push
   	if (player_kicked && ((g_frame>>1)&1))
    c462:	80 91 25 10 	lds	r24, 0x1025
    c466:	88 23       	and	r24, r24
    c468:	21 f0       	breq	.+8      	; 0xc472 <draw_player+0x22>
    c46a:	80 91 18 10 	lds	r24, 0x1018
    c46e:	81 fd       	sbrc	r24, 1
    c470:	15 c0       	rjmp	.+42     	; 0xc49c <draw_player+0x4c>
		return;
	}

	x=player_x+xoff;
	y=player_y+yoff;
	SPRITE(k+f+offset,x,y,0,0);
    c472:	96 95       	lsr	r25
    c474:	96 95       	lsr	r25
    c476:	91 70       	andi	r25, 0x01	; 1
    c478:	60 91 fc 0f 	lds	r22, 0x0FFC
    c47c:	70 91 fd 0f 	lds	r23, 0x0FFD
    c480:	60 5f       	subi	r22, 0xF0	; 240
    c482:	7f 4f       	sbci	r23, 0xFF	; 255
    c484:	40 91 87 0e 	lds	r20, 0x0E87
    c488:	50 91 88 0e 	lds	r21, 0x0E88
    c48c:	40 5f       	subi	r20, 0xF0	; 240
    c48e:	5f 4f       	sbci	r21, 0xFF	; 255
    c490:	89 2f       	mov	r24, r25
    c492:	82 0f       	add	r24, r18
    c494:	20 e0       	ldi	r18, 0x00	; 0
    c496:	00 e0       	ldi	r16, 0x00	; 0
    c498:	0e 94 06 62 	call	0xc40c	; 0xc40c <SPRITE>
}
    c49c:	0f 91       	pop	r16
    c49e:	08 95       	ret

0000c4a0 <ran>:


extern	 int rand();

int ran(int lo,int hi)
{
    c4a0:	ef 92       	push	r14
    c4a2:	ff 92       	push	r15
    c4a4:	0f 93       	push	r16
    c4a6:	1f 93       	push	r17
    c4a8:	8c 01       	movw	r16, r24
    c4aa:	7b 01       	movw	r14, r22
	return(lo+rand()%(hi-lo+1));
    c4ac:	0e 94 f5 6e 	call	0xddea	; 0xddea <rand>
    c4b0:	e0 1a       	sub	r14, r16
    c4b2:	f1 0a       	sbc	r15, r17
    c4b4:	08 94       	sec
    c4b6:	e1 1c       	adc	r14, r1
    c4b8:	f1 1c       	adc	r15, r1
    c4ba:	b7 01       	movw	r22, r14
    c4bc:	0e 94 6f 6e 	call	0xdcde	; 0xdcde <__divmodhi4>
    c4c0:	9c 01       	movw	r18, r24
    c4c2:	20 0f       	add	r18, r16
    c4c4:	31 1f       	adc	r19, r17
}
    c4c6:	c9 01       	movw	r24, r18
    c4c8:	1f 91       	pop	r17
    c4ca:	0f 91       	pop	r16
    c4cc:	ff 90       	pop	r15
    c4ce:	ef 90       	pop	r14
    c4d0:	08 95       	ret

0000c4d2 <draw_menu_stars>:
			ucprintx(txt_pjones);
}


void	draw_menu_stars()
{
    c4d2:	9f 92       	push	r9
    c4d4:	af 92       	push	r10
    c4d6:	bf 92       	push	r11
    c4d8:	cf 92       	push	r12
    c4da:	df 92       	push	r13
    c4dc:	ef 92       	push	r14
    c4de:	ff 92       	push	r15
    c4e0:	0f 93       	push	r16
    c4e2:	1f 93       	push	r17
    c4e4:	cf 93       	push	r28
    c4e6:	df 93       	push	r29
	return( a );
}

u8 TSPRITE_GET_INDEX(u8 index,u8 offset)
{
   	const char *data=(const char *)pgm_read_word(&tsprite_table[index]);
    c4e8:	8c e5       	ldi	r24, 0x5C	; 92
    c4ea:	9a e3       	ldi	r25, 0x3A	; 58
    c4ec:	fc 01       	movw	r30, r24
    c4ee:	25 91       	lpm	r18, Z+
    c4f0:	34 91       	lpm	r19, Z+
   	u8 w=pgm_read_byte(&data[2+offset]);
    c4f2:	2e 5f       	subi	r18, 0xFE	; 254
    c4f4:	3f 4f       	sbci	r19, 0xFF	; 255
    c4f6:	f9 01       	movw	r30, r18
    c4f8:	94 90       	lpm	r9, Z+
    c4fa:	ee 24       	eor	r14, r14
    c4fc:	ff 24       	eor	r15, r15
	   		{
			   SetTile(x,y,0x00);
	   		}
	   		else
	   		{
				SetTile(x,y,ran(0,7)+star);
    c4fe:	c9 2c       	mov	r12, r9
    c500:	dd 24       	eor	r13, r13
		y=ran(0,YREZ-1);
		x>>=3;
		y>>=3;
	   //	ugo(x,y);

	  	if (TileRead(x,y)==0x1B || ( TileRead(x,y)>=star && TileRead(x,y)<=star+7))
    c502:	37 e0       	ldi	r19, 0x07	; 7
    c504:	a3 2e       	mov	r10, r19
    c506:	b1 2c       	mov	r11, r1
    c508:	ac 0c       	add	r10, r12
    c50a:	bd 1c       	adc	r11, r13
	u8 star = TSPRITE_GET_INDEX( STAR_00_TSP,0 );


	for(i=0;i<2;i++)
	{
  		x=ran(0,XREZ-1);
    c50c:	80 e0       	ldi	r24, 0x00	; 0
    c50e:	90 e0       	ldi	r25, 0x00	; 0
    c510:	6f ee       	ldi	r22, 0xEF	; 239
    c512:	70 e0       	ldi	r23, 0x00	; 0
    c514:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    c518:	ec 01       	movw	r28, r24
		y=ran(0,YREZ-1);
    c51a:	80 e0       	ldi	r24, 0x00	; 0
    c51c:	90 e0       	ldi	r25, 0x00	; 0
    c51e:	6f ec       	ldi	r22, 0xCF	; 207
    c520:	70 e0       	ldi	r23, 0x00	; 0
    c522:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
		x>>=3;
    c526:	23 e0       	ldi	r18, 0x03	; 3
    c528:	d5 95       	asr	r29
    c52a:	c7 95       	ror	r28
    c52c:	2a 95       	dec	r18
    c52e:	e1 f7       	brne	.-8      	; 0xc528 <draw_menu_stars+0x56>
		y>>=3;
    c530:	8c 01       	movw	r16, r24
    c532:	83 e0       	ldi	r24, 0x03	; 3
    c534:	15 95       	asr	r17
    c536:	07 95       	ror	r16
    c538:	8a 95       	dec	r24
    c53a:	e1 f7       	brne	.-8      	; 0xc534 <draw_menu_stars+0x62>

//extern u8 *vram;

u8 TileRead(u8 x,u8 y)
{
	return(vram[x+VRAM_TILES_H*y]);	//-~(RAM_TILES_COUNT-1));
    c53c:	80 2f       	mov	r24, r16
    c53e:	90 e0       	ldi	r25, 0x00	; 0
    c540:	fc 01       	movw	r30, r24
    c542:	b5 e0       	ldi	r27, 0x05	; 5
    c544:	ee 0f       	add	r30, r30
    c546:	ff 1f       	adc	r31, r31
    c548:	ba 95       	dec	r27
    c54a:	e1 f7       	brne	.-8      	; 0xc544 <draw_menu_stars+0x72>
    c54c:	88 0f       	add	r24, r24
    c54e:	99 1f       	adc	r25, r25
    c550:	e8 1b       	sub	r30, r24
    c552:	f9 0b       	sbc	r31, r25
    c554:	ec 0f       	add	r30, r28
    c556:	f1 1d       	adc	r31, r1
    c558:	e0 5e       	subi	r30, 0xE0	; 224
    c55a:	fe 4f       	sbci	r31, 0xFE	; 254
    c55c:	80 81       	ld	r24, Z
	   //	ugo(x,y);

	  	if (TileRead(x,y)==0x1B || ( TileRead(x,y)>=star && TileRead(x,y)<=star+7))
    c55e:	8b 31       	cpi	r24, 0x1B	; 27
    c560:	31 f0       	breq	.+12     	; 0xc56e <draw_menu_stars+0x9c>
    c562:	89 15       	cp	r24, r9
    c564:	f0 f0       	brcs	.+60     	; 0xc5a2 <draw_menu_stars+0xd0>
    c566:	90 e0       	ldi	r25, 0x00	; 0
    c568:	a8 16       	cp	r10, r24
    c56a:	b9 06       	cpc	r11, r25
    c56c:	d4 f0       	brlt	.+52     	; 0xc5a2 <draw_menu_stars+0xd0>
	    {
	   		if (ran(0,100)>50)
    c56e:	80 e0       	ldi	r24, 0x00	; 0
    c570:	90 e0       	ldi	r25, 0x00	; 0
    c572:	64 e6       	ldi	r22, 0x64	; 100
    c574:	70 e0       	ldi	r23, 0x00	; 0
    c576:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    c57a:	c3 97       	sbiw	r24, 0x33	; 51
    c57c:	2c f0       	brlt	.+10     	; 0xc588 <draw_menu_stars+0xb6>
	   		{
			   SetTile(x,y,0x00);
    c57e:	8c 2f       	mov	r24, r28
    c580:	60 2f       	mov	r22, r16
    c582:	40 e0       	ldi	r20, 0x00	; 0
    c584:	50 e0       	ldi	r21, 0x00	; 0
    c586:	0b c0       	rjmp	.+22     	; 0xc59e <draw_menu_stars+0xcc>
	   		}
	   		else
	   		{
				SetTile(x,y,ran(0,7)+star);
    c588:	80 e0       	ldi	r24, 0x00	; 0
    c58a:	90 e0       	ldi	r25, 0x00	; 0
    c58c:	67 e0       	ldi	r22, 0x07	; 7
    c58e:	70 e0       	ldi	r23, 0x00	; 0
    c590:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    c594:	ac 01       	movw	r20, r24
    c596:	4c 0d       	add	r20, r12
    c598:	5d 1d       	adc	r21, r13
    c59a:	8c 2f       	mov	r24, r28
    c59c:	60 2f       	mov	r22, r16
    c59e:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <SetTile>
{
	s16 i,x,y;
	u8 star = TSPRITE_GET_INDEX( STAR_00_TSP,0 );


	for(i=0;i<2;i++)
    c5a2:	08 94       	sec
    c5a4:	e1 1c       	adc	r14, r1
    c5a6:	f1 1c       	adc	r15, r1
    c5a8:	f2 e0       	ldi	r31, 0x02	; 2
    c5aa:	ef 16       	cp	r14, r31
    c5ac:	f1 04       	cpc	r15, r1
    c5ae:	09 f0       	breq	.+2      	; 0xc5b2 <draw_menu_stars+0xe0>
    c5b0:	ad cf       	rjmp	.-166    	; 0xc50c <draw_menu_stars+0x3a>

#ifdef CHEAT
	ugo(0,0);
	print_decimal(MAX_TILES,3);
#endif
}
    c5b2:	df 91       	pop	r29
    c5b4:	cf 91       	pop	r28
    c5b6:	1f 91       	pop	r17
    c5b8:	0f 91       	pop	r16
    c5ba:	ff 90       	pop	r15
    c5bc:	ef 90       	pop	r14
    c5be:	df 90       	pop	r13
    c5c0:	cf 90       	pop	r12
    c5c2:	bf 90       	pop	r11
    c5c4:	af 90       	pop	r10
    c5c6:	9f 90       	pop	r9
    c5c8:	08 95       	ret

0000c5ca <baddie_get_spawn_time>:


s16		baddie_get_spawn_time()
{
	s16 x,y;
	x=10-level[current_player]-(g_frame>>6);
    c5ca:	e0 91 ad 0e 	lds	r30, 0x0EAD
    c5ce:	ff 27       	eor	r31, r31
    c5d0:	e7 fd       	sbrc	r30, 7
    c5d2:	f0 95       	com	r31
    c5d4:	ea 52       	subi	r30, 0x2A	; 42
    c5d6:	f1 4f       	sbci	r31, 0xF1	; 241
    c5d8:	80 81       	ld	r24, Z
    c5da:	48 2f       	mov	r20, r24
    c5dc:	50 e0       	ldi	r21, 0x00	; 0
    c5de:	20 91 18 10 	lds	r18, 0x1018
    c5e2:	30 91 19 10 	lds	r19, 0x1019
    c5e6:	66 e0       	ldi	r22, 0x06	; 6
    c5e8:	35 95       	asr	r19
    c5ea:	27 95       	ror	r18
    c5ec:	6a 95       	dec	r22
    c5ee:	e1 f7       	brne	.-8      	; 0xc5e8 <baddie_get_spawn_time+0x1e>
	y=30-level[current_player]-(g_frame>>6);
    c5f0:	6e e1       	ldi	r22, 0x1E	; 30
    c5f2:	70 e0       	ldi	r23, 0x00	; 0
    c5f4:	64 1b       	sub	r22, r20
    c5f6:	75 0b       	sbc	r23, r21
    c5f8:	62 1b       	sub	r22, r18
    c5fa:	73 0b       	sbc	r23, r19
	if (x<0) x=0;
	if (y<1) y=1;
    c5fc:	16 16       	cp	r1, r22
    c5fe:	17 06       	cpc	r1, r23
    c600:	14 f0       	brlt	.+4      	; 0xc606 <baddie_get_spawn_time+0x3c>
    c602:	61 e0       	ldi	r22, 0x01	; 1
    c604:	70 e0       	ldi	r23, 0x00	; 0


s16		baddie_get_spawn_time()
{
	s16 x,y;
	x=10-level[current_player]-(g_frame>>6);
    c606:	8a e0       	ldi	r24, 0x0A	; 10
    c608:	90 e0       	ldi	r25, 0x00	; 0
    c60a:	84 1b       	sub	r24, r20
    c60c:	95 0b       	sbc	r25, r21
    c60e:	82 1b       	sub	r24, r18
    c610:	93 0b       	sbc	r25, r19
	y=30-level[current_player]-(g_frame>>6);
	if (x<0) x=0;
	if (y<1) y=1;
	return( ran(x,y)*SECOND+1 );
    c612:	97 ff       	sbrs	r25, 7
    c614:	02 c0       	rjmp	.+4      	; 0xc61a <baddie_get_spawn_time+0x50>
    c616:	80 e0       	ldi	r24, 0x00	; 0
    c618:	90 e0       	ldi	r25, 0x00	; 0
    c61a:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    c61e:	2c e3       	ldi	r18, 0x3C	; 60
    c620:	30 e0       	ldi	r19, 0x00	; 0
    c622:	a9 01       	movw	r20, r18
    c624:	84 9f       	mul	r24, r20
    c626:	90 01       	movw	r18, r0
    c628:	85 9f       	mul	r24, r21
    c62a:	30 0d       	add	r19, r0
    c62c:	94 9f       	mul	r25, r20
    c62e:	30 0d       	add	r19, r0
    c630:	11 24       	eor	r1, r1
    c632:	2f 5f       	subi	r18, 0xFF	; 255
    c634:	3f 4f       	sbci	r19, 0xFF	; 255
}
    c636:	c9 01       	movw	r24, r18
    c638:	08 95       	ret

0000c63a <start_baddie>:




void	start_baddie(s16 idx)
{
    c63a:	0f 93       	push	r16
    c63c:	1f 93       	push	r17
    c63e:	8c 01       	movw	r16, r24
	baddies_active++;
    c640:	80 91 b9 0e 	lds	r24, 0x0EB9
    c644:	8f 5f       	subi	r24, 0xFF	; 255
    c646:	80 93 b9 0e 	sts	0x0EB9, r24
	baddie_ctrl[idx] = BADDIE_EGG;
    c64a:	f8 01       	movw	r30, r16
    c64c:	e2 56       	subi	r30, 0x62	; 98
    c64e:	f1 4f       	sbci	r31, 0xF1	; 241
    c650:	81 e0       	ldi	r24, 0x01	; 1
    c652:	80 83       	st	Z, r24
	baddie_dir[idx] = DIR_DOWN;
    c654:	f8 01       	movw	r30, r16
    c656:	e7 5f       	subi	r30, 0xF7	; 247
    c658:	ff 4e       	sbci	r31, 0xEF	; 239
    c65a:	82 e0       	ldi	r24, 0x02	; 2
    c65c:	80 83       	st	Z, r24
	baddie_trigger[idx] = baddie_get_spawn_time();	//ran(TIME_EGG_START_LO,TIME_EGG_START_HI);
    c65e:	0e 94 e5 62 	call	0xc5ca	; 0xc5ca <baddie_get_spawn_time>
    c662:	00 0f       	add	r16, r16
    c664:	11 1f       	adc	r17, r17
    c666:	00 51       	subi	r16, 0x10	; 16
    c668:	11 4f       	sbci	r17, 0xF1	; 241
    c66a:	f8 01       	movw	r30, r16
    c66c:	91 83       	std	Z+1, r25	; 0x01
    c66e:	80 83       	st	Z, r24
}
    c670:	1f 91       	pop	r17
    c672:	0f 91       	pop	r16
    c674:	08 95       	ret

0000c676 <restart_level>:
	restart_level();
}


void restart_level()
{
    c676:	9f 92       	push	r9
    c678:	af 92       	push	r10
    c67a:	bf 92       	push	r11
    c67c:	cf 92       	push	r12
    c67e:	df 92       	push	r13
    c680:	ef 92       	push	r14
    c682:	ff 92       	push	r15
    c684:	0f 93       	push	r16
    c686:	1f 93       	push	r17
    c688:	cf 93       	push	r28
    c68a:	df 93       	push	r29
	s16 xm,ym;
	u8 i;
	u8 x,y;

  	player_ctrl=1;
    c68c:	81 e0       	ldi	r24, 0x01	; 1
    c68e:	80 93 dd 0e 	sts	0x0EDD, r24
	block_ctrl=0;
    c692:	10 92 ae 0e 	sts	0x0EAE, r1
	snoblock_ctrl=0;
    c696:	10 92 ac 0e 	sts	0x0EAC, r1
	block_index=255;
    c69a:	8f ef       	ldi	r24, 0xFF	; 255
    c69c:	80 93 a5 0e 	sts	0x0EA5, r24
	memset(baddie_ctrl,0,sizeof(baddie_ctrl));
    c6a0:	83 e0       	ldi	r24, 0x03	; 3
    c6a2:	ee e9       	ldi	r30, 0x9E	; 158
    c6a4:	fe e0       	ldi	r31, 0x0E	; 14
    c6a6:	df 01       	movw	r26, r30
    c6a8:	1d 92       	st	X+, r1
    c6aa:	8a 95       	dec	r24
    c6ac:	e9 f7       	brne	.-6      	; 0xc6a8 <restart_level+0x32>
	baddies_active=0;
    c6ae:	10 92 b9 0e 	sts	0x0EB9, r1

void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
	if (y<0|| y>=MAPH) return;
	rmap(x,y) = a;
    c6b2:	10 92 51 0f 	sts	0x0F51, r1

	// place player
	xm=MAPW/2;
	ym=MAPH/2;
	set_map(xm,ym,0);
	player_x=MUL16(xm);
    c6b6:	80 e6       	ldi	r24, 0x60	; 96
    c6b8:	90 e0       	ldi	r25, 0x00	; 0
    c6ba:	90 93 fd 0f 	sts	0x0FFD, r25
    c6be:	80 93 fc 0f 	sts	0x0FFC, r24
	player_y=MUL16(ym);
    c6c2:	80 e5       	ldi	r24, 0x50	; 80
    c6c4:	90 e0       	ldi	r25, 0x00	; 0
    c6c6:	90 93 88 0e 	sts	0x0E88, r25
    c6ca:	80 93 87 0e 	sts	0x0E87, r24
    c6ce:	b6 ea       	ldi	r27, 0xA6	; 166
    c6d0:	ab 2e       	mov	r10, r27
    c6d2:	be e0       	ldi	r27, 0x0E	; 14
    c6d4:	bb 2e       	mov	r11, r27
    c6d6:	ad e0       	ldi	r26, 0x0D	; 13
    c6d8:	ca 2e       	mov	r12, r26
    c6da:	a0 e1       	ldi	r26, 0x10	; 16
    c6dc:	da 2e       	mov	r13, r26
    c6de:	ee 24       	eor	r14, r14
    c6e0:	ff 24       	eor	r15, r15
again1:
		x=ran(0,MAPW-1);
		y=ran(0,MAPH-1);
		if ((x==xm && y==ym) || rmap(x,y)!=0) goto again1;
		start_baddie(i);
		baddie_ctrl[i]=1;
    c6e2:	99 24       	eor	r9, r9
    c6e4:	93 94       	inc	r9


	 for(i=0;i<MAX_BADDIE;i++)
	 {
again1:
		x=ran(0,MAPW-1);
    c6e6:	80 e0       	ldi	r24, 0x00	; 0
    c6e8:	90 e0       	ldi	r25, 0x00	; 0
    c6ea:	6c e0       	ldi	r22, 0x0C	; 12
    c6ec:	70 e0       	ldi	r23, 0x00	; 0
    c6ee:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    c6f2:	18 2f       	mov	r17, r24
		y=ran(0,MAPH-1);
    c6f4:	80 e0       	ldi	r24, 0x00	; 0
    c6f6:	90 e0       	ldi	r25, 0x00	; 0
    c6f8:	6a e0       	ldi	r22, 0x0A	; 10
    c6fa:	70 e0       	ldi	r23, 0x00	; 0
    c6fc:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
		if ((x==xm && y==ym) || rmap(x,y)!=0) goto again1;
    c700:	16 30       	cpi	r17, 0x06	; 6
    c702:	11 f4       	brne	.+4      	; 0xc708 <restart_level+0x92>
    c704:	85 30       	cpi	r24, 0x05	; 5
    c706:	79 f3       	breq	.-34     	; 0xc6e6 <restart_level+0x70>
    c708:	01 2f       	mov	r16, r17
    c70a:	10 e0       	ldi	r17, 0x00	; 0
    c70c:	c8 2f       	mov	r28, r24
    c70e:	d0 e0       	ldi	r29, 0x00	; 0
    c710:	f4 e0       	ldi	r31, 0x04	; 4
    c712:	cc 0f       	add	r28, r28
    c714:	dd 1f       	adc	r29, r29
    c716:	fa 95       	dec	r31
    c718:	e1 f7       	brne	.-8      	; 0xc712 <restart_level+0x9c>
    c71a:	fe 01       	movw	r30, r28
    c71c:	e5 50       	subi	r30, 0x05	; 5
    c71e:	f1 4f       	sbci	r31, 0xF1	; 241
    c720:	e0 0f       	add	r30, r16
    c722:	f1 1f       	adc	r31, r17
    c724:	80 81       	ld	r24, Z
    c726:	88 23       	and	r24, r24
    c728:	f1 f6       	brne	.-68     	; 0xc6e6 <restart_level+0x70>
		start_baddie(i);
    c72a:	c7 01       	movw	r24, r14
    c72c:	0e 94 1d 63 	call	0xc63a	; 0xc63a <start_baddie>
		baddie_ctrl[i]=1;
    c730:	f7 01       	movw	r30, r14
    c732:	e2 56       	subi	r30, 0x62	; 98
    c734:	f1 4f       	sbci	r31, 0xF1	; 241
    c736:	90 82       	st	Z, r9
		baddie_x[i]=MUL16(x);
    c738:	e4 e0       	ldi	r30, 0x04	; 4
    c73a:	00 0f       	add	r16, r16
    c73c:	11 1f       	adc	r17, r17
    c73e:	ea 95       	dec	r30
    c740:	e1 f7       	brne	.-8      	; 0xc73a <restart_level+0xc4>
    c742:	f5 01       	movw	r30, r10
    c744:	01 93       	st	Z+, r16
    c746:	11 93       	st	Z+, r17
    c748:	5f 01       	movw	r10, r30
		baddie_y[i]=MUL16(y);
    c74a:	d6 01       	movw	r26, r12
    c74c:	cd 93       	st	X+, r28
    c74e:	dd 93       	st	X+, r29
    c750:	6d 01       	movw	r12, r26
		baddie_frame[i]=0;
    c752:	f7 01       	movw	r30, r14
    c754:	ee 54       	subi	r30, 0x4E	; 78
    c756:	f1 4f       	sbci	r31, 0xF1	; 241
    c758:	10 82       	st	Z, r1
    c75a:	08 94       	sec
    c75c:	e1 1c       	adc	r14, r1
    c75e:	f1 1c       	adc	r15, r1
	set_map(xm,ym,0);
	player_x=MUL16(xm);
	player_y=MUL16(ym);


	 for(i=0;i<MAX_BADDIE;i++)
    c760:	b3 e0       	ldi	r27, 0x03	; 3
    c762:	eb 16       	cp	r14, r27
    c764:	f1 04       	cpc	r15, r1
    c766:	09 f0       	breq	.+2      	; 0xc76a <restart_level+0xf4>
    c768:	be cf       	rjmp	.-132    	; 0xc6e6 <restart_level+0x70>
		baddie_y[i]=MUL16(y);
		baddie_frame[i]=0;
	 }


	g_hitwall=0;
    c76a:	10 92 e9 0e 	sts	0x0EE9, r1
	g_oldwall=0;
    c76e:	10 92 98 0e 	sts	0x0E98, r1
	player_dir=2;
    c772:	82 e0       	ldi	r24, 0x02	; 2
    c774:	80 93 83 0e 	sts	0x0E83, r24
	player_frame=0;
    c778:	10 92 b6 0e 	sts	0x0EB6, r1
	player_kicked=0;
    c77c:	10 92 25 10 	sts	0x1025, r1

   //	WaitVsync(4*60);	//(100);
}
    c780:	df 91       	pop	r29
    c782:	cf 91       	pop	r28
    c784:	1f 91       	pop	r17
    c786:	0f 91       	pop	r16
    c788:	ff 90       	pop	r15
    c78a:	ef 90       	pop	r14
    c78c:	df 90       	pop	r13
    c78e:	cf 90       	pop	r12
    c790:	bf 90       	pop	r11
    c792:	af 90       	pop	r10
    c794:	9f 90       	pop	r9
    c796:	08 95       	ret

0000c798 <new_level>:

void new_level()
{
	u8 i;

	supa_done=4;
    c798:	84 e0       	ldi	r24, 0x04	; 4
    c79a:	80 93 bb 0e 	sts	0x0EBB, r24
	pend_gtimer=0;
    c79e:	10 92 b8 0e 	sts	0x0EB8, r1
	snoblock_ctrl=0;
    c7a2:	10 92 ac 0e 	sts	0x0EAC, r1
	block_ctrl=0;
    c7a6:	10 92 ae 0e 	sts	0x0EAE, r1

	srand(1000-level[current_player]);
    c7aa:	e0 91 ad 0e 	lds	r30, 0x0EAD
    c7ae:	ff 27       	eor	r31, r31
    c7b0:	e7 fd       	sbrc	r30, 7
    c7b2:	f0 95       	com	r31
    c7b4:	ea 52       	subi	r30, 0x2A	; 42
    c7b6:	f1 4f       	sbci	r31, 0xF1	; 241
    c7b8:	20 81       	ld	r18, Z
    c7ba:	88 ee       	ldi	r24, 0xE8	; 232
    c7bc:	93 e0       	ldi	r25, 0x03	; 3
    c7be:	82 1b       	sub	r24, r18
    c7c0:	91 09       	sbc	r25, r1
    c7c2:	0e 94 fa 6e 	call	0xddf4	; 0xddf4 <srand>
	scores=0;
    c7c6:	10 92 8d 0e 	sts	0x0E8D, r1
    c7ca:	10 92 8c 0e 	sts	0x0E8C, r1
	g_oxygen = 18;
    c7ce:	82 e1       	ldi	r24, 0x12	; 18
    c7d0:	80 93 b0 0e 	sts	0x0EB0, r24
	supa_count=0;
    c7d4:	10 92 e3 0e 	sts	0x0EE3, r1

	for(i=0;i<4;i++)
		supa_trigger[i]=0;
    c7d8:	10 92 13 10 	sts	0x1013, r1
    c7dc:	10 92 14 10 	sts	0x1014, r1
    c7e0:	10 92 15 10 	sts	0x1015, r1
    c7e4:	10 92 16 10 	sts	0x1016, r1

	setup_collision();
    c7e8:	0e 94 b1 55 	call	0xab62	; 0xab62 <setup_collision>

	restart_level();
    c7ec:	0e 94 3b 63 	call	0xc676	; 0xc676 <restart_level>
}
    c7f0:	08 95       	ret

0000c7f2 <new_game>:



void new_game()
{
	snoblock_ctrl=0;
    c7f2:	10 92 ac 0e 	sts	0x0EAC, r1
	block_ctrl=0;
    c7f6:	10 92 ae 0e 	sts	0x0EAE, r1
  	current_player=0;
    c7fa:	10 92 ad 0e 	sts	0x0EAD, r1
#ifdef TWOPLAYER
    score[0]=0;
    c7fe:	10 92 c4 0e 	sts	0x0EC4, r1
    c802:	10 92 c3 0e 	sts	0x0EC3, r1
	score[1]=0;
    c806:	10 92 c6 0e 	sts	0x0EC6, r1
    c80a:	10 92 c5 0e 	sts	0x0EC5, r1
	lives[0]=START_LIVES;
    c80e:	83 e0       	ldi	r24, 0x03	; 3
    c810:	80 93 f8 0e 	sts	0x0EF8, r24
	lives[1]=START_LIVES;
    c814:	80 93 f9 0e 	sts	0x0EF9, r24
	level[0]=0;
    c818:	10 92 d6 0e 	sts	0x0ED6, r1
	level[1]=0;
    c81c:	10 92 d7 0e 	sts	0x0ED7, r1
#else
  	score[0]=0;
	lives[0]=START_LIVES;
	level[0]=0;
#endif
	new_level();
    c820:	0e 94 cc 63 	call	0xc798	; 0xc798 <new_level>
}
    c824:	08 95       	ret

0000c826 <do_baddie2>:
	snoblock_ctrl=1;
	set_map(DIV16(x),DIV16(y),BLOCK_INVISIBLE);
}

void	do_baddie2(s16 idx)
{
    c826:	af 92       	push	r10
    c828:	bf 92       	push	r11
    c82a:	cf 92       	push	r12
    c82c:	df 92       	push	r13
    c82e:	ef 92       	push	r14
    c830:	ff 92       	push	r15
    c832:	0f 93       	push	r16
    c834:	1f 93       	push	r17
    c836:	cf 93       	push	r28
    c838:	df 93       	push	r29
    c83a:	8c 01       	movw	r16, r24

	s16 ok;
	s16 x,y;
	s16 k;

	x=DIV16(baddie_x[idx]+8);
    c83c:	fc 01       	movw	r30, r24
    c83e:	ee 0f       	add	r30, r30
    c840:	ff 1f       	adc	r31, r31
    c842:	df 01       	movw	r26, r30
    c844:	aa 55       	subi	r26, 0x5A	; 90
    c846:	b1 4f       	sbci	r27, 0xF1	; 241
    c848:	ed 90       	ld	r14, X+
    c84a:	fc 90       	ld	r15, X
    c84c:	11 97       	sbiw	r26, 0x01	; 1
    c84e:	88 e0       	ldi	r24, 0x08	; 8
    c850:	90 e0       	ldi	r25, 0x00	; 0
    c852:	e8 0e       	add	r14, r24
    c854:	f9 1e       	adc	r15, r25
    c856:	54 e0       	ldi	r21, 0x04	; 4
    c858:	f5 94       	asr	r15
    c85a:	e7 94       	ror	r14
    c85c:	5a 95       	dec	r21
    c85e:	e1 f7       	brne	.-8      	; 0xc858 <do_baddie2+0x32>
	y=DIV16(baddie_y[idx]+8);
    c860:	e3 5f       	subi	r30, 0xF3	; 243
    c862:	ff 4e       	sbci	r31, 0xEF	; 239
    c864:	c0 81       	ld	r28, Z
    c866:	d1 81       	ldd	r29, Z+1	; 0x01
    c868:	28 96       	adiw	r28, 0x08	; 8
    c86a:	44 e0       	ldi	r20, 0x04	; 4
    c86c:	d5 95       	asr	r29
    c86e:	c7 95       	ror	r28
    c870:	4a 95       	dec	r20
    c872:	e1 f7       	brne	.-8      	; 0xc86c <do_baddie2+0x46>

	// force position
	baddie_x[idx]=MUL16(x);
    c874:	c7 01       	movw	r24, r14
    c876:	34 e0       	ldi	r19, 0x04	; 4
    c878:	88 0f       	add	r24, r24
    c87a:	99 1f       	adc	r25, r25
    c87c:	3a 95       	dec	r19
    c87e:	e1 f7       	brne	.-8      	; 0xc878 <do_baddie2+0x52>
    c880:	8d 93       	st	X+, r24
    c882:	9c 93       	st	X, r25
	baddie_y[idx]=MUL16(y);
    c884:	ce 01       	movw	r24, r28
    c886:	24 e0       	ldi	r18, 0x04	; 4
    c888:	88 0f       	add	r24, r24
    c88a:	99 1f       	adc	r25, r25
    c88c:	2a 95       	dec	r18
    c88e:	e1 f7       	brne	.-8      	; 0xc888 <do_baddie2+0x62>
    c890:	91 83       	std	Z+1, r25	; 0x01
    c892:	80 83       	st	Z, r24


	if (check_stun(idx)) return;
    c894:	c8 01       	movw	r24, r16
    c896:	0e 94 77 5f 	call	0xbeee	; 0xbeee <check_stun>
    c89a:	89 2b       	or	r24, r25
    c89c:	09 f0       	breq	.+2      	; 0xc8a0 <do_baddie2+0x7a>
    c89e:	4c c0       	rjmp	.+152    	; 0xc938 <do_baddie2+0x112>

	baddie_frame[idx]++;
    c8a0:	f8 01       	movw	r30, r16
    c8a2:	ee 54       	subi	r30, 0x4E	; 78
    c8a4:	f1 4f       	sbci	r31, 0xF1	; 241
    c8a6:	80 81       	ld	r24, Z
    c8a8:	8f 5f       	subi	r24, 0xFF	; 255
    c8aa:	80 83       	st	Z, r24

    k=baddie_dir[idx];
    c8ac:	99 e0       	ldi	r25, 0x09	; 9
    c8ae:	a9 2e       	mov	r10, r25
    c8b0:	90 e1       	ldi	r25, 0x10	; 16
    c8b2:	b9 2e       	mov	r11, r25
    c8b4:	a0 0e       	add	r10, r16
    c8b6:	b1 1e       	adc	r11, r17
    c8b8:	f5 01       	movw	r30, r10
    c8ba:	80 81       	ld	r24, Z
    c8bc:	c8 2e       	mov	r12, r24
    c8be:	dd 24       	eor	r13, r13
	ok=read_map(x+spd[k].x,y+spd[k].y);
    c8c0:	f6 01       	movw	r30, r12
    c8c2:	ee 0f       	add	r30, r30
    c8c4:	ff 1f       	adc	r31, r31
    c8c6:	ef 5f       	subi	r30, 0xFF	; 255
    c8c8:	fe 4f       	sbci	r31, 0xFE	; 254
    c8ca:	20 81       	ld	r18, Z
    c8cc:	33 27       	eor	r19, r19
    c8ce:	27 fd       	sbrc	r18, 7
    c8d0:	30 95       	com	r19
    c8d2:	81 81       	ldd	r24, Z+1	; 0x01
    c8d4:	99 27       	eor	r25, r25
    c8d6:	87 fd       	sbrc	r24, 7
    c8d8:	90 95       	com	r25
    c8da:	c8 0f       	add	r28, r24
    c8dc:	d9 1f       	adc	r29, r25
    c8de:	c7 01       	movw	r24, r14
    c8e0:	82 0f       	add	r24, r18
    c8e2:	93 1f       	adc	r25, r19
    c8e4:	be 01       	movw	r22, r28
    c8e6:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
    // ok for snobee to move
	if (ok==BLOCK_FLOOR || ok==BLOCK_HOLE)
    c8ea:	00 97       	sbiw	r24, 0x00	; 0
    c8ec:	11 f0       	breq	.+4      	; 0xc8f2 <do_baddie2+0xcc>
    c8ee:	09 97       	sbiw	r24, 0x09	; 9
    c8f0:	d9 f4       	brne	.+54     	; 0xc928 <do_baddie2+0x102>
	{
		baddie_ctrl[idx]=BADDIE_MOVE;
    c8f2:	f8 01       	movw	r30, r16
    c8f4:	e2 56       	subi	r30, 0x62	; 98
    c8f6:	f1 4f       	sbci	r31, 0xF1	; 241
    c8f8:	83 e0       	ldi	r24, 0x03	; 3
    c8fa:	80 83       	st	Z, r24
		baddie_gtimer[idx]=YGAP;
    c8fc:	f8 01       	movw	r30, r16
    c8fe:	e0 53       	subi	r30, 0x30	; 48
    c900:	f1 4f       	sbci	r31, 0xF1	; 241
    c902:	80 e1       	ldi	r24, 0x10	; 16
    c904:	80 83       	st	Z, r24
		if (k==1 || k==3) baddie_gtimer[idx]=XGAP;
    c906:	f1 e0       	ldi	r31, 0x01	; 1
    c908:	cf 16       	cp	r12, r31
    c90a:	d1 04       	cpc	r13, r1
    c90c:	21 f0       	breq	.+8      	; 0xc916 <do_baddie2+0xf0>
    c90e:	83 e0       	ldi	r24, 0x03	; 3
    c910:	c8 16       	cp	r12, r24
    c912:	d1 04       	cpc	r13, r1
    c914:	29 f4       	brne	.+10     	; 0xc920 <do_baddie2+0xfa>
    c916:	f8 01       	movw	r30, r16
    c918:	e0 53       	subi	r30, 0x30	; 48
    c91a:	f1 4f       	sbci	r31, 0xF1	; 241
    c91c:	80 e1       	ldi	r24, 0x10	; 16
    c91e:	80 83       	st	Z, r24
		baddie_move(idx);
    c920:	c8 01       	movw	r24, r16
    c922:	0e 94 c9 5f 	call	0xbf92	; 0xbf92 <baddie_move>
    c926:	08 c0       	rjmp	.+16     	; 0xc938 <do_baddie2+0x112>
		start_snoblock(MUL16(x+spd[k].x),MUL16(y+spd[k].y));
		return;
	}
	*/
	// pick a random direction
	baddie_dir[idx]=(u8) ran(0,3);
    c928:	80 e0       	ldi	r24, 0x00	; 0
    c92a:	90 e0       	ldi	r25, 0x00	; 0
    c92c:	63 e0       	ldi	r22, 0x03	; 3
    c92e:	70 e0       	ldi	r23, 0x00	; 0
    c930:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    c934:	f5 01       	movw	r30, r10
    c936:	80 83       	st	Z, r24
}
    c938:	df 91       	pop	r29
    c93a:	cf 91       	pop	r28
    c93c:	1f 91       	pop	r17
    c93e:	0f 91       	pop	r16
    c940:	ff 90       	pop	r15
    c942:	ef 90       	pop	r14
    c944:	df 90       	pop	r13
    c946:	cf 90       	pop	r12
    c948:	bf 90       	pop	r11
    c94a:	af 90       	pop	r10
    c94c:	08 95       	ret

0000c94e <draw_background>:
		}
	}
}

void	draw_background()
{
    c94e:	2f 92       	push	r2
    c950:	3f 92       	push	r3
    c952:	4f 92       	push	r4
    c954:	5f 92       	push	r5
    c956:	6f 92       	push	r6
    c958:	7f 92       	push	r7
    c95a:	8f 92       	push	r8
    c95c:	9f 92       	push	r9
    c95e:	af 92       	push	r10
    c960:	bf 92       	push	r11
    c962:	cf 92       	push	r12
    c964:	df 92       	push	r13
    c966:	ef 92       	push	r14
    c968:	ff 92       	push	r15
    c96a:	0f 93       	push	r16
    c96c:	1f 93       	push	r17
    c96e:	df 93       	push	r29
    c970:	cf 93       	push	r28
    c972:	cd b7       	in	r28, 0x3d	; 61
    c974:	de b7       	in	r29, 0x3e	; 62
    c976:	2d 97       	sbiw	r28, 0x0d	; 13
    c978:	0f b6       	in	r0, 0x3f	; 63
    c97a:	f8 94       	cli
    c97c:	de bf       	out	0x3e, r29	; 62
    c97e:	0f be       	out	0x3f, r0	; 63
    c980:	cd bf       	out	0x3d, r28	; 61
	u8 a;
	u8 lf,rg,up,dn;
	u8 uplf,uprg;
    u8 dnlf,dnrg;

	SelectTileset(TILESET_GAME);
    c982:	81 e0       	ldi	r24, 0x01	; 1
    c984:	0e 94 3a 5c 	call	0xb874	; 0xb874 <SelectTileset>
	dirty = 0xff;
    c988:	8f ef       	ldi	r24, 0xFF	; 255
    c98a:	80 93 7e 0e 	sts	0x0E7E, r24
    c98e:	88 24       	eor	r8, r8
    c990:	99 24       	eor	r9, r9
    c992:	46 c1       	rjmp	.+652    	; 0xcc20 <draw_background+0x2d2>
    c994:	12 01       	movw	r2, r4
	for(y=0;y<MAPH+2;y++)
	for(x=0;x<MAPW+2;x++)
	{
		xt=TOPX+(x<<1)-1;
		yt=TOPY+(y<<1)-1;
		xt<<=3;
    c996:	71 01       	movw	r14, r2
    c998:	f4 e0       	ldi	r31, 0x04	; 4
    c99a:	ee 0c       	add	r14, r14
    c99c:	ff 1c       	adc	r15, r15
    c99e:	fa 95       	dec	r31
    c9a0:	e1 f7       	brne	.-8      	; 0xc99a <draw_background+0x4c>
		yt<<=3;

		a = get_map(x,y);
    c9a2:	c1 01       	movw	r24, r2
    c9a4:	b4 01       	movw	r22, r8
    c9a6:	0e 94 14 55 	call	0xaa28	; 0xaa28 <get_map>
    c9aa:	08 2f       	mov	r16, r24
    c9ac:	91 01       	movw	r18, r2
    c9ae:	21 50       	subi	r18, 0x01	; 1
    c9b0:	30 40       	sbci	r19, 0x00	; 0
    c9b2:	3f 83       	std	Y+7, r19	; 0x07
    c9b4:	2e 83       	std	Y+6, r18	; 0x06
		lf = get_mapf(x-1,y);
    c9b6:	c9 01       	movw	r24, r18
    c9b8:	b4 01       	movw	r22, r8
    c9ba:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    c9be:	8d 83       	std	Y+5, r24	; 0x05
		rg = get_mapf(x+1,y);
    c9c0:	21 01       	movw	r4, r2
    c9c2:	08 94       	sec
    c9c4:	41 1c       	adc	r4, r1
    c9c6:	51 1c       	adc	r5, r1
    c9c8:	c2 01       	movw	r24, r4
    c9ca:	b4 01       	movw	r22, r8
    c9cc:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    c9d0:	8c 83       	std	Y+4, r24	; 0x04
		up = get_mapf(x,y-1);
    c9d2:	c1 01       	movw	r24, r2
    c9d4:	68 85       	ldd	r22, Y+8	; 0x08
    c9d6:	79 85       	ldd	r23, Y+9	; 0x09
    c9d8:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    c9dc:	78 2e       	mov	r7, r24
		dn = get_mapf(x,y+1);
    c9de:	c1 01       	movw	r24, r2
    c9e0:	6a 85       	ldd	r22, Y+10	; 0x0a
    c9e2:	7b 85       	ldd	r23, Y+11	; 0x0b
    c9e4:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    c9e8:	38 2e       	mov	r3, r24

		uplf = get_mapf(x-1,y-1);
    c9ea:	8e 81       	ldd	r24, Y+6	; 0x06
    c9ec:	9f 81       	ldd	r25, Y+7	; 0x07
    c9ee:	68 85       	ldd	r22, Y+8	; 0x08
    c9f0:	79 85       	ldd	r23, Y+9	; 0x09
    c9f2:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    c9f6:	68 2e       	mov	r6, r24
		uprg = get_mapf(x+1,y-1);
    c9f8:	c2 01       	movw	r24, r4
    c9fa:	68 85       	ldd	r22, Y+8	; 0x08
    c9fc:	79 85       	ldd	r23, Y+9	; 0x09
    c9fe:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    ca02:	28 2e       	mov	r2, r24
		dnlf = get_mapf(x-1,y+1);
    ca04:	8e 81       	ldd	r24, Y+6	; 0x06
    ca06:	9f 81       	ldd	r25, Y+7	; 0x07
    ca08:	6a 85       	ldd	r22, Y+10	; 0x0a
    ca0a:	7b 85       	ldd	r23, Y+11	; 0x0b
    ca0c:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    ca10:	18 2f       	mov	r17, r24
		dnrg = get_mapf(x+1,y+1);
    ca12:	c2 01       	movw	r24, r4
    ca14:	6a 85       	ldd	r22, Y+10	; 0x0a
    ca16:	7b 85       	ldd	r23, Y+11	; 0x0b
    ca18:	0e 94 4c 55 	call	0xaa98	; 0xaa98 <get_mapf>
    ca1c:	8b 83       	std	Y+3, r24	; 0x03


		if (a==MAP_FLOOR)
    ca1e:	02 30       	cpi	r16, 0x02	; 2
    ca20:	19 f4       	brne	.+6      	; 0xca28 <draw_background+0xda>
	   		TSPRITE(FLOOR_TILE_D_TSP,xt,yt);
    ca22:	86 e2       	ldi	r24, 0x26	; 38
    ca24:	90 e0       	ldi	r25, 0x00	; 0
    ca26:	ec c0       	rjmp	.+472    	; 0xcc00 <draw_background+0x2b2>

		if (a==MAP_ENERGY)
    ca28:	01 30       	cpi	r16, 0x01	; 1
    ca2a:	09 f0       	breq	.+2      	; 0xca2e <draw_background+0xe0>
    ca2c:	a4 c0       	rjmp	.+328    	; 0xcb76 <draw_background+0x228>
		{
			// c1
			if (lf == MAP_FLOOR && up==MAP_FLOOR)
    ca2e:	3d 81       	ldd	r19, Y+5	; 0x05
    ca30:	32 30       	cpi	r19, 0x02	; 2
    ca32:	49 f4       	brne	.+18     	; 0xca46 <draw_background+0xf8>
    ca34:	82 e0       	ldi	r24, 0x02	; 2
    ca36:	78 16       	cp	r7, r24
    ca38:	19 f4       	brne	.+6      	; 0xca40 <draw_background+0xf2>
					TSPRITE(BORDER_C1_TSP,xt,yt);
    ca3a:	8d e0       	ldi	r24, 0x0D	; 13
    ca3c:	90 e0       	ldi	r25, 0x00	; 0
    ca3e:	16 c0       	rjmp	.+44     	; 0xca6c <draw_background+0x11e>
			else if (lf == MAP_FLOOR)
					TSPRITE(BORDER_SIDE_TSP,xt,yt);
    ca40:	81 e1       	ldi	r24, 0x11	; 17
    ca42:	90 e0       	ldi	r25, 0x00	; 0
    ca44:	13 c0       	rjmp	.+38     	; 0xca6c <draw_background+0x11e>
		    else if (up == MAP_FLOOR)
    ca46:	92 e0       	ldi	r25, 0x02	; 2
    ca48:	79 16       	cp	r7, r25
    ca4a:	19 f4       	brne	.+6      	; 0xca52 <draw_background+0x104>
					TSPRITE(BORDER_TOP_TSP,xt,yt);
    ca4c:	82 e1       	ldi	r24, 0x12	; 18
    ca4e:	90 e0       	ldi	r25, 0x00	; 0
    ca50:	0d c0       	rjmp	.+26     	; 0xca6c <draw_background+0x11e>
			else  if (uplf == MAP_FLOOR)
    ca52:	e2 e0       	ldi	r30, 0x02	; 2
    ca54:	6e 16       	cp	r6, r30
    ca56:	19 f4       	brne	.+6      	; 0xca5e <draw_background+0x110>
	    			TSPRITE(BORDER_C4_TSP,xt,yt);
    ca58:	80 e1       	ldi	r24, 0x10	; 16
    ca5a:	90 e0       	ldi	r25, 0x00	; 0
    ca5c:	07 c0       	rjmp	.+14     	; 0xca6c <draw_background+0x11e>
			else
		    		TSPRITE(STAR_00_TSP+ran(0,7),xt,yt);
    ca5e:	80 e0       	ldi	r24, 0x00	; 0
    ca60:	90 e0       	ldi	r25, 0x00	; 0
    ca62:	67 e0       	ldi	r22, 0x07	; 7
    ca64:	70 e0       	ldi	r23, 0x00	; 0
    ca66:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    ca6a:	c3 96       	adiw	r24, 0x33	; 51
    ca6c:	b7 01       	movw	r22, r14
    ca6e:	a6 01       	movw	r20, r12
    ca70:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>

		    // c2
			if (rg == MAP_FLOOR && up==MAP_FLOOR)
    ca74:	fc 81       	ldd	r31, Y+4	; 0x04
    ca76:	f2 30       	cpi	r31, 0x02	; 2
    ca78:	71 f4       	brne	.+28     	; 0xca96 <draw_background+0x148>
    ca7a:	97 01       	movw	r18, r14
    ca7c:	28 5f       	subi	r18, 0xF8	; 248
    ca7e:	3f 4f       	sbci	r19, 0xFF	; 255
    ca80:	3d 87       	std	Y+13, r19	; 0x0d
    ca82:	2c 87       	std	Y+12, r18	; 0x0c
    ca84:	32 e0       	ldi	r19, 0x02	; 2
    ca86:	73 16       	cp	r7, r19
    ca88:	19 f4       	brne	.+6      	; 0xca90 <draw_background+0x142>
					TSPRITE(BORDER_C2_TSP,xt+8,yt);
    ca8a:	8e e0       	ldi	r24, 0x0E	; 14
    ca8c:	90 e0       	ldi	r25, 0x00	; 0
    ca8e:	1d c0       	rjmp	.+58     	; 0xcaca <draw_background+0x17c>
			else if (rg == MAP_FLOOR)
					TSPRITE(BORDER_SIDE_TSP,xt+8,yt);
    ca90:	81 e1       	ldi	r24, 0x11	; 17
    ca92:	90 e0       	ldi	r25, 0x00	; 0
    ca94:	1a c0       	rjmp	.+52     	; 0xcaca <draw_background+0x17c>
		    else if (up == MAP_FLOOR)
    ca96:	82 e0       	ldi	r24, 0x02	; 2
    ca98:	78 16       	cp	r7, r24
    ca9a:	31 f4       	brne	.+12     	; 0xcaa8 <draw_background+0x15a>
					TSPRITE(BORDER_TOP_TSP,xt+8,yt);
    ca9c:	b7 01       	movw	r22, r14
    ca9e:	68 5f       	subi	r22, 0xF8	; 248
    caa0:	7f 4f       	sbci	r23, 0xFF	; 255
    caa2:	82 e1       	ldi	r24, 0x12	; 18
    caa4:	90 e0       	ldi	r25, 0x00	; 0
    caa6:	13 c0       	rjmp	.+38     	; 0xcace <draw_background+0x180>
    caa8:	f7 01       	movw	r30, r14
    caaa:	38 96       	adiw	r30, 0x08	; 8
    caac:	fd 87       	std	Y+13, r31	; 0x0d
    caae:	ec 87       	std	Y+12, r30	; 0x0c
			else  if (uprg == MAP_FLOOR)
    cab0:	f2 e0       	ldi	r31, 0x02	; 2
    cab2:	2f 16       	cp	r2, r31
    cab4:	19 f4       	brne	.+6      	; 0xcabc <draw_background+0x16e>
	    			TSPRITE(BORDER_C3_TSP,xt+8,yt);
    cab6:	8f e0       	ldi	r24, 0x0F	; 15
    cab8:	90 e0       	ldi	r25, 0x00	; 0
    caba:	07 c0       	rjmp	.+14     	; 0xcaca <draw_background+0x17c>
			else
		    		TSPRITE(STAR_00_TSP+ran(0,7),xt+8,yt);
    cabc:	80 e0       	ldi	r24, 0x00	; 0
    cabe:	90 e0       	ldi	r25, 0x00	; 0
    cac0:	67 e0       	ldi	r22, 0x07	; 7
    cac2:	70 e0       	ldi	r23, 0x00	; 0
    cac4:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cac8:	c3 96       	adiw	r24, 0x33	; 51
    caca:	6c 85       	ldd	r22, Y+12	; 0x0c
    cacc:	7d 85       	ldd	r23, Y+13	; 0x0d
    cace:	a6 01       	movw	r20, r12
    cad0:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>

		    // c3
			if (lf == MAP_FLOOR && dn==MAP_FLOOR)
    cad4:	2d 81       	ldd	r18, Y+5	; 0x05
    cad6:	22 30       	cpi	r18, 0x02	; 2
    cad8:	49 f4       	brne	.+18     	; 0xcaec <draw_background+0x19e>
    cada:	32 e0       	ldi	r19, 0x02	; 2
    cadc:	33 16       	cp	r3, r19
    cade:	19 f4       	brne	.+6      	; 0xcae6 <draw_background+0x198>
					TSPRITE(BORDER_C3_TSP,xt,yt+8);
    cae0:	8f e0       	ldi	r24, 0x0F	; 15
    cae2:	90 e0       	ldi	r25, 0x00	; 0
    cae4:	15 c0       	rjmp	.+42     	; 0xcb10 <draw_background+0x1c2>
			else if (lf == MAP_FLOOR)
					TSPRITE(BORDER_SIDE_TSP,xt,yt+8);
    cae6:	81 e1       	ldi	r24, 0x11	; 17
    cae8:	90 e0       	ldi	r25, 0x00	; 0
    caea:	12 c0       	rjmp	.+36     	; 0xcb10 <draw_background+0x1c2>
		    else if (dn == MAP_FLOOR)
    caec:	82 e0       	ldi	r24, 0x02	; 2
    caee:	38 16       	cp	r3, r24
    caf0:	19 f4       	brne	.+6      	; 0xcaf8 <draw_background+0x1aa>
					TSPRITE(BORDER_TOP_TSP,xt,yt+8);
    caf2:	82 e1       	ldi	r24, 0x12	; 18
    caf4:	90 e0       	ldi	r25, 0x00	; 0
    caf6:	0c c0       	rjmp	.+24     	; 0xcb10 <draw_background+0x1c2>
			else  if (dnlf == MAP_FLOOR)
    caf8:	12 30       	cpi	r17, 0x02	; 2
    cafa:	19 f4       	brne	.+6      	; 0xcb02 <draw_background+0x1b4>
	    			TSPRITE(BORDER_C2_TSP,xt,yt+8);
    cafc:	8e e0       	ldi	r24, 0x0E	; 14
    cafe:	90 e0       	ldi	r25, 0x00	; 0
    cb00:	07 c0       	rjmp	.+14     	; 0xcb10 <draw_background+0x1c2>
			else
		    		TSPRITE(STAR_00_TSP+ran(0,7),xt,yt+8);
    cb02:	80 e0       	ldi	r24, 0x00	; 0
    cb04:	90 e0       	ldi	r25, 0x00	; 0
    cb06:	67 e0       	ldi	r22, 0x07	; 7
    cb08:	70 e0       	ldi	r23, 0x00	; 0
    cb0a:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cb0e:	c3 96       	adiw	r24, 0x33	; 51
    cb10:	b7 01       	movw	r22, r14
    cb12:	a5 01       	movw	r20, r10
    cb14:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>

		    // c4
			if (rg == MAP_FLOOR && dn==MAP_FLOOR)
    cb18:	9c 81       	ldd	r25, Y+4	; 0x04
    cb1a:	92 30       	cpi	r25, 0x02	; 2
    cb1c:	81 f4       	brne	.+32     	; 0xcb3e <draw_background+0x1f0>
    cb1e:	f7 01       	movw	r30, r14
    cb20:	38 96       	adiw	r30, 0x08	; 8
    cb22:	fd 87       	std	Y+13, r31	; 0x0d
    cb24:	ec 87       	std	Y+12, r30	; 0x0c
    cb26:	f2 e0       	ldi	r31, 0x02	; 2
    cb28:	3f 16       	cp	r3, r31
    cb2a:	19 f4       	brne	.+6      	; 0xcb32 <draw_background+0x1e4>
					TSPRITE(BORDER_C4_TSP,xt+8,yt+8);
    cb2c:	80 e1       	ldi	r24, 0x10	; 16
    cb2e:	90 e0       	ldi	r25, 0x00	; 0
    cb30:	02 c0       	rjmp	.+4      	; 0xcb36 <draw_background+0x1e8>
			else if (rg == MAP_FLOOR)
					TSPRITE(BORDER_SIDE_TSP,xt+8,yt+8);
    cb32:	81 e1       	ldi	r24, 0x11	; 17
    cb34:	90 e0       	ldi	r25, 0x00	; 0
    cb36:	6c 85       	ldd	r22, Y+12	; 0x0c
    cb38:	7d 85       	ldd	r23, Y+13	; 0x0d
    cb3a:	a5 01       	movw	r20, r10
    cb3c:	63 c0       	rjmp	.+198    	; 0xcc04 <draw_background+0x2b6>
		    else if (dn == MAP_FLOOR)
    cb3e:	22 e0       	ldi	r18, 0x02	; 2
    cb40:	32 16       	cp	r3, r18
    cb42:	39 f4       	brne	.+14     	; 0xcb52 <draw_background+0x204>
					TSPRITE(BORDER_TOP_TSP,xt+8,yt+8);
    cb44:	88 e0       	ldi	r24, 0x08	; 8
    cb46:	90 e0       	ldi	r25, 0x00	; 0
    cb48:	e8 0e       	add	r14, r24
    cb4a:	f9 1e       	adc	r15, r25
    cb4c:	82 e1       	ldi	r24, 0x12	; 18
    cb4e:	90 e0       	ldi	r25, 0x00	; 0
    cb50:	42 c0       	rjmp	.+132    	; 0xcbd6 <draw_background+0x288>
    cb52:	f7 01       	movw	r30, r14
    cb54:	38 96       	adiw	r30, 0x08	; 8
    cb56:	fd 87       	std	Y+13, r31	; 0x0d
    cb58:	ec 87       	std	Y+12, r30	; 0x0c
			else  if (dnrg == MAP_FLOOR)
    cb5a:	fb 81       	ldd	r31, Y+3	; 0x03
    cb5c:	f2 30       	cpi	r31, 0x02	; 2
    cb5e:	19 f4       	brne	.+6      	; 0xcb66 <draw_background+0x218>
	    			TSPRITE(BORDER_C1_TSP,xt+8,yt+8);
    cb60:	8d e0       	ldi	r24, 0x0D	; 13
    cb62:	90 e0       	ldi	r25, 0x00	; 0
    cb64:	e8 cf       	rjmp	.-48     	; 0xcb36 <draw_background+0x1e8>
			else
		    		TSPRITE(STAR_00_TSP+ran(0,7),xt+8,yt+8);
    cb66:	80 e0       	ldi	r24, 0x00	; 0
    cb68:	90 e0       	ldi	r25, 0x00	; 0
    cb6a:	67 e0       	ldi	r22, 0x07	; 7
    cb6c:	70 e0       	ldi	r23, 0x00	; 0
    cb6e:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cb72:	c3 96       	adiw	r24, 0x33	; 51
    cb74:	e0 cf       	rjmp	.-64     	; 0xcb36 <draw_background+0x1e8>

		}

		// stars
	    if (a==MAP_STARS)
    cb76:	03 30       	cpi	r16, 0x03	; 3
    cb78:	81 f5       	brne	.+96     	; 0xcbda <draw_background+0x28c>
		{
	   		TSPRITE(STAR_00_TSP+ran(0,7),xt,yt);
    cb7a:	80 e0       	ldi	r24, 0x00	; 0
    cb7c:	90 e0       	ldi	r25, 0x00	; 0
    cb7e:	67 e0       	ldi	r22, 0x07	; 7
    cb80:	70 e0       	ldi	r23, 0x00	; 0
    cb82:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cb86:	c3 96       	adiw	r24, 0x33	; 51
    cb88:	b7 01       	movw	r22, r14
    cb8a:	a6 01       	movw	r20, r12
    cb8c:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
			TSPRITE(STAR_00_TSP+ran(0,7),xt+8,yt);
    cb90:	80 e0       	ldi	r24, 0x00	; 0
    cb92:	90 e0       	ldi	r25, 0x00	; 0
    cb94:	67 e0       	ldi	r22, 0x07	; 7
    cb96:	70 e0       	ldi	r23, 0x00	; 0
    cb98:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cb9c:	97 01       	movw	r18, r14
    cb9e:	28 5f       	subi	r18, 0xF8	; 248
    cba0:	3f 4f       	sbci	r19, 0xFF	; 255
    cba2:	3a 83       	std	Y+2, r19	; 0x02
    cba4:	29 83       	std	Y+1, r18	; 0x01
    cba6:	c3 96       	adiw	r24, 0x33	; 51
    cba8:	b9 01       	movw	r22, r18
    cbaa:	a6 01       	movw	r20, r12
    cbac:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
			TSPRITE(STAR_00_TSP+ran(0,7),xt+8,yt+8);
    cbb0:	80 e0       	ldi	r24, 0x00	; 0
    cbb2:	90 e0       	ldi	r25, 0x00	; 0
    cbb4:	67 e0       	ldi	r22, 0x07	; 7
    cbb6:	70 e0       	ldi	r23, 0x00	; 0
    cbb8:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cbbc:	c3 96       	adiw	r24, 0x33	; 51
    cbbe:	69 81       	ldd	r22, Y+1	; 0x01
    cbc0:	7a 81       	ldd	r23, Y+2	; 0x02
    cbc2:	a5 01       	movw	r20, r10
    cbc4:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
			TSPRITE(STAR_00_TSP+ran(0,7),xt,yt+8);
    cbc8:	80 e0       	ldi	r24, 0x00	; 0
    cbca:	90 e0       	ldi	r25, 0x00	; 0
    cbcc:	67 e0       	ldi	r22, 0x07	; 7
    cbce:	70 e0       	ldi	r23, 0x00	; 0
    cbd0:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cbd4:	c3 96       	adiw	r24, 0x33	; 51
    cbd6:	b7 01       	movw	r22, r14
    cbd8:	b0 cf       	rjmp	.-160    	; 0xcb3a <draw_background+0x1ec>
		}
	    if (a==MAP_OXYGEN)
    cbda:	07 30       	cpi	r16, 0x07	; 7
    cbdc:	19 f4       	brne	.+6      	; 0xcbe4 <draw_background+0x296>
	  	 	TSPRITE(OXYGEN_TSP,xt,yt);
    cbde:	82 e3       	ldi	r24, 0x32	; 50
    cbe0:	90 e0       	ldi	r25, 0x00	; 0
    cbe2:	0e c0       	rjmp	.+28     	; 0xcc00 <draw_background+0x2b2>
	    if (a==MAP_TARGET)
    cbe4:	05 30       	cpi	r16, 0x05	; 5
    cbe6:	19 f4       	brne	.+6      	; 0xcbee <draw_background+0x2a0>
	   		TSPRITE(FLOOR_TILE_F_TSP,xt,yt);
    cbe8:	89 e2       	ldi	r24, 0x29	; 41
    cbea:	90 e0       	ldi	r25, 0x00	; 0
    cbec:	09 c0       	rjmp	.+18     	; 0xcc00 <draw_background+0x2b2>
	  	if (a==MAP_WALL)
    cbee:	06 30       	cpi	r16, 0x06	; 6
    cbf0:	19 f4       	brne	.+6      	; 0xcbf8 <draw_background+0x2aa>
	   		TSPRITE(BLOCK_G_TSP,xt,yt);
    cbf2:	8a e0       	ldi	r24, 0x0A	; 10
    cbf4:	90 e0       	ldi	r25, 0x00	; 0
    cbf6:	04 c0       	rjmp	.+8      	; 0xcc00 <draw_background+0x2b2>
		if (a==MAP_ORB)
    cbf8:	04 30       	cpi	r16, 0x04	; 4
    cbfa:	31 f4       	brne	.+12     	; 0xcc08 <draw_background+0x2ba>
		  	TSPRITE(BLOCK_SUPA_GREEN_TSP,xt,yt);
    cbfc:	8b e0       	ldi	r24, 0x0B	; 11
    cbfe:	90 e0       	ldi	r25, 0x00	; 0
    cc00:	b7 01       	movw	r22, r14
    cc02:	a6 01       	movw	r20, r12
    cc04:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
	SelectTileset(TILESET_GAME);
	dirty = 0xff;

   // 	map
	for(y=0;y<MAPH+2;y++)
	for(x=0;x<MAPW+2;x++)
    cc08:	3f e0       	ldi	r19, 0x0F	; 15
    cc0a:	43 16       	cp	r4, r19
    cc0c:	51 04       	cpc	r5, r1
    cc0e:	09 f0       	breq	.+2      	; 0xcc12 <draw_background+0x2c4>
    cc10:	c1 ce       	rjmp	.-638    	; 0xc994 <draw_background+0x46>
    cc12:	08 94       	sec
    cc14:	81 1c       	adc	r8, r1
    cc16:	91 1c       	adc	r9, r1

	SelectTileset(TILESET_GAME);
	dirty = 0xff;

   // 	map
	for(y=0;y<MAPH+2;y++)
    cc18:	8d e0       	ldi	r24, 0x0D	; 13
    cc1a:	88 16       	cp	r8, r24
    cc1c:	91 04       	cpc	r9, r1
    cc1e:	b9 f0       	breq	.+46     	; 0xcc4e <draw_background+0x300>
	for(x=0;x<MAPW+2;x++)
	{
		xt=TOPX+(x<<1)-1;
		yt=TOPY+(y<<1)-1;
		xt<<=3;
		yt<<=3;
    cc20:	64 01       	movw	r12, r8
    cc22:	e4 e0       	ldi	r30, 0x04	; 4
    cc24:	cc 0c       	add	r12, r12
    cc26:	dd 1c       	adc	r13, r13
    cc28:	ea 95       	dec	r30
    cc2a:	e1 f7       	brne	.-8      	; 0xcc24 <draw_background+0x2d6>
			else
		    		TSPRITE(STAR_00_TSP+ran(0,7),xt+8,yt);

		    // c3
			if (lf == MAP_FLOOR && dn==MAP_FLOOR)
					TSPRITE(BORDER_C3_TSP,xt,yt+8);
    cc2c:	78 e0       	ldi	r23, 0x08	; 8
    cc2e:	a7 2e       	mov	r10, r23
    cc30:	b1 2c       	mov	r11, r1
    cc32:	ac 0c       	add	r10, r12
    cc34:	bd 1c       	adc	r11, r13
    cc36:	22 24       	eor	r2, r2
    cc38:	33 24       	eor	r3, r3
		}
	}
}

void	draw_background()
{
    cc3a:	f4 01       	movw	r30, r8
    cc3c:	31 97       	sbiw	r30, 0x01	; 1
    cc3e:	f9 87       	std	Y+9, r31	; 0x09
    cc40:	e8 87       	std	Y+8, r30	; 0x08
		yt<<=3;

		a = get_map(x,y);
		lf = get_mapf(x-1,y);
		rg = get_mapf(x+1,y);
		up = get_mapf(x,y-1);
    cc42:	94 01       	movw	r18, r8
    cc44:	2f 5f       	subi	r18, 0xFF	; 255
    cc46:	3f 4f       	sbci	r19, 0xFF	; 255
    cc48:	3b 87       	std	Y+11, r19	; 0x0b
    cc4a:	2a 87       	std	Y+10, r18	; 0x0a
    cc4c:	a4 ce       	rjmp	.-696    	; 0xc996 <draw_background+0x48>
	   		TSPRITE(BLOCK_G_TSP,xt,yt);
		if (a==MAP_ORB)
		  	TSPRITE(BLOCK_SUPA_GREEN_TSP,xt,yt);

	}
}
    cc4e:	2d 96       	adiw	r28, 0x0d	; 13
    cc50:	0f b6       	in	r0, 0x3f	; 63
    cc52:	f8 94       	cli
    cc54:	de bf       	out	0x3e, r29	; 62
    cc56:	0f be       	out	0x3f, r0	; 63
    cc58:	cd bf       	out	0x3d, r28	; 61
    cc5a:	cf 91       	pop	r28
    cc5c:	df 91       	pop	r29
    cc5e:	1f 91       	pop	r17
    cc60:	0f 91       	pop	r16
    cc62:	ff 90       	pop	r15
    cc64:	ef 90       	pop	r14
    cc66:	df 90       	pop	r13
    cc68:	cf 90       	pop	r12
    cc6a:	bf 90       	pop	r11
    cc6c:	af 90       	pop	r10
    cc6e:	9f 90       	pop	r9
    cc70:	8f 90       	pop	r8
    cc72:	7f 90       	pop	r7
    cc74:	6f 90       	pop	r6
    cc76:	5f 90       	pop	r5
    cc78:	4f 90       	pop	r4
    cc7a:	3f 90       	pop	r3
    cc7c:	2f 90       	pop	r2
    cc7e:	08 95       	ret

0000cc80 <do_player2>:

}


void	do_player2()
{
    cc80:	8f 92       	push	r8
    cc82:	9f 92       	push	r9
    cc84:	af 92       	push	r10
    cc86:	bf 92       	push	r11
    cc88:	cf 92       	push	r12
    cc8a:	df 92       	push	r13
    cc8c:	ef 92       	push	r14
    cc8e:	ff 92       	push	r15
    cc90:	0f 93       	push	r16
    cc92:	1f 93       	push	r17
    cc94:	cf 93       	push	r28
    cc96:	df 93       	push	r29
	s16 k=-1;
	s16 x=DIV16(player_x+8);
    cc98:	c0 90 fc 0f 	lds	r12, 0x0FFC
    cc9c:	d0 90 fd 0f 	lds	r13, 0x0FFD
    cca0:	88 e0       	ldi	r24, 0x08	; 8
    cca2:	90 e0       	ldi	r25, 0x00	; 0
    cca4:	c8 0e       	add	r12, r24
    cca6:	d9 1e       	adc	r13, r25
    cca8:	24 e0       	ldi	r18, 0x04	; 4
    ccaa:	d5 94       	asr	r13
    ccac:	c7 94       	ror	r12
    ccae:	2a 95       	dec	r18
    ccb0:	e1 f7       	brne	.-8      	; 0xccaa <do_player2+0x2a>
	s16 y=DIV16(player_y+8);
    ccb2:	e0 90 87 0e 	lds	r14, 0x0E87
    ccb6:	f0 90 88 0e 	lds	r15, 0x0E88
    ccba:	e8 0e       	add	r14, r24
    ccbc:	f9 1e       	adc	r15, r25
    ccbe:	04 e0       	ldi	r16, 0x04	; 4
    ccc0:	f5 94       	asr	r15
    ccc2:	e7 94       	ror	r14
    ccc4:	0a 95       	dec	r16
    ccc6:	e1 f7       	brne	.-8      	; 0xccc0 <do_player2+0x40>
	u8 i;
	u8 frame;
	u8 nx,ny;

	// safety
	player_x = MUL16(x);
    ccc8:	c6 01       	movw	r24, r12
    ccca:	14 e0       	ldi	r17, 0x04	; 4
    cccc:	88 0f       	add	r24, r24
    ccce:	99 1f       	adc	r25, r25
    ccd0:	1a 95       	dec	r17
    ccd2:	e1 f7       	brne	.-8      	; 0xcccc <do_player2+0x4c>
    ccd4:	90 93 fd 0f 	sts	0x0FFD, r25
    ccd8:	80 93 fc 0f 	sts	0x0FFC, r24
	player_y = MUL16(y);
    ccdc:	c7 01       	movw	r24, r14
    ccde:	b4 e0       	ldi	r27, 0x04	; 4
    cce0:	88 0f       	add	r24, r24
    cce2:	99 1f       	adc	r25, r25
    cce4:	ba 95       	dec	r27
    cce6:	e1 f7       	brne	.-8      	; 0xcce0 <do_player2+0x60>
    cce8:	90 93 88 0e 	sts	0x0E88, r25
    ccec:	80 93 87 0e 	sts	0x0E87, r24

	// stop player moving if _kicking
   if (g_wallgtimer)
    ccf0:	80 91 02 10 	lds	r24, 0x1002
    ccf4:	90 91 03 10 	lds	r25, 0x1003
    ccf8:	00 97       	sbiw	r24, 0x00	; 0
    ccfa:	51 f0       	breq	.+20     	; 0xcd10 <do_player2+0x90>
	{
		g_wallgtimer--;
    ccfc:	01 97       	sbiw	r24, 0x01	; 1
    ccfe:	90 93 03 10 	sts	0x1003, r25
    cd02:	80 93 02 10 	sts	0x1002, r24
		if (g_wallgtimer<=0)
    cd06:	18 16       	cp	r1, r24
    cd08:	19 06       	cpc	r1, r25
    cd0a:	14 f0       	brlt	.+4      	; 0xcd10 <do_player2+0x90>
		{
			g_hitwall=0;
    cd0c:	10 92 e9 0e 	sts	0x0EE9, r1
		}
	}

    if (player_kicked)
    cd10:	80 91 25 10 	lds	r24, 0x1025
    cd14:	88 23       	and	r24, r24
    cd16:	19 f4       	brne	.+6      	; 0xcd1e <do_player2+0x9e>
    cd18:	0f ef       	ldi	r16, 0xFF	; 255
    cd1a:	10 e0       	ldi	r17, 0x00	; 0
    cd1c:	d9 c0       	rjmp	.+434    	; 0xced0 <do_player2+0x250>
	{
		if (pad(JOY_B))
    cd1e:	80 91 0c 0e 	lds	r24, 0x0E0C
    cd22:	80 ff       	sbrs	r24, 0
    cd24:	64 c0       	rjmp	.+200    	; 0xcdee <do_player2+0x16e>
		{
	   		k = player_dir;
    cd26:	80 91 83 0e 	lds	r24, 0x0E83
    cd2a:	c8 2f       	mov	r28, r24
    cd2c:	d0 e0       	ldi	r29, 0x00	; 0
    cd2e:	10 e0       	ldi	r17, 0x00	; 0
			for (i=0;i<MAPW;i++)
			{
				x+=spd[k].x;
    cd30:	cc 0f       	add	r28, r28
    cd32:	dd 1f       	adc	r29, r29
    cd34:	cf 5f       	subi	r28, 0xFF	; 255
    cd36:	de 4f       	sbci	r29, 0xFE	; 254
				y+=spd[k].y;
    cd38:	5e 01       	movw	r10, r28
    cd3a:	08 94       	sec
    cd3c:	a1 1c       	adc	r10, r1
    cd3e:	b1 1c       	adc	r11, r1
		if (pad(JOY_B))
		{
	   		k = player_dir;
			for (i=0;i<MAPW;i++)
			{
				x+=spd[k].x;
    cd40:	88 81       	ld	r24, Y
    cd42:	99 27       	eor	r25, r25
    cd44:	87 fd       	sbrc	r24, 7
    cd46:	90 95       	com	r25
    cd48:	c8 0e       	add	r12, r24
    cd4a:	d9 1e       	adc	r13, r25
				y+=spd[k].y;
    cd4c:	f5 01       	movw	r30, r10
    cd4e:	80 81       	ld	r24, Z
    cd50:	99 27       	eor	r25, r25
    cd52:	87 fd       	sbrc	r24, 7
    cd54:	90 95       	com	r25
    cd56:	e8 0e       	add	r14, r24
    cd58:	f9 1e       	adc	r15, r25
	    		ok = read_map(x,y);
    cd5a:	c6 01       	movw	r24, r12
    cd5c:	b7 01       	movw	r22, r14
    cd5e:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
    cd62:	9c 01       	movw	r18, r24
			    if (ok==BLOCK_FLOOR||ok==BLOCK_HOLE)
    cd64:	00 97       	sbiw	r24, 0x00	; 0
    cd66:	29 f0       	breq	.+10     	; 0xcd72 <do_player2+0xf2>
    cd68:	89 30       	cpi	r24, 0x09	; 9
    cd6a:	91 05       	cpc	r25, r1
    cd6c:	11 f0       	breq	.+4      	; 0xcd72 <do_player2+0xf2>
    cd6e:	1d e0       	ldi	r17, 0x0D	; 13
    cd70:	39 c0       	rjmp	.+114    	; 0xcde4 <do_player2+0x164>
				{
					frame=(g_frame>>2)&1;
					if ((g_frame>>1)&1)
    cd72:	80 91 18 10 	lds	r24, 0x1018
    cd76:	81 ff       	sbrs	r24, 1
    cd78:	1c c0       	rjmp	.+56     	; 0xcdb2 <do_player2+0x132>
    cd7a:	b6 01       	movw	r22, r12
    cd7c:	f4 e0       	ldi	r31, 0x04	; 4
    cd7e:	66 0f       	add	r22, r22
    cd80:	77 1f       	adc	r23, r23
    cd82:	fa 95       	dec	r31
    cd84:	e1 f7       	brne	.-8      	; 0xcd7e <do_player2+0xfe>
    cd86:	a7 01       	movw	r20, r14
    cd88:	e4 e0       	ldi	r30, 0x04	; 4
    cd8a:	44 0f       	add	r20, r20
    cd8c:	55 1f       	adc	r21, r21
    cd8e:	ea 95       	dec	r30
    cd90:	e1 f7       	brne	.-8      	; 0xcd8a <do_player2+0x10a>
					{
					 	if (ok==BLOCK_FLOOR)
    cd92:	23 2b       	or	r18, r19
    cd94:	39 f4       	brne	.+14     	; 0xcda4 <do_player2+0x124>
				    		TSPRITE(FLOOR_TILE_D_TSP,MUL16(x)+xoff,MUL16(y)+yoff);
    cd96:	60 5f       	subi	r22, 0xF0	; 240
    cd98:	7f 4f       	sbci	r23, 0xFF	; 255
    cd9a:	40 5f       	subi	r20, 0xF0	; 240
    cd9c:	5f 4f       	sbci	r21, 0xFF	; 255
    cd9e:	86 e2       	ldi	r24, 0x26	; 38
    cda0:	90 e0       	ldi	r25, 0x00	; 0
    cda2:	1e c0       	rjmp	.+60     	; 0xcde0 <do_player2+0x160>
						else
					    	TSPRITE(FLOOR_TILE_F_TSP,MUL16(x)+xoff,MUL16(y)+yoff);
    cda4:	60 5f       	subi	r22, 0xF0	; 240
    cda6:	7f 4f       	sbci	r23, 0xFF	; 255
    cda8:	40 5f       	subi	r20, 0xF0	; 240
    cdaa:	5f 4f       	sbci	r21, 0xFF	; 255
    cdac:	89 e2       	ldi	r24, 0x29	; 41
    cdae:	90 e0       	ldi	r25, 0x00	; 0
    cdb0:	17 c0       	rjmp	.+46     	; 0xcde0 <do_player2+0x160>
					}
					else
					{
					   //	frame=ran(0,7);
				    	TSPRITE(MAGNET_DOWN_00_TSP+ran(0,7),MUL16(x)+xoff,MUL16(y)+yoff);
    cdb2:	80 e0       	ldi	r24, 0x00	; 0
    cdb4:	90 e0       	ldi	r25, 0x00	; 0
    cdb6:	67 e0       	ldi	r22, 0x07	; 7
    cdb8:	70 e0       	ldi	r23, 0x00	; 0
    cdba:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    cdbe:	b6 01       	movw	r22, r12
    cdc0:	34 e0       	ldi	r19, 0x04	; 4
    cdc2:	66 0f       	add	r22, r22
    cdc4:	77 1f       	adc	r23, r23
    cdc6:	3a 95       	dec	r19
    cdc8:	e1 f7       	brne	.-8      	; 0xcdc2 <do_player2+0x142>
    cdca:	60 5f       	subi	r22, 0xF0	; 240
    cdcc:	7f 4f       	sbci	r23, 0xFF	; 255
    cdce:	a7 01       	movw	r20, r14
    cdd0:	24 e0       	ldi	r18, 0x04	; 4
    cdd2:	44 0f       	add	r20, r20
    cdd4:	55 1f       	adc	r21, r21
    cdd6:	2a 95       	dec	r18
    cdd8:	e1 f7       	brne	.-8      	; 0xcdd2 <do_player2+0x152>
    cdda:	40 5f       	subi	r20, 0xF0	; 240
    cddc:	5f 4f       	sbci	r21, 0xFF	; 255
    cdde:	8a 96       	adiw	r24, 0x2a	; 42
    cde0:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
    if (player_kicked)
	{
		if (pad(JOY_B))
		{
	   		k = player_dir;
			for (i=0;i<MAPW;i++)
    cde4:	1f 5f       	subi	r17, 0xFF	; 255
    cde6:	1d 30       	cpi	r17, 0x0D	; 13
    cde8:	08 f4       	brcc	.+2      	; 0xcdec <do_player2+0x16c>
    cdea:	aa cf       	rjmp	.-172    	; 0xcd40 <do_player2+0xc0>
    cdec:	48 c1       	rjmp	.+656    	; 0xd07e <do_player2+0x3fe>



void	sound(int a,int pri)
{
	TriggerFxChannel(2,a,255,1);
    cdee:	82 e0       	ldi	r24, 0x02	; 2
    cdf0:	66 e0       	ldi	r22, 0x06	; 6
    cdf2:	4f ef       	ldi	r20, 0xFF	; 255
    cdf4:	21 e0       	ldi	r18, 0x01	; 1
    cdf6:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
		else
		{
			 sound(SFX_BUZZOFF,SD_NORMAL);


			k = player_dir;
    cdfa:	80 91 83 0e 	lds	r24, 0x0E83
    cdfe:	c8 2f       	mov	r28, r24
    ce00:	d0 e0       	ldi	r29, 0x00	; 0
    ce02:	bb 24       	eor	r11, r11

			for (i=0;i<MAPW;i++)
			{
				x+=spd[k].x;
    ce04:	cc 0f       	add	r28, r28
    ce06:	dd 1f       	adc	r29, r29
    ce08:	cf 5f       	subi	r28, 0xFF	; 255
    ce0a:	de 4f       	sbci	r29, 0xFE	; 254
				y+=spd[k].y;
    ce0c:	4e 01       	movw	r8, r28
    ce0e:	08 94       	sec
    ce10:	81 1c       	adc	r8, r1
    ce12:	91 1c       	adc	r9, r1

			k = player_dir;

			for (i=0;i<MAPW;i++)
			{
				x+=spd[k].x;
    ce14:	88 81       	ld	r24, Y
    ce16:	99 27       	eor	r25, r25
    ce18:	87 fd       	sbrc	r24, 7
    ce1a:	90 95       	com	r25
    ce1c:	c8 0e       	add	r12, r24
    ce1e:	d9 1e       	adc	r13, r25
				y+=spd[k].y;
    ce20:	f4 01       	movw	r30, r8
    ce22:	80 81       	ld	r24, Z
    ce24:	99 27       	eor	r25, r25
    ce26:	87 fd       	sbrc	r24, 7
    ce28:	90 95       	com	r25
    ce2a:	e8 0e       	add	r14, r24
    ce2c:	f9 1e       	adc	r15, r25
	    		ok=read_map(x,y);
    ce2e:	c6 01       	movw	r24, r12
    ce30:	b7 01       	movw	r22, r14
    ce32:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
    ce36:	8c 01       	movw	r16, r24
			    if (ok==BLOCK_FLOOR)
    ce38:	00 97       	sbiw	r24, 0x00	; 0
    ce3a:	99 f4       	brne	.+38     	; 0xce62 <do_player2+0x1e2>
				{
				   	TSPRITE(FLOOR_TILE_D_TSP,MUL16(x)+xoff,MUL16(y)+yoff);
    ce3c:	b6 01       	movw	r22, r12
    ce3e:	84 e0       	ldi	r24, 0x04	; 4
    ce40:	66 0f       	add	r22, r22
    ce42:	77 1f       	adc	r23, r23
    ce44:	8a 95       	dec	r24
    ce46:	e1 f7       	brne	.-8      	; 0xce40 <do_player2+0x1c0>
    ce48:	60 5f       	subi	r22, 0xF0	; 240
    ce4a:	7f 4f       	sbci	r23, 0xFF	; 255
    ce4c:	a7 01       	movw	r20, r14
    ce4e:	b4 e0       	ldi	r27, 0x04	; 4
    ce50:	44 0f       	add	r20, r20
    ce52:	55 1f       	adc	r21, r21
    ce54:	ba 95       	dec	r27
    ce56:	e1 f7       	brne	.-8      	; 0xce50 <do_player2+0x1d0>
    ce58:	40 5f       	subi	r20, 0xF0	; 240
    ce5a:	5f 4f       	sbci	r21, 0xFF	; 255
    ce5c:	86 e2       	ldi	r24, 0x26	; 38
    ce5e:	90 e0       	ldi	r25, 0x00	; 0
    ce60:	18 c0       	rjmp	.+48     	; 0xce92 <do_player2+0x212>
				}
				else if (ok==BLOCK_HOLE)
    ce62:	89 30       	cpi	r24, 0x09	; 9
    ce64:	91 05       	cpc	r25, r1
    ce66:	19 f0       	breq	.+6      	; 0xce6e <do_player2+0x1ee>
    ce68:	ad e0       	ldi	r26, 0x0D	; 13
    ce6a:	ba 2e       	mov	r11, r26
    ce6c:	14 c0       	rjmp	.+40     	; 0xce96 <do_player2+0x216>
				{
				   	TSPRITE(FLOOR_TILE_F_TSP,MUL16(x)+xoff,MUL16(y)+yoff);
    ce6e:	b6 01       	movw	r22, r12
    ce70:	f4 e0       	ldi	r31, 0x04	; 4
    ce72:	66 0f       	add	r22, r22
    ce74:	77 1f       	adc	r23, r23
    ce76:	fa 95       	dec	r31
    ce78:	e1 f7       	brne	.-8      	; 0xce72 <do_player2+0x1f2>
    ce7a:	60 5f       	subi	r22, 0xF0	; 240
    ce7c:	7f 4f       	sbci	r23, 0xFF	; 255
    ce7e:	a7 01       	movw	r20, r14
    ce80:	e4 e0       	ldi	r30, 0x04	; 4
    ce82:	44 0f       	add	r20, r20
    ce84:	55 1f       	adc	r21, r21
    ce86:	ea 95       	dec	r30
    ce88:	e1 f7       	brne	.-8      	; 0xce82 <do_player2+0x202>
    ce8a:	40 5f       	subi	r20, 0xF0	; 240
    ce8c:	5f 4f       	sbci	r21, 0xFF	; 255
    ce8e:	89 e2       	ldi	r24, 0x29	; 41
    ce90:	90 e0       	ldi	r25, 0x00	; 0
    ce92:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
			 sound(SFX_BUZZOFF,SD_NORMAL);


			k = player_dir;

			for (i=0;i<MAPW;i++)
    ce96:	b3 94       	inc	r11
    ce98:	fc e0       	ldi	r31, 0x0C	; 12
    ce9a:	fb 15       	cp	r31, r11
    ce9c:	08 f0       	brcs	.+2      	; 0xcea0 <do_player2+0x220>
    ce9e:	ba cf       	rjmp	.-140    	; 0xce14 <do_player2+0x194>
				else
				{
					i=MAPW;
				}
			}
			x=DIV16(player_x+8);
    cea0:	c0 90 fc 0f 	lds	r12, 0x0FFC
    cea4:	d0 90 fd 0f 	lds	r13, 0x0FFD
    cea8:	88 e0       	ldi	r24, 0x08	; 8
    ceaa:	90 e0       	ldi	r25, 0x00	; 0
    ceac:	c8 0e       	add	r12, r24
    ceae:	d9 1e       	adc	r13, r25
    ceb0:	54 e0       	ldi	r21, 0x04	; 4
    ceb2:	d5 94       	asr	r13
    ceb4:	c7 94       	ror	r12
    ceb6:	5a 95       	dec	r21
    ceb8:	e1 f7       	brne	.-8      	; 0xceb2 <do_player2+0x232>
			y=DIV16(player_y+8);
    ceba:	e0 90 87 0e 	lds	r14, 0x0E87
    cebe:	f0 90 88 0e 	lds	r15, 0x0E88
    cec2:	e8 0e       	add	r14, r24
    cec4:	f9 1e       	adc	r15, r25
    cec6:	44 e0       	ldi	r20, 0x04	; 4
    cec8:	f5 94       	asr	r15
    ceca:	e7 94       	ror	r14
    cecc:	4a 95       	dec	r20
    cece:	e1 f7       	brne	.-8      	; 0xcec8 <do_player2+0x248>
			k=-1;
		}
	}
    player_kicked=0;
    ced0:	10 92 25 10 	sts	0x1025, r1

	if (pad(JOY_UP)) 	k=0;
    ced4:	80 91 0c 0e 	lds	r24, 0x0E0C
    ced8:	84 fd       	sbrc	r24, 4
    ceda:	03 c0       	rjmp	.+6      	; 0xcee2 <do_player2+0x262>
    cedc:	cf ef       	ldi	r28, 0xFF	; 255
    cede:	df ef       	ldi	r29, 0xFF	; 255
    cee0:	02 c0       	rjmp	.+4      	; 0xcee6 <do_player2+0x266>
    cee2:	c0 e0       	ldi	r28, 0x00	; 0
    cee4:	d0 e0       	ldi	r29, 0x00	; 0
    if (pad(JOY_RIGHT)) k=1;
    cee6:	87 ff       	sbrs	r24, 7
    cee8:	02 c0       	rjmp	.+4      	; 0xceee <do_player2+0x26e>
    ceea:	c1 e0       	ldi	r28, 0x01	; 1
    ceec:	d0 e0       	ldi	r29, 0x00	; 0
	if (pad(JOY_DOWN)) 	k=2;
    ceee:	85 ff       	sbrs	r24, 5
    cef0:	02 c0       	rjmp	.+4      	; 0xcef6 <do_player2+0x276>
    cef2:	c2 e0       	ldi	r28, 0x02	; 2
    cef4:	d0 e0       	ldi	r29, 0x00	; 0
    if (pad(JOY_LEFT)) 	k=3;
    cef6:	86 ff       	sbrs	r24, 6
    cef8:	03 c0       	rjmp	.+6      	; 0xcf00 <do_player2+0x280>
    cefa:	c3 e0       	ldi	r28, 0x03	; 3
    cefc:	d0 e0       	ldi	r29, 0x00	; 0
    cefe:	04 c0       	rjmp	.+8      	; 0xcf08 <do_player2+0x288>

	if (k!=-1)
    cf00:	9f ef       	ldi	r25, 0xFF	; 255
    cf02:	cf 3f       	cpi	r28, 0xFF	; 255
    cf04:	d9 07       	cpc	r29, r25
    cf06:	b1 f0       	breq	.+44     	; 0xcf34 <do_player2+0x2b4>
	{
		player_dir=(u8) k;
    cf08:	c0 93 83 0e 	sts	0x0E83, r28
		ok = read_map(x+spd[k].x,y+spd[k].y);
    cf0c:	fe 01       	movw	r30, r28
    cf0e:	ee 0f       	add	r30, r30
    cf10:	ff 1f       	adc	r31, r31
    cf12:	ef 5f       	subi	r30, 0xFF	; 255
    cf14:	fe 4f       	sbci	r31, 0xFE	; 254
    cf16:	80 81       	ld	r24, Z
    cf18:	99 27       	eor	r25, r25
    cf1a:	87 fd       	sbrc	r24, 7
    cf1c:	90 95       	com	r25
    cf1e:	61 81       	ldd	r22, Z+1	; 0x01
    cf20:	77 27       	eor	r23, r23
    cf22:	67 fd       	sbrc	r22, 7
    cf24:	70 95       	com	r23
    cf26:	6e 0d       	add	r22, r14
    cf28:	7f 1d       	adc	r23, r15
    cf2a:	8c 0d       	add	r24, r12
    cf2c:	9d 1d       	adc	r25, r13
    cf2e:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
    cf32:	8c 01       	movw	r16, r24
	}
	// ok to move
	if (ok==BLOCK_FLOOR || ok==BLOCK_HOLE)
    cf34:	01 15       	cp	r16, r1
    cf36:	11 05       	cpc	r17, r1
    cf38:	19 f0       	breq	.+6      	; 0xcf40 <do_player2+0x2c0>
    cf3a:	09 30       	cpi	r16, 0x09	; 9
    cf3c:	11 05       	cpc	r17, r1
    cf3e:	89 f4       	brne	.+34     	; 0xcf62 <do_player2+0x2e2>
	{
		player_ctrl=PLAYER_MOVE;
    cf40:	82 e0       	ldi	r24, 0x02	; 2
    cf42:	80 93 dd 0e 	sts	0x0EDD, r24
		player_gtimer=YGAP;
    cf46:	80 e1       	ldi	r24, 0x10	; 16
    cf48:	80 93 8b 0e 	sts	0x0E8B, r24
		if (k==1 || k==3) player_gtimer=XGAP;
    cf4c:	c1 30       	cpi	r28, 0x01	; 1
    cf4e:	d1 05       	cpc	r29, r1
    cf50:	11 f0       	breq	.+4      	; 0xcf56 <do_player2+0x2d6>
    cf52:	23 97       	sbiw	r28, 0x03	; 3
    cf54:	19 f4       	brne	.+6      	; 0xcf5c <do_player2+0x2dc>
    cf56:	80 e1       	ldi	r24, 0x10	; 16
    cf58:	80 93 8b 0e 	sts	0x0E8B, r24
		player_walk();
    cf5c:	0e 94 bd 52 	call	0xa57a	; 0xa57a <player_walk>
    cf60:	8e c0       	rjmp	.+284    	; 0xd07e <do_player2+0x3fe>
		return;
	}
	if (ok==BLOCK_OXYGEN)
    cf62:	07 30       	cpi	r16, 0x07	; 7
    cf64:	11 05       	cpc	r17, r1
    cf66:	c9 f5       	brne	.+114    	; 0xcfda <do_player2+0x35a>
    cf68:	82 e0       	ldi	r24, 0x02	; 2
    cf6a:	68 e0       	ldi	r22, 0x08	; 8
    cf6c:	4f ef       	ldi	r20, 0xFF	; 255
    cf6e:	21 e0       	ldi	r18, 0x01	; 1
    cf70:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
	{
		sound(SFX_PICKUP,SD_NORMAL);
		g_oxygen+=4;
    cf74:	80 91 b0 0e 	lds	r24, 0x0EB0
    cf78:	8c 5f       	subi	r24, 0xFC	; 252
    cf7a:	80 93 b0 0e 	sts	0x0EB0, r24
		nx=x+spd[k].x;
		ny=y+spd[k].y;
		TSPRITE(FLOOR_TILE_D_TSP,MUL16(nx)+xoff,MUL16(ny)+yoff);
    cf7e:	fe 01       	movw	r30, r28
    cf80:	ee 0f       	add	r30, r30
    cf82:	ff 1f       	adc	r31, r31
    cf84:	ef 5f       	subi	r30, 0xFF	; 255
    cf86:	fe 4f       	sbci	r31, 0xFE	; 254
    cf88:	80 81       	ld	r24, Z
    cf8a:	8c 0d       	add	r24, r12
    cf8c:	08 2f       	mov	r16, r24
    cf8e:	10 e0       	ldi	r17, 0x00	; 0
    cf90:	81 81       	ldd	r24, Z+1	; 0x01
    cf92:	8e 0d       	add	r24, r14
    cf94:	a8 2e       	mov	r10, r24
    cf96:	bb 24       	eor	r11, r11
    cf98:	e5 01       	movw	r28, r10
    cf9a:	94 e0       	ldi	r25, 0x04	; 4
    cf9c:	cc 0f       	add	r28, r28
    cf9e:	dd 1f       	adc	r29, r29
    cfa0:	9a 95       	dec	r25
    cfa2:	e1 f7       	brne	.-8      	; 0xcf9c <do_player2+0x31c>
    cfa4:	b8 01       	movw	r22, r16
    cfa6:	84 e0       	ldi	r24, 0x04	; 4
    cfa8:	66 0f       	add	r22, r22
    cfaa:	77 1f       	adc	r23, r23
    cfac:	8a 95       	dec	r24
    cfae:	e1 f7       	brne	.-8      	; 0xcfa8 <do_player2+0x328>
    cfb0:	60 5f       	subi	r22, 0xF0	; 240
    cfb2:	7f 4f       	sbci	r23, 0xFF	; 255
    cfb4:	ae 01       	movw	r20, r28
    cfb6:	40 5f       	subi	r20, 0xF0	; 240
    cfb8:	5f 4f       	sbci	r21, 0xFF	; 255
    cfba:	86 e2       	ldi	r24, 0x26	; 38
    cfbc:	90 e0       	ldi	r25, 0x00	; 0
    cfbe:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>



void	set_map(s16 x,s16 y,u8 a)
{
	if (x<0|| x>=MAPW) return;
    cfc2:	0d 30       	cpi	r16, 0x0D	; 13
    cfc4:	11 05       	cpc	r17, r1
    cfc6:	48 f4       	brcc	.+18     	; 0xcfda <do_player2+0x35a>
	if (y<0|| y>=MAPH) return;
    cfc8:	eb e0       	ldi	r30, 0x0B	; 11
    cfca:	ae 16       	cp	r10, r30
    cfcc:	b1 04       	cpc	r11, r1
    cfce:	28 f4       	brcc	.+10     	; 0xcfda <do_player2+0x35a>
	rmap(x,y) = a;
    cfd0:	c5 50       	subi	r28, 0x05	; 5
    cfd2:	d1 4f       	sbci	r29, 0xF1	; 241
    cfd4:	c0 0f       	add	r28, r16
    cfd6:	d1 1f       	adc	r29, r17
    cfd8:	18 82       	st	Y, r1
		TSPRITE(FLOOR_TILE_D_TSP,MUL16(nx)+xoff,MUL16(ny)+yoff);
	    set_map(nx,ny,0);
	}

	  // do fire
	if (xpad(JOY_A))
    cfda:	80 91 0a 0e 	lds	r24, 0x0E0A
    cfde:	90 91 0b 0e 	lds	r25, 0x0E0B
    cfe2:	90 ff       	sbrs	r25, 0
    cfe4:	03 c0       	rjmp	.+6      	; 0xcfec <do_player2+0x36c>
	{
		fire_bullet();
    cfe6:	0e 94 f1 5c 	call	0xb9e2	; 0xb9e2 <fire_bullet>
    cfea:	49 c0       	rjmp	.+146    	; 0xd07e <do_player2+0x3fe>
		return;
	}

	// do magnet
	if (xpad(JOY_B))
    cfec:	80 ff       	sbrs	r24, 0
    cfee:	47 c0       	rjmp	.+142    	; 0xd07e <do_player2+0x3fe>
    cff0:	82 e0       	ldi	r24, 0x02	; 2
    cff2:	65 e0       	ldi	r22, 0x05	; 5
    cff4:	4f ef       	ldi	r20, 0xFF	; 255
    cff6:	21 e0       	ldi	r18, 0x01	; 1
    cff8:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
	{
		sound(SFX_BUZZ,SD_NORMAL);

		k = player_dir;
    cffc:	90 91 83 0e 	lds	r25, 0x0E83
    d000:	e9 2f       	mov	r30, r25
    d002:	f0 e0       	ldi	r31, 0x00	; 0

		for (i=0;i<MAPW;i++)
		{
			x+=spd[k].x;
    d004:	ee 0f       	add	r30, r30
    d006:	ff 1f       	adc	r31, r31
    d008:	ef 5f       	subi	r30, 0xFF	; 255
    d00a:	fe 4f       	sbci	r31, 0xFE	; 254
    d00c:	80 81       	ld	r24, Z
    d00e:	a8 2e       	mov	r10, r24
    d010:	bb 24       	eor	r11, r11
    d012:	a7 fc       	sbrc	r10, 7
    d014:	b0 94       	com	r11
			y+=spd[k].y;
    d016:	81 81       	ldd	r24, Z+1	; 0x01
    d018:	c8 2f       	mov	r28, r24
    d01a:	dd 27       	eor	r29, r29
    d01c:	c7 fd       	sbrc	r28, 7
    d01e:	d0 95       	com	r29
    d020:	10 e0       	ldi	r17, 0x00	; 0
				if (i!=0)
				{
					index = read_map_index(x,y);
					if (supa_trigger[index]==0)
					{
				   		supa_trigger[index]=2;
    d022:	a2 e0       	ldi	r26, 0x02	; 2
    d024:	9a 2e       	mov	r9, r26
			    		supa_move[index]=(k+2)&3;
    d026:	09 2f       	mov	r16, r25
    d028:	0e 5f       	subi	r16, 0xFE	; 254
    d02a:	03 70       	andi	r16, 0x03	; 3

}


void	do_player2()
{
    d02c:	ca 0c       	add	r12, r10
    d02e:	db 1c       	adc	r13, r11
    d030:	ec 0e       	add	r14, r28
    d032:	fd 1e       	adc	r15, r29

		for (i=0;i<MAPW;i++)
		{
			x+=spd[k].x;
			y+=spd[k].y;
    		ok=read_map(x,y);
    d034:	c6 01       	movw	r24, r12
    d036:	b7 01       	movw	r22, r14
    d038:	0e 94 6f 52 	call	0xa4de	; 0xa4de <read_map>
		   	if (ok==BLOCK_SUPA)
    d03c:	84 30       	cpi	r24, 0x04	; 4
    d03e:	91 05       	cpc	r25, r1
    d040:	99 f4       	brne	.+38     	; 0xd068 <do_player2+0x3e8>
			{
				if (i!=0)
    d042:	11 23       	and	r17, r17
    d044:	a9 f0       	breq	.+42     	; 0xd070 <do_player2+0x3f0>
				{
					index = read_map_index(x,y);
    d046:	c6 01       	movw	r24, r12
    d048:	b7 01       	movw	r22, r14
    d04a:	0e 94 96 52 	call	0xa52c	; 0xa52c <read_map_index>
					if (supa_trigger[index]==0)
    d04e:	e8 2f       	mov	r30, r24
    d050:	f0 e0       	ldi	r31, 0x00	; 0
    d052:	df 01       	movw	r26, r30
    d054:	ad 5e       	subi	r26, 0xED	; 237
    d056:	bf 4e       	sbci	r27, 0xEF	; 239
    d058:	8c 91       	ld	r24, X
    d05a:	88 23       	and	r24, r24
    d05c:	49 f4       	brne	.+18     	; 0xd070 <do_player2+0x3f0>
					{
				   		supa_trigger[index]=2;
    d05e:	9c 92       	st	X, r9
			    		supa_move[index]=(k+2)&3;
    d060:	e8 53       	subi	r30, 0x38	; 56
    d062:	f1 4f       	sbci	r31, 0xF1	; 241
    d064:	00 83       	st	Z, r16
    d066:	04 c0       	rjmp	.+8      	; 0xd070 <do_player2+0x3f0>
					}
				}
				i=MAPW;
			}
			else  if (ok==BLOCK_FLOOR || ok==BLOCK_HOLE)
    d068:	00 97       	sbiw	r24, 0x00	; 0
    d06a:	19 f0       	breq	.+6      	; 0xd072 <do_player2+0x3f2>
    d06c:	09 97       	sbiw	r24, 0x09	; 9
    d06e:	09 f0       	breq	.+2      	; 0xd072 <do_player2+0x3f2>
    d070:	1d e0       	ldi	r17, 0x0D	; 13
	{
		sound(SFX_BUZZ,SD_NORMAL);

		k = player_dir;

		for (i=0;i<MAPW;i++)
    d072:	1f 5f       	subi	r17, 0xFF	; 255
    d074:	1d 30       	cpi	r17, 0x0D	; 13
    d076:	d0 f2       	brcs	.-76     	; 0xd02c <do_player2+0x3ac>
			else
			{
				i=MAPW;
			}
		}
		player_kicked = KICK_DELAY;
    d078:	8a e0       	ldi	r24, 0x0A	; 10
    d07a:	80 93 25 10 	sts	0x1025, r24
	}
}
    d07e:	df 91       	pop	r29
    d080:	cf 91       	pop	r28
    d082:	1f 91       	pop	r17
    d084:	0f 91       	pop	r16
    d086:	ff 90       	pop	r15
    d088:	ef 90       	pop	r14
    d08a:	df 90       	pop	r13
    d08c:	cf 90       	pop	r12
    d08e:	bf 90       	pop	r11
    d090:	af 90       	pop	r10
    d092:	9f 90       	pop	r9
    d094:	8f 90       	pop	r8
    d096:	08 95       	ret

0000d098 <draw_baddie>:
	y=player_y+yoff;
	SPRITE(k+f+offset,x,y,0,0);
}

void	draw_baddie(s16 idx)
{
    d098:	af 92       	push	r10
    d09a:	bf 92       	push	r11
    d09c:	cf 92       	push	r12
    d09e:	df 92       	push	r13
    d0a0:	ef 92       	push	r14
    d0a2:	ff 92       	push	r15
    d0a4:	0f 93       	push	r16
    d0a6:	1f 93       	push	r17
    d0a8:	cf 93       	push	r28
    d0aa:	df 93       	push	r29
    d0ac:	ec 01       	movw	r28, r24
	s16 x,y,f,k;

	x=baddie_x[idx]+xoff;
    d0ae:	dc 01       	movw	r26, r24
    d0b0:	aa 0f       	add	r26, r26
    d0b2:	bb 1f       	adc	r27, r27
    d0b4:	fd 01       	movw	r30, r26
    d0b6:	ea 55       	subi	r30, 0x5A	; 90
    d0b8:	f1 4f       	sbci	r31, 0xF1	; 241
    d0ba:	60 81       	ld	r22, Z
    d0bc:	71 81       	ldd	r23, Z+1	; 0x01
	y=baddie_y[idx]+yoff;
    d0be:	fd 01       	movw	r30, r26
    d0c0:	e3 5f       	subi	r30, 0xF3	; 243
    d0c2:	ff 4e       	sbci	r31, 0xEF	; 239
    d0c4:	40 81       	ld	r20, Z
    d0c6:	51 81       	ldd	r21, Z+1	; 0x01

	if (baddie_ctrl[idx]==BADDIE_DEAD) return;
    d0c8:	fc 01       	movw	r30, r24
    d0ca:	e2 56       	subi	r30, 0x62	; 98
    d0cc:	f1 4f       	sbci	r31, 0xF1	; 241
    d0ce:	e0 81       	ld	r30, Z
    d0d0:	ee 23       	and	r30, r30
    d0d2:	09 f4       	brne	.+2      	; 0xd0d6 <draw_baddie+0x3e>
    d0d4:	65 c0       	rjmp	.+202    	; 0xd1a0 <draw_baddie+0x108>

void	draw_baddie(s16 idx)
{
	s16 x,y,f,k;

	x=baddie_x[idx]+xoff;
    d0d6:	f0 e1       	ldi	r31, 0x10	; 16
    d0d8:	cf 2e       	mov	r12, r31
    d0da:	d1 2c       	mov	r13, r1
    d0dc:	c6 0e       	add	r12, r22
    d0de:	d7 1e       	adc	r13, r23
	y=baddie_y[idx]+yoff;
    d0e0:	60 e1       	ldi	r22, 0x10	; 16
    d0e2:	a6 2e       	mov	r10, r22
    d0e4:	b1 2c       	mov	r11, r1
    d0e6:	a4 0e       	add	r10, r20
    d0e8:	b5 1e       	adc	r11, r21

	if (baddie_ctrl[idx]==BADDIE_DEAD) return;

    if (baddie_ctrl[idx]==BADDIE_LIMBO)
    d0ea:	e7 30       	cpi	r30, 0x07	; 7
    d0ec:	21 f4       	brne	.+8      	; 0xd0f6 <draw_baddie+0x5e>
    {
    	SPRITE(baddie_frame[idx],x,y,0,0);
    d0ee:	ce 54       	subi	r28, 0x4E	; 78
    d0f0:	d1 4f       	sbci	r29, 0xF1	; 241
    d0f2:	88 81       	ld	r24, Y
    d0f4:	4f c0       	rjmp	.+158    	; 0xd194 <draw_baddie+0xfc>
		return;
	}

	// egg state
  	if (baddie_ctrl[idx] == BADDIE_EGG)
    d0f6:	e1 30       	cpi	r30, 0x01	; 1
    d0f8:	81 f5       	brne	.+96     	; 0xd15a <draw_baddie+0xc2>
    {
		if (baddie_trigger[idx]>2*SECOND) return;
    d0fa:	a0 51       	subi	r26, 0x10	; 16
    d0fc:	b1 4f       	sbci	r27, 0xF1	; 241
    d0fe:	8d 91       	ld	r24, X+
    d100:	9c 91       	ld	r25, X
    d102:	89 37       	cpi	r24, 0x79	; 121
    d104:	91 05       	cpc	r25, r1
    d106:	0c f0       	brlt	.+2      	; 0xd10a <draw_baddie+0x72>
    d108:	4b c0       	rjmp	.+150    	; 0xd1a0 <draw_baddie+0x108>

		if (((g_frame+idx)&3)==0)
    d10a:	80 91 18 10 	lds	r24, 0x1018
    d10e:	90 91 19 10 	lds	r25, 0x1019
    d112:	8c 0f       	add	r24, r28
    d114:	9d 1f       	adc	r25, r29
    d116:	83 70       	andi	r24, 0x03	; 3
    d118:	90 70       	andi	r25, 0x00	; 0
    d11a:	89 2b       	or	r24, r25
    d11c:	91 f4       	brne	.+36     	; 0xd142 <draw_baddie+0xaa>
		{
			baddie_frame[idx]+=ran(1,2);
    d11e:	32 eb       	ldi	r19, 0xB2	; 178
    d120:	e3 2e       	mov	r14, r19
    d122:	3e e0       	ldi	r19, 0x0E	; 14
    d124:	f3 2e       	mov	r15, r19
    d126:	ec 0e       	add	r14, r28
    d128:	fd 1e       	adc	r15, r29
    d12a:	f7 01       	movw	r30, r14
    d12c:	10 81       	ld	r17, Z
    d12e:	81 e0       	ldi	r24, 0x01	; 1
    d130:	90 e0       	ldi	r25, 0x00	; 0
    d132:	62 e0       	ldi	r22, 0x02	; 2
    d134:	70 e0       	ldi	r23, 0x00	; 0
    d136:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    d13a:	18 0f       	add	r17, r24
			baddie_frame[idx]&=3;
    d13c:	13 70       	andi	r17, 0x03	; 3
    d13e:	f7 01       	movw	r30, r14
    d140:	10 83       	st	Z, r17
		}

		f = baddie_frame[idx];
    d142:	ce 54       	subi	r28, 0x4E	; 78
    d144:	d1 4f       	sbci	r29, 0xF1	; 241
    d146:	e8 81       	ld	r30, Y
		if (f<4)
    d148:	8e 2f       	mov	r24, r30
    d14a:	90 e0       	ldi	r25, 0x00	; 0
    d14c:	04 97       	sbiw	r24, 0x04	; 4
    d14e:	1c f4       	brge	.+6      	; 0xd156 <draw_baddie+0xbe>
		SPRITE(BEAM_02_SP+f,x,y,0,0);
    d150:	8e 2f       	mov	r24, r30
    d152:	84 5f       	subi	r24, 0xF4	; 244
    d154:	1f c0       	rjmp	.+62     	; 0xd194 <draw_baddie+0xfc>
		else
	    SPRITE( BADDIE_D_A_SP,x,y,0,0);
    d156:	82 e0       	ldi	r24, 0x02	; 2
    d158:	1d c0       	rjmp	.+58     	; 0xd194 <draw_baddie+0xfc>
		return;
	}

	if (baddie_ctrl[idx]==BADDIE_POP)
    d15a:	e8 30       	cpi	r30, 0x08	; 8
    d15c:	29 f4       	brne	.+10     	; 0xd168 <draw_baddie+0xd0>
	{
		k = CH90_EXP_A_SP + baddie_frame[idx];
		SPRITE( k ,x, y, 0, 0);
    d15e:	ce 54       	subi	r28, 0x4E	; 78
    d160:	d1 4f       	sbci	r29, 0xF1	; 241
    d162:	88 81       	ld	r24, Y
    d164:	80 5f       	subi	r24, 0xF0	; 240
    d166:	16 c0       	rjmp	.+44     	; 0xd194 <draw_baddie+0xfc>
		return;
	}
	else if (baddie_ctrl[idx]==BADDIE_STUN)
    d168:	e4 30       	cpi	r30, 0x04	; 4
    d16a:	29 f4       	brne	.+10     	; 0xd176 <draw_baddie+0xde>
	{
		k = baddie_sprite[idx];
    d16c:	fc 01       	movw	r30, r24
    d16e:	ed 52       	subi	r30, 0x2D	; 45
    d170:	f1 4f       	sbci	r31, 0xF1	; 241
    d172:	e0 81       	ld	r30, Z
    d174:	08 c0       	rjmp	.+16     	; 0xd186 <draw_baddie+0xee>
	}
	else
	{
		k = BPTR(&frames_baddie_walk[baddie_dir[idx]]);
    d176:	fc 01       	movw	r30, r24
    d178:	e7 5f       	subi	r30, 0xF7	; 247
    d17a:	ff 4e       	sbci	r31, 0xEF	; 239
    d17c:	e0 81       	ld	r30, Z
    d17e:	f0 e0       	ldi	r31, 0x00	; 0
    d180:	ed 51       	subi	r30, 0x1D	; 29
    d182:	fd 47       	sbci	r31, 0x7D	; 125
    d184:	e4 91       	lpm	r30, Z+
	}
	f=(baddie_frame[idx]>>2)&1;
	SPRITE( k + f,x,y,0,0);
    d186:	ce 54       	subi	r28, 0x4E	; 78
    d188:	d1 4f       	sbci	r29, 0xF1	; 241
    d18a:	88 81       	ld	r24, Y
    d18c:	86 95       	lsr	r24
    d18e:	86 95       	lsr	r24
    d190:	81 70       	andi	r24, 0x01	; 1
    d192:	8e 0f       	add	r24, r30
    d194:	6c 2d       	mov	r22, r12
    d196:	4a 2d       	mov	r20, r10
    d198:	20 e0       	ldi	r18, 0x00	; 0
    d19a:	00 e0       	ldi	r16, 0x00	; 0
    d19c:	0e 94 06 62 	call	0xc40c	; 0xc40c <SPRITE>
}
    d1a0:	df 91       	pop	r29
    d1a2:	cf 91       	pop	r28
    d1a4:	1f 91       	pop	r17
    d1a6:	0f 91       	pop	r16
    d1a8:	ff 90       	pop	r15
    d1aa:	ef 90       	pop	r14
    d1ac:	df 90       	pop	r13
    d1ae:	cf 90       	pop	r12
    d1b0:	bf 90       	pop	r11
    d1b2:	af 90       	pop	r10
    d1b4:	08 95       	ret

0000d1b6 <draw_idle>:
		uprintc(32);
	}
}

void draw_idle(OBJECT *p)
{
    d1b6:	4f 92       	push	r4
    d1b8:	5f 92       	push	r5
    d1ba:	7f 92       	push	r7
    d1bc:	8f 92       	push	r8
    d1be:	9f 92       	push	r9
    d1c0:	af 92       	push	r10
    d1c2:	bf 92       	push	r11
    d1c4:	cf 92       	push	r12
    d1c6:	df 92       	push	r13
    d1c8:	ef 92       	push	r14
    d1ca:	ff 92       	push	r15
    d1cc:	0f 93       	push	r16
    d1ce:	1f 93       	push	r17
    d1d0:	cf 93       	push	r28
    d1d2:	df 93       	push	r29
	font_colour(255,255,255);
	printx(temp);
#endif
   //	draw_oxygen_bar();

	if (state==STATE_FADER)
    d1d4:	80 91 ba 0e 	lds	r24, 0x0EBA
    d1d8:	84 30       	cpi	r24, 0x04	; 4
    d1da:	19 f4       	brne	.+6      	; 0xd1e2 <draw_idle+0x2c>
   	{
	 	draw_fader(0);
    d1dc:	80 e0       	ldi	r24, 0x00	; 0
    d1de:	0e 94 d2 57 	call	0xafa4	; 0xafa4 <draw_fader>
   	}

	switch(state)
    d1e2:	80 91 ba 0e 	lds	r24, 0x0EBA
    d1e6:	88 30       	cpi	r24, 0x08	; 8
    d1e8:	68 f4       	brcc	.+26     	; 0xd204 <draw_idle+0x4e>
    d1ea:	86 30       	cpi	r24, 0x06	; 6
    d1ec:	08 f0       	brcs	.+2      	; 0xd1f0 <draw_idle+0x3a>
    d1ee:	f7 c0       	rjmp	.+494    	; 0xd3de <draw_idle+0x228>
    d1f0:	82 30       	cpi	r24, 0x02	; 2
    d1f2:	09 f4       	brne	.+2      	; 0xd1f6 <draw_idle+0x40>
    d1f4:	4e c0       	rjmp	.+156    	; 0xd292 <draw_idle+0xdc>
    d1f6:	85 30       	cpi	r24, 0x05	; 5
    d1f8:	09 f4       	brne	.+2      	; 0xd1fc <draw_idle+0x46>
    d1fa:	d0 c0       	rjmp	.+416    	; 0xd39c <draw_idle+0x1e6>
    d1fc:	81 30       	cpi	r24, 0x01	; 1
    d1fe:	09 f0       	breq	.+2      	; 0xd202 <draw_idle+0x4c>
    d200:	37 c1       	rjmp	.+622    	; 0xd470 <draw_idle+0x2ba>
    d202:	42 c0       	rjmp	.+132    	; 0xd288 <draw_idle+0xd2>
    d204:	89 30       	cpi	r24, 0x09	; 9
    d206:	09 f4       	brne	.+2      	; 0xd20a <draw_idle+0x54>
    d208:	26 c1       	rjmp	.+588    	; 0xd456 <draw_idle+0x2a0>
    d20a:	89 30       	cpi	r24, 0x09	; 9
    d20c:	08 f4       	brcc	.+2      	; 0xd210 <draw_idle+0x5a>
    d20e:	41 c0       	rjmp	.+130    	; 0xd292 <draw_idle+0xdc>
    d210:	8b 30       	cpi	r24, 0x0B	; 11
    d212:	09 f4       	brne	.+2      	; 0xd216 <draw_idle+0x60>
    d214:	2b c1       	rjmp	.+598    	; 0xd46c <draw_idle+0x2b6>
    d216:	8c 30       	cpi	r24, 0x0C	; 12
    d218:	09 f0       	breq	.+2      	; 0xd21c <draw_idle+0x66>
    d21a:	2a c1       	rjmp	.+596    	; 0xd470 <draw_idle+0x2ba>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d21c:	88 e7       	ldi	r24, 0x78	; 120
    d21e:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    d222:	10 92 fa 0e 	sts	0x0EFA, r1

	switch(state)
	{
		case STATE_PAUSED:
			ugo(XREZ/2,0);
			ucprintx_dot(txt_paused);
    d226:	8b ea       	ldi	r24, 0xAB	; 171
    d228:	91 e8       	ldi	r25, 0x81	; 129
    d22a:	0e 94 1b 57 	call	0xae36	; 0xae36 <ucprintx_dot>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d22e:	80 e5       	ldi	r24, 0x50	; 80
    d230:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    d234:	88 ec       	ldi	r24, 0xC8	; 200
    d236:	80 93 fa 0e 	sts	0x0EFA, r24
		case STATE_PAUSED:
			ugo(XREZ/2,0);
			ucprintx_dot(txt_paused);
			ugo(XREZ/2-5*8,YREZ-8);

						if (continue_exit!=1)
    d23a:	80 91 e8 0e 	lds	r24, 0x0EE8
    d23e:	81 30       	cpi	r24, 0x01	; 1
    d240:	29 f0       	breq	.+10     	; 0xd24c <draw_idle+0x96>
			{
		   		ucprintx_dot(txt_continue_exit1);
    d242:	82 eb       	ldi	r24, 0xB2	; 178
    d244:	91 e8       	ldi	r25, 0x81	; 129
    d246:	0e 94 1b 57 	call	0xae36	; 0xae36 <ucprintx_dot>
    d24a:	07 c0       	rjmp	.+14     	; 0xd25a <draw_idle+0xa4>
			   //	else
			   // uprintc(32);
			}
			else
			{
		   		ucprintx(txt_continue_exit1);
    d24c:	82 eb       	ldi	r24, 0xB2	; 178
    d24e:	91 e8       	ldi	r25, 0x81	; 129
    d250:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
			 	uprintc(32);
    d254:	80 e2       	ldi	r24, 0x20	; 32
    d256:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d25a:	80 ea       	ldi	r24, 0xA0	; 160
    d25c:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    d260:	88 ec       	ldi	r24, 0xC8	; 200
    d262:	80 93 fa 0e 	sts	0x0EFA, r24
		   		ucprintx(txt_continue_exit1);
			 	uprintc(32);
			}

		    ugo(XREZ/2+5*8,YREZ-8);
			if (continue_exit!=0)
    d266:	80 91 e8 0e 	lds	r24, 0x0EE8
    d26a:	88 23       	and	r24, r24
    d26c:	29 f0       	breq	.+10     	; 0xd278 <draw_idle+0xc2>
			{
		   		ucprintx_dot(txt_continue_exit2);
    d26e:	8d eb       	ldi	r24, 0xBD	; 189
    d270:	91 e8       	ldi	r25, 0x81	; 129
    d272:	0e 94 1b 57 	call	0xae36	; 0xae36 <ucprintx_dot>
    d276:	fc c0       	rjmp	.+504    	; 0xd470 <draw_idle+0x2ba>
			  //	else
			   // uprintc(32);
		    }
			else
			{
		    	ucprintx(txt_continue_exit2);
    d278:	8d eb       	ldi	r24, 0xBD	; 189
    d27a:	91 e8       	ldi	r25, 0x81	; 129
    d27c:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
			    uprintc(32);
    d280:	80 e2       	ldi	r24, 0x20	; 32
    d282:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <uprintc>
    d286:	f4 c0       	rjmp	.+488    	; 0xd470 <draw_idle+0x2ba>
		   //	}
			break;

		case STATE_MAINMENU:
		   //	if (pend_gtimer==0)
		  		draw_main();
    d288:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <draw_main>
		  // 	else
		  // 		draw_hiscore();

			draw_menu_stars();
    d28c:	0e 94 69 62 	call	0xc4d2	; 0xc4d2 <draw_menu_stars>
    d290:	ef c0       	rjmp	.+478    	; 0xd470 <draw_idle+0x2ba>

			break;
	   //
		case STATE_RESTART:
	    case STATE_PREGAME:
			 g_oldwall=0xff;
    d292:	8f ef       	ldi	r24, 0xFF	; 255
    d294:	80 93 98 0e 	sts	0x0E98, r24
			 dirty=0xff;
    d298:	80 93 7e 0e 	sts	0x0E7E, r24
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d29c:	88 e7       	ldi	r24, 0x78	; 120
    d29e:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    d2a2:	80 e1       	ldi	r24, 0x10	; 16
    d2a4:	80 93 fa 0e 	sts	0x0EFA, r24
			 g_oldwall=0xff;
			 dirty=0xff;

#ifdef TWOPLAYER
    	    ugo(XREZ/2,2*8); //12*8
			if (current_player==1)
    d2a8:	80 91 ad 0e 	lds	r24, 0x0EAD
    d2ac:	81 30       	cpi	r24, 0x01	; 1
    d2ae:	19 f4       	brne	.+6      	; 0xd2b6 <draw_idle+0x100>
		  	  	ucprintx_dot(txt_playertwo);
    d2b0:	81 e3       	ldi	r24, 0x31	; 49
    d2b2:	92 e8       	ldi	r25, 0x82	; 130
    d2b4:	02 c0       	rjmp	.+4      	; 0xd2ba <draw_idle+0x104>
		    else
				ucprintx_dot(txt_playerone);
    d2b6:	86 e2       	ldi	r24, 0x26	; 38
    d2b8:	92 e8       	ldi	r25, 0x82	; 130
    d2ba:	0e 94 1b 57 	call	0xae36	; 0xae36 <ucprintx_dot>
    d2be:	c0 e0       	ldi	r28, 0x00	; 0
    d2c0:	d0 e0       	ldi	r29, 0x00	; 0
    d2c2:	77 24       	eor	r7, r7
    d2c4:	60 e3       	ldi	r22, 0x30	; 48
    d2c6:	c6 2e       	mov	r12, r22
    d2c8:	d1 2c       	mov	r13, r1


			k=0;
			for(y=0;y<10-4;y++)
			{
				if (y<5) count=y+1; else count=2*5-y-1;
    d2ca:	5f e0       	ldi	r21, 0x0F	; 15
    d2cc:	45 2e       	mov	r4, r21
    d2ce:	51 2c       	mov	r5, r1
    d2d0:	c5 30       	cpi	r28, 0x05	; 5
    d2d2:	d1 05       	cpc	r29, r1
    d2d4:	21 f4       	brne	.+8      	; 0xd2de <draw_idle+0x128>
    d2d6:	44 e0       	ldi	r20, 0x04	; 4
    d2d8:	a4 2e       	mov	r10, r20
    d2da:	b1 2c       	mov	r11, r1
    d2dc:	04 c0       	rjmp	.+8      	; 0xd2e6 <draw_idle+0x130>
    d2de:	5e 01       	movw	r10, r28
    d2e0:	08 94       	sec
    d2e2:	a1 1c       	adc	r10, r1
    d2e4:	b1 1c       	adc	r11, r1
    d2e6:	46 01       	movw	r8, r12
    d2e8:	82 01       	movw	r16, r4
    d2ea:	0a 19       	sub	r16, r10
    d2ec:	1b 09       	sbc	r17, r11
    d2ee:	33 e0       	ldi	r19, 0x03	; 3
    d2f0:	00 0f       	add	r16, r16
    d2f2:	11 1f       	adc	r17, r17
    d2f4:	3a 95       	dec	r19
    d2f6:	e1 f7       	brne	.-8      	; 0xd2f0 <draw_idle+0x13a>
    d2f8:	ee 24       	eor	r14, r14
    d2fa:	ff 24       	eor	r15, r15
		   		for(x=0;x<count;x++)
				{
					if (k<level[current_player])
    d2fc:	e0 91 ad 0e 	lds	r30, 0x0EAD
    d300:	ff 27       	eor	r31, r31
    d302:	e7 fd       	sbrc	r30, 7
    d304:	f0 95       	com	r31
    d306:	ea 52       	subi	r30, 0x2A	; 42
    d308:	f1 4f       	sbci	r31, 0xF1	; 241
    d30a:	e0 81       	ld	r30, Z
    d30c:	7e 16       	cp	r7, r30
    d30e:	18 f4       	brcc	.+6      	; 0xd316 <draw_idle+0x160>
					{
		   				TSPRITE(FLOOR_TILE_C_TSP,x*16+120-8*count,48+y*16);
    d310:	85 e2       	ldi	r24, 0x25	; 37
    d312:	90 e0       	ldi	r25, 0x00	; 0
    d314:	11 c0       	rjmp	.+34     	; 0xd338 <draw_idle+0x182>
					}
					else if (k==level[current_player])
    d316:	7e 16       	cp	r7, r30
    d318:	69 f4       	brne	.+26     	; 0xd334 <draw_idle+0x17e>
					{
				    	TSPRITE(FLOOR_TILE_B_TSP+((g_frame>>3)&1),x*16+120-8*count,48+y*16);
    d31a:	80 91 18 10 	lds	r24, 0x1018
    d31e:	90 91 19 10 	lds	r25, 0x1019
    d322:	23 e0       	ldi	r18, 0x03	; 3
    d324:	95 95       	asr	r25
    d326:	87 95       	ror	r24
    d328:	2a 95       	dec	r18
    d32a:	e1 f7       	brne	.-8      	; 0xd324 <draw_idle+0x16e>
    d32c:	81 70       	andi	r24, 0x01	; 1
    d32e:	90 70       	andi	r25, 0x00	; 0
    d330:	84 96       	adiw	r24, 0x24	; 36
    d332:	02 c0       	rjmp	.+4      	; 0xd338 <draw_idle+0x182>
					}
					else
				    TSPRITE(FLOOR_TILE_D_TSP,x*16+120-8*count,48+y*16);
    d334:	86 e2       	ldi	r24, 0x26	; 38
    d336:	90 e0       	ldi	r25, 0x00	; 0
    d338:	b8 01       	movw	r22, r16
    d33a:	a4 01       	movw	r20, r8
    d33c:	0e 94 e2 58 	call	0xb1c4	; 0xb1c4 <TSPRITE>
					k++;
    d340:	73 94       	inc	r7

			k=0;
			for(y=0;y<10-4;y++)
			{
				if (y<5) count=y+1; else count=2*5-y-1;
		   		for(x=0;x<count;x++)
    d342:	08 94       	sec
    d344:	e1 1c       	adc	r14, r1
    d346:	f1 1c       	adc	r15, r1
    d348:	00 5f       	subi	r16, 0xF0	; 240
    d34a:	1f 4f       	sbci	r17, 0xFF	; 255
    d34c:	ea 14       	cp	r14, r10
    d34e:	fb 04       	cpc	r15, r11
    d350:	ac f2       	brlt	.-86     	; 0xd2fc <draw_idle+0x146>
				ucprintx_dot(txt_playerone);
#endif


			k=0;
			for(y=0;y<10-4;y++)
    d352:	21 96       	adiw	r28, 0x01	; 1
    d354:	80 e1       	ldi	r24, 0x10	; 16
    d356:	90 e0       	ldi	r25, 0x00	; 0
    d358:	c8 0e       	add	r12, r24
    d35a:	d9 1e       	adc	r13, r25
    d35c:	c6 30       	cpi	r28, 0x06	; 6
    d35e:	d1 05       	cpc	r29, r1
    d360:	09 f0       	breq	.+2      	; 0xd364 <draw_idle+0x1ae>
    d362:	b6 cf       	rjmp	.-148    	; 0xd2d0 <draw_idle+0x11a>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d364:	88 e7       	ldi	r24, 0x78	; 120
    d366:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    d36a:	88 e1       	ldi	r24, 0x18	; 24
    d36c:	80 93 fa 0e 	sts	0x0EFA, r24
					k++;
				}
			}

		    ugo(XREZ/2,3*8);
			ucprintx_dot( txt_level );
    d370:	8e ee       	ldi	r24, 0xEE	; 238
    d372:	91 e8       	ldi	r25, 0x81	; 129
    d374:	0e 94 1b 57 	call	0xae36	; 0xae36 <ucprintx_dot>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d378:	80 e7       	ldi	r24, 0x70	; 112
    d37a:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    d37e:	80 e2       	ldi	r24, 0x20	; 32
    d380:	80 93 fa 0e 	sts	0x0EFA, r24
			}

		    ugo(XREZ/2,3*8);
			ucprintx_dot( txt_level );
		    ugo(XREZ/2-8,4*8);
			print_decimal(level[current_player]+1,2);
    d384:	e0 91 ad 0e 	lds	r30, 0x0EAD
    d388:	ff 27       	eor	r31, r31
    d38a:	e7 fd       	sbrc	r30, 7
    d38c:	f0 95       	com	r31
    d38e:	ea 52       	subi	r30, 0x2A	; 42
    d390:	f1 4f       	sbci	r31, 0xF1	; 241
    d392:	80 81       	ld	r24, Z
    d394:	90 e0       	ldi	r25, 0x00	; 0
    d396:	01 96       	adiw	r24, 0x01	; 1
    d398:	62 e0       	ldi	r22, 0x02	; 2
    d39a:	5a c0       	rjmp	.+180    	; 0xd450 <draw_idle+0x29a>
			break;
		//
		case STATE_INGAME:
			update_panel();
    d39c:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <update_panel>
		 	draw_block();
    d3a0:	0e 94 74 5a 	call	0xb4e8	; 0xb4e8 <draw_block>
			draw_snoblock();
    d3a4:	0e 94 37 5a 	call	0xb46e	; 0xb46e <draw_snoblock>
			draw_supa(0);
    d3a8:	80 e0       	ldi	r24, 0x00	; 0
    d3aa:	0e 94 0e 60 	call	0xc01c	; 0xc01c <draw_supa>
			draw_supa(1);
    d3ae:	81 e0       	ldi	r24, 0x01	; 1
    d3b0:	0e 94 0e 60 	call	0xc01c	; 0xc01c <draw_supa>
			draw_supa(2);
    d3b4:	82 e0       	ldi	r24, 0x02	; 2
    d3b6:	0e 94 0e 60 	call	0xc01c	; 0xc01c <draw_supa>
			draw_supa(3);
    d3ba:	83 e0       	ldi	r24, 0x03	; 3
    d3bc:	0e 94 0e 60 	call	0xc01c	; 0xc01c <draw_supa>
		  	draw_baddie(0);
    d3c0:	80 e0       	ldi	r24, 0x00	; 0
    d3c2:	90 e0       	ldi	r25, 0x00	; 0
    d3c4:	0e 94 4c 68 	call	0xd098	; 0xd098 <draw_baddie>
		  	draw_baddie(1);
    d3c8:	81 e0       	ldi	r24, 0x01	; 1
    d3ca:	90 e0       	ldi	r25, 0x00	; 0
    d3cc:	0e 94 4c 68 	call	0xd098	; 0xd098 <draw_baddie>
		  	draw_baddie(2);
    d3d0:	82 e0       	ldi	r24, 0x02	; 2
    d3d2:	90 e0       	ldi	r25, 0x00	; 0
    d3d4:	0e 94 4c 68 	call	0xd098	; 0xd098 <draw_baddie>
			draw_player();
    d3d8:	0e 94 28 62 	call	0xc450	; 0xc450 <draw_player>
    d3dc:	49 c0       	rjmp	.+146    	; 0xd470 <draw_idle+0x2ba>
			draw_background_debug();
			break;

		case STATE_POSTGAME:
		case STATE_DIAMONDS:
			update_panel();
    d3de:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <update_panel>
		 	draw_block();
    d3e2:	0e 94 74 5a 	call	0xb4e8	; 0xb4e8 <draw_block>
			draw_snoblock();
    d3e6:	0e 94 37 5a 	call	0xb46e	; 0xb46e <draw_snoblock>
			draw_supa(0);
    d3ea:	80 e0       	ldi	r24, 0x00	; 0
    d3ec:	0e 94 0e 60 	call	0xc01c	; 0xc01c <draw_supa>
			draw_supa(1);
    d3f0:	81 e0       	ldi	r24, 0x01	; 1
    d3f2:	0e 94 0e 60 	call	0xc01c	; 0xc01c <draw_supa>
			draw_supa(2);
    d3f6:	82 e0       	ldi	r24, 0x02	; 2
    d3f8:	0e 94 0e 60 	call	0xc01c	; 0xc01c <draw_supa>
		  	draw_baddie(0);
    d3fc:	80 e0       	ldi	r24, 0x00	; 0
    d3fe:	90 e0       	ldi	r25, 0x00	; 0
    d400:	0e 94 4c 68 	call	0xd098	; 0xd098 <draw_baddie>
		  	draw_baddie(1);
    d404:	81 e0       	ldi	r24, 0x01	; 1
    d406:	90 e0       	ldi	r25, 0x00	; 0
    d408:	0e 94 4c 68 	call	0xd098	; 0xd098 <draw_baddie>
		  	draw_baddie(2);
    d40c:	82 e0       	ldi	r24, 0x02	; 2
    d40e:	90 e0       	ldi	r25, 0x00	; 0
    d410:	0e 94 4c 68 	call	0xd098	; 0xd098 <draw_baddie>
			draw_player();
    d414:	0e 94 28 62 	call	0xc450	; 0xc450 <draw_player>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d418:	18 e7       	ldi	r17, 0x78	; 120
    d41a:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    d41e:	88 e5       	ldi	r24, 0x58	; 88
    d420:	80 93 fa 0e 	sts	0x0EFA, r24
		  	draw_baddie(1);
		  	draw_baddie(2);
			draw_player();

			ugo(XREZ/2,11*8);
			ucprintx(txt_level_completed);
    d424:	88 ea       	ldi	r24, 0xA8	; 168
    d426:	92 e8       	ldi	r25, 0x82	; 130
    d428:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d42c:	10 93 b5 0e 	sts	0x0EB5, r17
	uytab = y;
    d430:	08 e6       	ldi	r16, 0x68	; 104
    d432:	00 93 fa 0e 	sts	0x0EFA, r16

			ugo(XREZ/2,11*8);
			ucprintx(txt_level_completed);

			ugo(XREZ/2,13*8);
			ucprintx(txt_time_bonus);
    d436:	8a eb       	ldi	r24, 0xBA	; 186
    d438:	92 e8       	ldi	r25, 0x82	; 130
    d43a:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d43e:	00 93 b5 0e 	sts	0x0EB5, r16
	uytab = y;
    d442:	10 93 fa 0e 	sts	0x0EFA, r17

			ugo(XREZ/2,13*8);
			ucprintx(txt_time_bonus);

			ugo((XREZ/2)-8*2,15*8);
			print_decimal(g_bonus,4);
    d446:	80 91 ec 0e 	lds	r24, 0x0EEC
    d44a:	90 91 ed 0e 	lds	r25, 0x0EED
    d44e:	64 e0       	ldi	r22, 0x04	; 4
    d450:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <print_decimal>
    d454:	0d c0       	rjmp	.+26     	; 0xd470 <draw_idle+0x2ba>
}


void ugo(u8 x,u8 y)
{
	uxtab = x;
    d456:	88 e7       	ldi	r24, 0x78	; 120
    d458:	80 93 b5 0e 	sts	0x0EB5, r24
	uytab = y;
    d45c:	88 e6       	ldi	r24, 0x68	; 104
    d45e:	80 93 fa 0e 	sts	0x0EFA, r24
#ifdef TWOPLAYER
	    //    ugo(XREZ/2,2*YREZ/4-8-8-16);
		//	ucprintx(WORD(txt_player[current_player]));
#endif
		    ugo(XREZ/2,YREZ/2);
			ucprintx(txt_game_over);
    d462:	87 e6       	ldi	r24, 0x67	; 103
    d464:	92 e8       	ldi	r25, 0x82	; 130
    d466:	0e 94 73 57 	call	0xaee6	; 0xaee6 <ucprintx>
    d46a:	02 c0       	rjmp	.+4      	; 0xd470 <draw_idle+0x2ba>
			break;
		case STATE_ENTERNAME:
			break;
		case STATE_HISCORE:
			draw_hiscore();
    d46c:	0e 94 e3 5b 	call	0xb7c6	; 0xb7c6 <draw_hiscore>
#endif

#if PLATFORM_DS
   	ds_setts((char *)&ts_data[0],sizeof(ts_data),(short *)&smap[0]);
#endif
}
    d470:	df 91       	pop	r29
    d472:	cf 91       	pop	r28
    d474:	1f 91       	pop	r17
    d476:	0f 91       	pop	r16
    d478:	ff 90       	pop	r15
    d47a:	ef 90       	pop	r14
    d47c:	df 90       	pop	r13
    d47e:	cf 90       	pop	r12
    d480:	bf 90       	pop	r11
    d482:	af 90       	pop	r10
    d484:	9f 90       	pop	r9
    d486:	8f 90       	pop	r8
    d488:	7f 90       	pop	r7
    d48a:	5f 90       	pop	r5
    d48c:	4f 90       	pop	r4
    d48e:	08 95       	ret

0000d490 <respawn>:
	}
}


void	respawn(u8 i)
{
    d490:	ef 92       	push	r14
    d492:	ff 92       	push	r15
    d494:	0f 93       	push	r16
    d496:	1f 93       	push	r17
    d498:	cf 93       	push	r28
    d49a:	df 93       	push	r29
    d49c:	08 2f       	mov	r16, r24
	s16 x,y;


again4:
	x=ran(0,MAPW-1);
    d49e:	80 e0       	ldi	r24, 0x00	; 0
    d4a0:	90 e0       	ldi	r25, 0x00	; 0
    d4a2:	6c e0       	ldi	r22, 0x0C	; 12
    d4a4:	70 e0       	ldi	r23, 0x00	; 0
    d4a6:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
    d4aa:	ec 01       	movw	r28, r24
	y=ran(0,MAPH-1);
    d4ac:	80 e0       	ldi	r24, 0x00	; 0
    d4ae:	90 e0       	ldi	r25, 0x00	; 0
    d4b0:	6a e0       	ldi	r22, 0x0A	; 10
    d4b2:	70 e0       	ldi	r23, 0x00	; 0
    d4b4:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <ran>
	if (rmap(x,y)!=BLOCK_FLOOR) goto again4;
    d4b8:	7c 01       	movw	r14, r24
    d4ba:	f4 e0       	ldi	r31, 0x04	; 4
    d4bc:	ee 0c       	add	r14, r14
    d4be:	ff 1c       	adc	r15, r15
    d4c0:	fa 95       	dec	r31
    d4c2:	e1 f7       	brne	.-8      	; 0xd4bc <respawn+0x2c>
    d4c4:	fe 01       	movw	r30, r28
    d4c6:	e5 50       	subi	r30, 0x05	; 5
    d4c8:	f1 4f       	sbci	r31, 0xF1	; 241
    d4ca:	ee 0d       	add	r30, r14
    d4cc:	ff 1d       	adc	r31, r15
    d4ce:	80 81       	ld	r24, Z
    d4d0:	88 23       	and	r24, r24
    d4d2:	29 f7       	brne	.-54     	; 0xd49e <respawn+0xe>

	start_baddie(i);
    d4d4:	10 e0       	ldi	r17, 0x00	; 0
    d4d6:	c8 01       	movw	r24, r16
    d4d8:	0e 94 1d 63 	call	0xc63a	; 0xc63a <start_baddie>
	baddie_x[i] = MUL16(x);
    d4dc:	00 0f       	add	r16, r16
    d4de:	11 1f       	adc	r17, r17
    d4e0:	f8 01       	movw	r30, r16
    d4e2:	ea 55       	subi	r30, 0x5A	; 90
    d4e4:	f1 4f       	sbci	r31, 0xF1	; 241
    d4e6:	74 e0       	ldi	r23, 0x04	; 4
    d4e8:	cc 0f       	add	r28, r28
    d4ea:	dd 1f       	adc	r29, r29
    d4ec:	7a 95       	dec	r23
    d4ee:	e1 f7       	brne	.-8      	; 0xd4e8 <respawn+0x58>
    d4f0:	d1 83       	std	Z+1, r29	; 0x01
    d4f2:	c0 83       	st	Z, r28
	baddie_y[i] = MUL16(y);
    d4f4:	03 5f       	subi	r16, 0xF3	; 243
    d4f6:	1f 4e       	sbci	r17, 0xEF	; 239
    d4f8:	f8 01       	movw	r30, r16
    d4fa:	f1 82       	std	Z+1, r15	; 0x01
    d4fc:	e0 82       	st	Z, r14
}
    d4fe:	df 91       	pop	r29
    d500:	cf 91       	pop	r28
    d502:	1f 91       	pop	r17
    d504:	0f 91       	pop	r16
    d506:	ff 90       	pop	r15
    d508:	ef 90       	pop	r14
    d50a:	08 95       	ret

0000d50c <do_baddie>:
}


void	do_baddie(s16 idx)
{
    if (baddie_ctrl[idx]==BADDIE_LIMBO)
    d50c:	dc 01       	movw	r26, r24
    d50e:	a2 56       	subi	r26, 0x62	; 98
    d510:	b1 4f       	sbci	r27, 0xF1	; 241
    d512:	2c 91       	ld	r18, X
    d514:	27 30       	cpi	r18, 0x07	; 7
    d516:	51 f4       	brne	.+20     	; 0xd52c <do_baddie+0x20>
}


void baddie_limbo(s16 idx)
{
	baddie_gtimer[idx]--;
    d518:	fc 01       	movw	r30, r24
    d51a:	e0 53       	subi	r30, 0x30	; 48
    d51c:	f1 4f       	sbci	r31, 0xF1	; 241
    d51e:	80 81       	ld	r24, Z
    d520:	81 50       	subi	r24, 0x01	; 1
    d522:	80 83       	st	Z, r24
	if (baddie_gtimer[idx]<=0)
    d524:	18 16       	cp	r1, r24
    d526:	bc f1       	brlt	.+110    	; 0xd596 <do_baddie+0x8a>
	{
		baddie_ctrl[idx] = BADDIE_DEAD;
    d528:	1c 92       	st	X, r1
    d52a:	08 95       	ret

void	do_baddie(s16 idx)
{
    if (baddie_ctrl[idx]==BADDIE_LIMBO)
		baddie_limbo(idx);
    else if (baddie_ctrl[idx]==BADDIE_CRUSH)
    d52c:	25 30       	cpi	r18, 0x05	; 5
    d52e:	49 f4       	brne	.+18     	; 0xd542 <do_baddie+0x36>
   	}
}

void baddie_crush(s16 idx)
{
	baddie_gtimer[idx]--;
    d530:	fc 01       	movw	r30, r24
    d532:	e0 53       	subi	r30, 0x30	; 48
    d534:	f1 4f       	sbci	r31, 0xF1	; 241
    d536:	80 81       	ld	r24, Z
    d538:	81 50       	subi	r24, 0x01	; 1
    d53a:	80 83       	st	Z, r24
	if (baddie_gtimer[idx]<=0)
    d53c:	18 16       	cp	r1, r24
    d53e:	5c f1       	brlt	.+86     	; 0xd596 <do_baddie+0x8a>
    d540:	0f c0       	rjmp	.+30     	; 0xd560 <do_baddie+0x54>
{
    if (baddie_ctrl[idx]==BADDIE_LIMBO)
		baddie_limbo(idx);
    else if (baddie_ctrl[idx]==BADDIE_CRUSH)
		baddie_crush(idx);
	else if (baddie_ctrl[idx]==BADDIE_EGG)
    d542:	21 30       	cpi	r18, 0x01	; 1
    d544:	81 f4       	brne	.+32     	; 0xd566 <do_baddie+0x5a>

void do_egg(s16 idx)
{
  //	s16 x,y;

   	baddie_trigger[idx]--;
    d546:	fc 01       	movw	r30, r24
    d548:	ee 0f       	add	r30, r30
    d54a:	ff 1f       	adc	r31, r31
    d54c:	e0 51       	subi	r30, 0x10	; 16
    d54e:	f1 4f       	sbci	r31, 0xF1	; 241
    d550:	80 81       	ld	r24, Z
    d552:	91 81       	ldd	r25, Z+1	; 0x01
    d554:	01 97       	sbiw	r24, 0x01	; 1
    d556:	91 83       	std	Z+1, r25	; 0x01
    d558:	80 83       	st	Z, r24
   	if (baddie_trigger[idx]<=0)
    d55a:	18 16       	cp	r1, r24
    d55c:	19 06       	cpc	r1, r25
    d55e:	dc f0       	brlt	.+54     	; 0xd596 <do_baddie+0x8a>
   	{
		baddie_ctrl[idx] = BADDIE_ALIVE;
    d560:	82 e0       	ldi	r24, 0x02	; 2
    d562:	8c 93       	st	X, r24
    d564:	08 95       	ret
		baddie_limbo(idx);
    else if (baddie_ctrl[idx]==BADDIE_CRUSH)
		baddie_crush(idx);
	else if (baddie_ctrl[idx]==BADDIE_EGG)
		do_egg(idx);
	else if (baddie_ctrl[idx]==BADDIE_ALIVE)
    d566:	22 30       	cpi	r18, 0x02	; 2
    d568:	19 f4       	brne	.+6      	; 0xd570 <do_baddie+0x64>
   		do_baddie2(idx);
    d56a:	0e 94 13 64 	call	0xc826	; 0xc826 <do_baddie2>
    d56e:	08 95       	ret
    else if (baddie_ctrl[idx]==BADDIE_MOVE)
    d570:	23 30       	cpi	r18, 0x03	; 3
    d572:	19 f4       	brne	.+6      	; 0xd57a <do_baddie+0x6e>
   		baddie_move(idx);
    d574:	0e 94 c9 5f 	call	0xbf92	; 0xbf92 <baddie_move>
    d578:	08 95       	ret
    else if (baddie_ctrl[idx]==BADDIE_STUN)
    d57a:	24 30       	cpi	r18, 0x04	; 4
    d57c:	19 f4       	brne	.+6      	; 0xd584 <do_baddie+0x78>
   		baddie_stun(idx);
    d57e:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <baddie_stun>
    d582:	08 95       	ret
    else if (baddie_ctrl[idx]==BADDIE_POP)
    d584:	28 30       	cpi	r18, 0x08	; 8
    d586:	19 f4       	brne	.+6      	; 0xd58e <do_baddie+0x82>
   		baddie_pop(idx);
    d588:	0e 94 96 55 	call	0xab2c	; 0xab2c <baddie_pop>
    d58c:	08 95       	ret
    else if (baddie_ctrl[idx]==BADDIE_DEAD)
    d58e:	22 23       	and	r18, r18
    d590:	11 f4       	brne	.+4      	; 0xd596 <do_baddie+0x8a>
   		respawn(idx);
    d592:	0e 94 48 6a 	call	0xd490	; 0xd490 <respawn>
    d596:	08 95       	ret

0000d598 <hit_player_vs_baddie>:
   	play_music(0x8000|MUSIC_DIE);
}


void	hit_player_vs_baddie()
{
    d598:	af 92       	push	r10
    d59a:	bf 92       	push	r11
    d59c:	cf 92       	push	r12
    d59e:	df 92       	push	r13
    d5a0:	ef 92       	push	r14
    d5a2:	ff 92       	push	r15
    d5a4:	0f 93       	push	r16
    d5a6:	1f 93       	push	r17
    d5a8:	cf 93       	push	r28
    d5aa:	df 93       	push	r29
    d5ac:	0e e9       	ldi	r16, 0x9E	; 158
    d5ae:	1e e0       	ldi	r17, 0x0E	; 14
    d5b0:	46 ea       	ldi	r20, 0xA6	; 166
    d5b2:	c4 2e       	mov	r12, r20
    d5b4:	4e e0       	ldi	r20, 0x0E	; 14
    d5b6:	d4 2e       	mov	r13, r20
    d5b8:	3d e0       	ldi	r19, 0x0D	; 13
    d5ba:	e3 2e       	mov	r14, r19
    d5bc:	30 e1       	ldi	r19, 0x10	; 16
    d5be:	f3 2e       	mov	r15, r19
    d5c0:	c0 e0       	ldi	r28, 0x00	; 0
    d5c2:	d0 e0       	ldi	r29, 0x00	; 0
			dy=baddie_y[i]-player_y;
			if (abs(dx)<8 && abs(dy)<8)
			{
				if (baddie_ctrl[i]==BADDIE_STUN)
				{
					baddie_gtimer[i]=SECOND;
    d5c4:	2c e3       	ldi	r18, 0x3C	; 60
    d5c6:	a2 2e       	mov	r10, r18
					baddie_ctrl[i]=BADDIE_LIMBO;
    d5c8:	97 e0       	ldi	r25, 0x07	; 7
    d5ca:	b9 2e       	mov	r11, r25
	u8 i;
	s16 dx,dy;

	for(i=0;i<MAX_BADDIE;i++)
	{
			if (baddie_ctrl[i]==BADDIE_DEAD) continue;
    d5cc:	d8 01       	movw	r26, r16
    d5ce:	6c 91       	ld	r22, X
    d5d0:	66 23       	and	r22, r22
    d5d2:	09 f4       	brne	.+2      	; 0xd5d6 <hit_player_vs_baddie+0x3e>
    d5d4:	41 c0       	rjmp	.+130    	; 0xd658 <hit_player_vs_baddie+0xc0>
			if (baddie_ctrl[i]==BADDIE_LIMBO) continue;
    d5d6:	67 30       	cpi	r22, 0x07	; 7
    d5d8:	09 f4       	brne	.+2      	; 0xd5dc <hit_player_vs_baddie+0x44>
    d5da:	3e c0       	rjmp	.+124    	; 0xd658 <hit_player_vs_baddie+0xc0>
			if (baddie_ctrl[i]==BADDIE_POP) continue;
    d5dc:	68 30       	cpi	r22, 0x08	; 8
    d5de:	e1 f1       	breq	.+120    	; 0xd658 <hit_player_vs_baddie+0xc0>
		    if (baddie_ctrl[i]==BADDIE_EGG) continue;
    d5e0:	61 30       	cpi	r22, 0x01	; 1
    d5e2:	d1 f1       	breq	.+116    	; 0xd658 <hit_player_vs_baddie+0xc0>


			dx=baddie_x[i]-player_x;
			dy=baddie_y[i]-player_y;
    d5e4:	f7 01       	movw	r30, r14
    d5e6:	40 81       	ld	r20, Z
    d5e8:	51 81       	ldd	r21, Z+1	; 0x01
    d5ea:	e0 91 87 0e 	lds	r30, 0x0E87
    d5ee:	f0 91 88 0e 	lds	r31, 0x0E88
			if (abs(dx)<8 && abs(dy)<8)
    d5f2:	d6 01       	movw	r26, r12
    d5f4:	8d 91       	ld	r24, X+
    d5f6:	9c 91       	ld	r25, X
    d5f8:	20 91 fc 0f 	lds	r18, 0x0FFC
    d5fc:	30 91 fd 0f 	lds	r19, 0x0FFD
    d600:	82 1b       	sub	r24, r18
    d602:	93 0b       	sbc	r25, r19
    d604:	07 96       	adiw	r24, 0x07	; 7
    d606:	0f 97       	sbiw	r24, 0x0f	; 15
    d608:	38 f5       	brcc	.+78     	; 0xd658 <hit_player_vs_baddie+0xc0>
    d60a:	4e 1b       	sub	r20, r30
    d60c:	5f 0b       	sbc	r21, r31
    d60e:	49 5f       	subi	r20, 0xF9	; 249
    d610:	5f 4f       	sbci	r21, 0xFF	; 255
    d612:	4f 30       	cpi	r20, 0x0F	; 15
    d614:	51 05       	cpc	r21, r1
    d616:	00 f5       	brcc	.+64     	; 0xd658 <hit_player_vs_baddie+0xc0>
			{
				if (baddie_ctrl[i]==BADDIE_STUN)
    d618:	64 30       	cpi	r22, 0x04	; 4
    d61a:	c1 f4       	brne	.+48     	; 0xd64c <hit_player_vs_baddie+0xb4>
				{
					baddie_gtimer[i]=SECOND;
    d61c:	fe 01       	movw	r30, r28
    d61e:	e0 53       	subi	r30, 0x30	; 48
    d620:	f1 4f       	sbci	r31, 0xF1	; 241
    d622:	a0 82       	st	Z, r10
					baddie_ctrl[i]=BADDIE_LIMBO;
    d624:	f8 01       	movw	r30, r16
    d626:	b0 82       	st	Z, r11
					baddie_frame[i]=BADDIE_100_SP;
    d628:	fe 01       	movw	r30, r28
    d62a:	ee 54       	subi	r30, 0x4E	; 78
    d62c:	f1 4f       	sbci	r31, 0xF1	; 241
    d62e:	10 82       	st	Z, r1
					add_score(SCORE_KILL_STUNNED_BADDIE);
    d630:	8a e0       	ldi	r24, 0x0A	; 10
    d632:	90 e0       	ldi	r25, 0x00	; 0
    d634:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <add_score>
    d638:	82 e0       	ldi	r24, 0x02	; 2
    d63a:	67 e0       	ldi	r22, 0x07	; 7
    d63c:	4f ef       	ldi	r20, 0xFF	; 255
    d63e:	21 e0       	ldi	r18, 0x01	; 1
    d640:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
					sound(SFX_SNOBEE_DIE,SD_NORMAL);
				   	respawn(i);
    d644:	8c 2f       	mov	r24, r28
    d646:	0e 94 48 6a 	call	0xd490	; 0xd490 <respawn>
    d64a:	06 c0       	rjmp	.+12     	; 0xd658 <hit_player_vs_baddie+0xc0>
				}
				else
				{
			 	  	baddie_ctrl[i] = BADDIE_DEAD;
    d64c:	c2 56       	subi	r28, 0x62	; 98
    d64e:	d1 4f       	sbci	r29, 0xF1	; 241
    d650:	18 82       	st	Y, r1
					player_start_die();
    d652:	0e 94 e4 5c 	call	0xb9c8	; 0xb9c8 <player_start_die>
    d656:	0d c0       	rjmp	.+26     	; 0xd672 <hit_player_vs_baddie+0xda>
			   	  	return;
    d658:	21 96       	adiw	r28, 0x01	; 1
    d65a:	0f 5f       	subi	r16, 0xFF	; 255
    d65c:	1f 4f       	sbci	r17, 0xFF	; 255
    d65e:	82 e0       	ldi	r24, 0x02	; 2
    d660:	90 e0       	ldi	r25, 0x00	; 0
    d662:	c8 0e       	add	r12, r24
    d664:	d9 1e       	adc	r13, r25
    d666:	e8 0e       	add	r14, r24
    d668:	f9 1e       	adc	r15, r25
void	hit_player_vs_baddie()
{
	u8 i;
	s16 dx,dy;

	for(i=0;i<MAX_BADDIE;i++)
    d66a:	c3 30       	cpi	r28, 0x03	; 3
    d66c:	d1 05       	cpc	r29, r1
    d66e:	09 f0       	breq	.+2      	; 0xd672 <hit_player_vs_baddie+0xda>
    d670:	ad cf       	rjmp	.-166    	; 0xd5cc <hit_player_vs_baddie+0x34>
					player_start_die();
			   	  	return;
				}
			}
	}
}
    d672:	df 91       	pop	r29
    d674:	cf 91       	pop	r28
    d676:	1f 91       	pop	r17
    d678:	0f 91       	pop	r16
    d67a:	ff 90       	pop	r15
    d67c:	ef 90       	pop	r14
    d67e:	df 90       	pop	r13
    d680:	cf 90       	pop	r12
    d682:	bf 90       	pop	r11
    d684:	af 90       	pop	r10
    d686:	08 95       	ret

0000d688 <do_player>:
}


void	do_player()
{
   	if (player_ctrl==PLAYER_DIE)
    d688:	80 91 dd 0e 	lds	r24, 0x0EDD
    d68c:	83 30       	cpi	r24, 0x03	; 3
    d68e:	19 f4       	brne	.+6      	; 0xd696 <do_player+0xe>
			player_die();
    d690:	0e 94 cf 54 	call	0xa99e	; 0xa99e <player_die>
    d694:	09 c0       	rjmp	.+18     	; 0xd6a8 <do_player+0x20>
	else if (player_ctrl==PLAYER_ALIVE)
    d696:	81 30       	cpi	r24, 0x01	; 1
    d698:	19 f4       	brne	.+6      	; 0xd6a0 <do_player+0x18>
			do_player2();
    d69a:	0e 94 40 66 	call	0xcc80	; 0xcc80 <do_player2>
    d69e:	04 c0       	rjmp	.+8      	; 0xd6a8 <do_player+0x20>
    else if (player_ctrl==PLAYER_MOVE)
    d6a0:	82 30       	cpi	r24, 0x02	; 2
    d6a2:	11 f4       	brne	.+4      	; 0xd6a8 <do_player+0x20>
			player_walk();
    d6a4:	0e 94 bd 52 	call	0xa57a	; 0xa57a <player_walk>

	if (player_ctrl!=PLAYER_DIE && player_ctrl!=PLAYER_DEAD)
    d6a8:	80 91 dd 0e 	lds	r24, 0x0EDD
    d6ac:	83 30       	cpi	r24, 0x03	; 3
    d6ae:	21 f0       	breq	.+8      	; 0xd6b8 <do_player+0x30>
    d6b0:	88 23       	and	r24, r24
    d6b2:	11 f0       	breq	.+4      	; 0xd6b8 <do_player+0x30>
   		hit_player_vs_baddie();
    d6b4:	0e 94 cc 6a 	call	0xd598	; 0xd598 <hit_player_vs_baddie>
    d6b8:	08 95       	ret

0000d6ba <do_idle>:


void	do_idle(OBJECT *p)
{
	p=p;
	g_frame++;
    d6ba:	20 91 18 10 	lds	r18, 0x1018
    d6be:	30 91 19 10 	lds	r19, 0x1019
    d6c2:	2f 5f       	subi	r18, 0xFF	; 255
    d6c4:	3f 4f       	sbci	r19, 0xFF	; 255
    d6c6:	30 93 19 10 	sts	0x1019, r19
    d6ca:	20 93 18 10 	sts	0x1018, r18

	switch(state)
    d6ce:	80 91 ba 0e 	lds	r24, 0x0EBA
    d6d2:	86 30       	cpi	r24, 0x06	; 6
    d6d4:	09 f4       	brne	.+2      	; 0xd6d8 <do_idle+0x1e>
    d6d6:	a4 c1       	rjmp	.+840    	; 0xda20 <do_idle+0x366>
    d6d8:	87 30       	cpi	r24, 0x07	; 7
    d6da:	88 f4       	brcc	.+34     	; 0xd6fe <do_idle+0x44>
    d6dc:	82 30       	cpi	r24, 0x02	; 2
    d6de:	09 f4       	brne	.+2      	; 0xd6e2 <do_idle+0x28>
    d6e0:	7e c0       	rjmp	.+252    	; 0xd7de <do_idle+0x124>
    d6e2:	83 30       	cpi	r24, 0x03	; 3
    d6e4:	30 f4       	brcc	.+12     	; 0xd6f2 <do_idle+0x38>
    d6e6:	88 23       	and	r24, r24
    d6e8:	d9 f1       	breq	.+118    	; 0xd760 <do_idle+0xa6>
    d6ea:	81 30       	cpi	r24, 0x01	; 1
    d6ec:	09 f0       	breq	.+2      	; 0xd6f0 <do_idle+0x36>
    d6ee:	7b c2       	rjmp	.+1270   	; 0xdbe6 <do_idle+0x52c>
    d6f0:	39 c0       	rjmp	.+114    	; 0xd764 <do_idle+0xaa>
    d6f2:	84 30       	cpi	r24, 0x04	; 4
    d6f4:	21 f1       	breq	.+72     	; 0xd73e <do_idle+0x84>
    d6f6:	85 30       	cpi	r24, 0x05	; 5
    d6f8:	08 f0       	brcs	.+2      	; 0xd6fc <do_idle+0x42>
    d6fa:	03 c1       	rjmp	.+518    	; 0xd902 <do_idle+0x248>
    d6fc:	16 c0       	rjmp	.+44     	; 0xd72a <do_idle+0x70>
    d6fe:	89 30       	cpi	r24, 0x09	; 9
    d700:	09 f4       	brne	.+2      	; 0xd704 <do_idle+0x4a>
    d702:	20 c2       	rjmp	.+1088   	; 0xdb44 <do_idle+0x48a>
    d704:	8a 30       	cpi	r24, 0x0A	; 10
    d706:	38 f4       	brcc	.+14     	; 0xd716 <do_idle+0x5c>
    d708:	87 30       	cpi	r24, 0x07	; 7
    d70a:	09 f4       	brne	.+2      	; 0xd70e <do_idle+0x54>
    d70c:	c6 c1       	rjmp	.+908    	; 0xda9a <do_idle+0x3e0>
    d70e:	88 30       	cpi	r24, 0x08	; 8
    d710:	09 f0       	breq	.+2      	; 0xd714 <do_idle+0x5a>
    d712:	69 c2       	rjmp	.+1234   	; 0xdbe6 <do_idle+0x52c>
    d714:	8c c0       	rjmp	.+280    	; 0xd82e <do_idle+0x174>
    d716:	8b 30       	cpi	r24, 0x0B	; 11
    d718:	09 f4       	brne	.+2      	; 0xd71c <do_idle+0x62>
    d71a:	3a c2       	rjmp	.+1140   	; 0xdb90 <do_idle+0x4d6>
    d71c:	8b 30       	cpi	r24, 0x0B	; 11
    d71e:	08 f4       	brcc	.+2      	; 0xd722 <do_idle+0x68>
    d720:	34 c2       	rjmp	.+1128   	; 0xdb8a <do_idle+0x4d0>
    d722:	8c 30       	cpi	r24, 0x0C	; 12
    d724:	09 f0       	breq	.+2      	; 0xd728 <do_idle+0x6e>
    d726:	5f c2       	rjmp	.+1214   	; 0xdbe6 <do_idle+0x52c>
    d728:	9b c0       	rjmp	.+310    	; 0xd860 <do_idle+0x1a6>
    d72a:	82 e0       	ldi	r24, 0x02	; 2
    d72c:	6b e0       	ldi	r22, 0x0B	; 11
    d72e:	4f ef       	ldi	r20, 0xFF	; 255
    d730:	21 e0       	ldi	r18, 0x01	; 1
    d732:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
	{
		case STATE_FADER_START:
		   	sound(SFX_ZOOM,SD_NORMAL);
			start_fader_single();
    d736:	0e 94 b8 51 	call	0xa370	; 0xa370 <start_fader_single>
			state = STATE_FADER;
    d73a:	84 e0       	ldi	r24, 0x04	; 4
    d73c:	0e c0       	rjmp	.+28     	; 0xd75a <do_idle+0xa0>
			break;

		case STATE_FADER:
  			do_fader(0);
    d73e:	80 e0       	ldi	r24, 0x00	; 0
    d740:	0e 94 2b 51 	call	0xa256	; 0xa256 <do_fader>
	   		if ( faders[0].ctrl == 2 )
    d744:	80 91 97 0e 	lds	r24, 0x0E97
    d748:	82 30       	cpi	r24, 0x02	; 2
    d74a:	09 f0       	breq	.+2      	; 0xd74e <do_idle+0x94>
    d74c:	4c c2       	rjmp	.+1176   	; 0xdbe6 <do_idle+0x52c>
			{
				g_frame=0;
    d74e:	10 92 19 10 	sts	0x1019, r1
    d752:	10 92 18 10 	sts	0x1018, r1
			 	state = pend_state;
    d756:	80 91 ef 0e 	lds	r24, 0x0EEF
    d75a:	80 93 ba 0e 	sts	0x0EBA, r24
    d75e:	08 95       	ret
			}
	   		break;

		case STATE_PREMENU:
			state++;
    d760:	81 e0       	ldi	r24, 0x01	; 1
    d762:	fb cf       	rjmp	.-10     	; 0xd75a <do_idle+0xa0>
			break;

		case STATE_MAINMENU:
			gtimer++;
    d764:	80 91 89 0e 	lds	r24, 0x0E89
    d768:	90 91 8a 0e 	lds	r25, 0x0E8A
    d76c:	01 96       	adiw	r24, 0x01	; 1
    d76e:	90 93 8a 0e 	sts	0x0E8A, r25
    d772:	80 93 89 0e 	sts	0x0E89, r24
			// any key goes to the main menu



		    if (pad(0xFFFF))
    d776:	80 91 0c 0e 	lds	r24, 0x0E0C
    d77a:	90 91 0d 0e 	lds	r25, 0x0E0D
    d77e:	89 2b       	or	r24, r25
    d780:	51 f0       	breq	.+20     	; 0xd796 <do_idle+0xdc>
				gtimer=0;
    d782:	10 92 8a 0e 	sts	0x0E8A, r1
    d786:	10 92 89 0e 	sts	0x0E89, r1

			if (pad(0xFFFF) && pend_gtimer)
    d78a:	80 91 b8 0e 	lds	r24, 0x0EB8
    d78e:	88 23       	and	r24, r24
    d790:	11 f0       	breq	.+4      	; 0xd796 <do_idle+0xdc>
			{
				gtimer=0;
				pend_gtimer=0;
    d792:	10 92 b8 0e 	sts	0x0EB8, r1
			}
			// swap hiscore/title
			if ((gtimer&0x200)==0x200)
    d796:	80 91 89 0e 	lds	r24, 0x0E89
    d79a:	90 91 8a 0e 	lds	r25, 0x0E8A
    d79e:	91 ff       	sbrs	r25, 1
    d7a0:	06 c0       	rjmp	.+12     	; 0xd7ae <do_idle+0xf4>
			{
				pend_gtimer^=1;
    d7a2:	80 91 b8 0e 	lds	r24, 0x0EB8
    d7a6:	91 e0       	ldi	r25, 0x01	; 1
    d7a8:	89 27       	eor	r24, r25
    d7aa:	80 93 b8 0e 	sts	0x0EB8, r24
			if (xpad(JOY_B))  TriggerFxChannel(2,13,255,1);
			if (xpad(JOY_X))  TriggerFxChannel(2,14,255,1);
			if (xpad(JOY_Y))  TriggerFxChannel(2,15,255,1);

#else
	  	    if (xpad((JOY_START|JOY_A)))
    d7ae:	80 91 0a 0e 	lds	r24, 0x0E0A
    d7b2:	90 91 0b 0e 	lds	r25, 0x0E0B
    d7b6:	88 70       	andi	r24, 0x08	; 8
    d7b8:	91 70       	andi	r25, 0x01	; 1
    d7ba:	89 2b       	or	r24, r25
    d7bc:	09 f4       	brne	.+2      	; 0xd7c0 <do_idle+0x106>
    d7be:	13 c2       	rjmp	.+1062   	; 0xdbe6 <do_idle+0x52c>
			{
				state = STATE_FADER_START;
    d7c0:	83 e0       	ldi	r24, 0x03	; 3
    d7c2:	80 93 ba 0e 	sts	0x0EBA, r24
			   	pend_state = STATE_PREGAME;
    d7c6:	82 e0       	ldi	r24, 0x02	; 2
    d7c8:	80 93 ef 0e 	sts	0x0EEF, r24
			  	gtimer = 20*SECOND;
    d7cc:	80 eb       	ldi	r24, 0xB0	; 176
    d7ce:	94 e0       	ldi	r25, 0x04	; 4
    d7d0:	90 93 8a 0e 	sts	0x0E8A, r25
    d7d4:	80 93 89 0e 	sts	0x0E89, r24
			  	new_game();
    d7d8:	0e 94 f9 63 	call	0xc7f2	; 0xc7f2 <new_game>
    d7dc:	08 95       	ret
#endif
			break;


		case STATE_PREGAME:
			gtimer--;
    d7de:	80 91 89 0e 	lds	r24, 0x0E89
    d7e2:	90 91 8a 0e 	lds	r25, 0x0E8A
    d7e6:	01 97       	sbiw	r24, 0x01	; 1
    d7e8:	90 93 8a 0e 	sts	0x0E8A, r25
    d7ec:	80 93 89 0e 	sts	0x0E89, r24
			if (gtimer==0 || xpad((JOY_A|JOY_START)))
    d7f0:	89 2b       	or	r24, r25
    d7f2:	49 f0       	breq	.+18     	; 0xd806 <do_idle+0x14c>
    d7f4:	80 91 0a 0e 	lds	r24, 0x0E0A
    d7f8:	90 91 0b 0e 	lds	r25, 0x0E0B
    d7fc:	88 70       	andi	r24, 0x08	; 8
    d7fe:	91 70       	andi	r25, 0x01	; 1
    d800:	89 2b       	or	r24, r25
    d802:	09 f4       	brne	.+2      	; 0xd806 <do_idle+0x14c>
    d804:	f0 c1       	rjmp	.+992    	; 0xdbe6 <do_idle+0x52c>
			{
		  		state=STATE_INGAME;
    d806:	85 e0       	ldi	r24, 0x05	; 5
    d808:	80 93 ba 0e 	sts	0x0EBA, r24
		  		new_level();
    d80c:	0e 94 cc 63 	call	0xc798	; 0xc798 <new_level>
		  		draw_background();
    d810:	0e 94 a7 64 	call	0xc94e	; 0xc94e <draw_background>
		  		gtimer=3*SECOND;
    d814:	84 eb       	ldi	r24, 0xB4	; 180
    d816:	90 e0       	ldi	r25, 0x00	; 0
    d818:	90 93 8a 0e 	sts	0x0E8A, r25
    d81c:	80 93 89 0e 	sts	0x0E89, r24
		  		g_bonus=2000;
    d820:	80 ed       	ldi	r24, 0xD0	; 208
    d822:	97 e0       	ldi	r25, 0x07	; 7
    d824:	90 93 ed 0e 	sts	0x0EED, r25
    d828:	80 93 ec 0e 	sts	0x0EEC, r24
    d82c:	08 95       	ret
			}
			break;

		 case STATE_RESTART:
			gtimer--;
    d82e:	80 91 89 0e 	lds	r24, 0x0E89
    d832:	90 91 8a 0e 	lds	r25, 0x0E8A
    d836:	01 97       	sbiw	r24, 0x01	; 1
    d838:	90 93 8a 0e 	sts	0x0E8A, r25
    d83c:	80 93 89 0e 	sts	0x0E89, r24
			if (gtimer<=0)
    d840:	18 16       	cp	r1, r24
    d842:	19 06       	cpc	r1, r25
    d844:	0c f4       	brge	.+2      	; 0xd848 <do_idle+0x18e>
    d846:	cf c1       	rjmp	.+926    	; 0xdbe6 <do_idle+0x52c>
			{
			   	state=STATE_INGAME;
    d848:	85 e0       	ldi	r24, 0x05	; 5
    d84a:	80 93 ba 0e 	sts	0x0EBA, r24
				restart_level();
    d84e:	0e 94 3b 63 	call	0xc676	; 0xc676 <restart_level>
				draw_background();
    d852:	0e 94 a7 64 	call	0xc94e	; 0xc94e <draw_background>
			    play_music(MUSIC_INGAMEA);
    d856:	83 e0       	ldi	r24, 0x03	; 3
    d858:	90 e0       	ldi	r25, 0x00	; 0
    d85a:	0e 94 c8 5c 	call	0xb990	; 0xb990 <play_music>
    d85e:	08 95       	ret
			}
			break;

		case STATE_PAUSED:
				if (pad(JOY_LEFT))
    d860:	80 91 0c 0e 	lds	r24, 0x0E0C
    d864:	86 ff       	sbrs	r24, 6
    d866:	0c c0       	rjmp	.+24     	; 0xd880 <do_idle+0x1c6>
    d868:	82 e0       	ldi	r24, 0x02	; 2
    d86a:	64 e0       	ldi	r22, 0x04	; 4
    d86c:	4f ef       	ldi	r20, 0xFF	; 255
    d86e:	21 e0       	ldi	r18, 0x01	; 1
    d870:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
				{
					sound(SFX_SHOOT,SD_NORMAL);
			 		g_frame=0;
    d874:	10 92 19 10 	sts	0x1019, r1
    d878:	10 92 18 10 	sts	0x1018, r1
					continue_exit=0;
    d87c:	10 92 e8 0e 	sts	0x0EE8, r1
				}
				if (pad(JOY_RIGHT))
    d880:	80 91 0c 0e 	lds	r24, 0x0E0C
    d884:	87 ff       	sbrs	r24, 7
    d886:	0d c0       	rjmp	.+26     	; 0xd8a2 <do_idle+0x1e8>
    d888:	82 e0       	ldi	r24, 0x02	; 2
    d88a:	64 e0       	ldi	r22, 0x04	; 4
    d88c:	4f ef       	ldi	r20, 0xFF	; 255
    d88e:	21 e0       	ldi	r18, 0x01	; 1
    d890:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
			   	{
					sound(SFX_SHOOT,SD_NORMAL);
			 		g_frame=0;
    d894:	10 92 19 10 	sts	0x1019, r1
    d898:	10 92 18 10 	sts	0x1018, r1
					continue_exit=1;
    d89c:	81 e0       	ldi	r24, 0x01	; 1
    d89e:	80 93 e8 0e 	sts	0x0EE8, r24
			   	}

				// enable
				if (g_frame>=16) continue_exit&=1;
    d8a2:	80 91 18 10 	lds	r24, 0x1018
    d8a6:	90 91 19 10 	lds	r25, 0x1019
    d8aa:	40 97       	sbiw	r24, 0x10	; 16
    d8ac:	2c f0       	brlt	.+10     	; 0xd8b8 <do_idle+0x1fe>
    d8ae:	80 91 e8 0e 	lds	r24, 0x0EE8
    d8b2:	81 70       	andi	r24, 0x01	; 1
    d8b4:	80 93 e8 0e 	sts	0x0EE8, r24


				if (xpad(JOY_A))
    d8b8:	80 91 0a 0e 	lds	r24, 0x0E0A
    d8bc:	90 91 0b 0e 	lds	r25, 0x0E0B
    d8c0:	90 ff       	sbrs	r25, 0
    d8c2:	12 c0       	rjmp	.+36     	; 0xd8e8 <do_idle+0x22e>
				{
				 	if (continue_exit==1)
    d8c4:	80 91 e8 0e 	lds	r24, 0x0EE8
    d8c8:	81 30       	cpi	r24, 0x01	; 1
    d8ca:	39 f4       	brne	.+14     	; 0xd8da <do_idle+0x220>
					{
						g_frame=0;
    d8cc:	10 92 19 10 	sts	0x1019, r1
    d8d0:	10 92 18 10 	sts	0x1018, r1
					   	state=STATE_PREMENU;
    d8d4:	10 92 ba 0e 	sts	0x0EBA, r1
    d8d8:	72 c1       	rjmp	.+740    	; 0xdbbe <do_idle+0x504>
    d8da:	82 e0       	ldi	r24, 0x02	; 2
    d8dc:	6a e0       	ldi	r22, 0x0A	; 10
    d8de:	4f ef       	ldi	r20, 0xFF	; 255
    d8e0:	21 e0       	ldi	r18, 0x01	; 1
    d8e2:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
    d8e6:	02 c0       	rjmp	.+4      	; 0xd8ec <do_idle+0x232>
				 		PanelClear();
						dirty = 0xff;
				 		return;
					}
				}
			    if (xpad(JOY_START))
    d8e8:	83 ff       	sbrs	r24, 3
    d8ea:	7d c1       	rjmp	.+762    	; 0xdbe6 <do_idle+0x52c>
				{
				 	ResumeSong();
    d8ec:	0e 94 2a 48 	call	0x9054	; 0x9054 <ResumeSong>
				 	state=STATE_INGAME;
    d8f0:	85 e0       	ldi	r24, 0x05	; 5
    d8f2:	80 93 ba 0e 	sts	0x0EBA, r24
				 	PanelClear();
    d8f6:	0e 94 9d 56 	call	0xad3a	; 0xad3a <PanelClear>
					dirty = 0xff;
    d8fa:	8f ef       	ldi	r24, 0xFF	; 255
    d8fc:	80 93 7e 0e 	sts	0x0E7E, r24
    d900:	08 95       	ret
				}
			break;

		case STATE_INGAME:

			if ((g_frame&127)==0)
    d902:	2f 77       	andi	r18, 0x7F	; 127
    d904:	30 70       	andi	r19, 0x00	; 0
    d906:	23 2b       	or	r18, r19
    d908:	59 f4       	brne	.+22     	; 0xd920 <do_idle+0x266>
			{
				if (g_oxygen)
    d90a:	80 91 b0 0e 	lds	r24, 0x0EB0
    d90e:	88 23       	and	r24, r24
    d910:	39 f0       	breq	.+14     	; 0xd920 <do_idle+0x266>
				{
					g_oxygen--;
    d912:	81 50       	subi	r24, 0x01	; 1
    d914:	80 93 b0 0e 	sts	0x0EB0, r24
			   		if (g_oxygen==0)
    d918:	88 23       	and	r24, r24
    d91a:	11 f4       	brne	.+4      	; 0xd920 <do_idle+0x266>
			   		{
					   player_start_die();
    d91c:	0e 94 e4 5c 	call	0xb9c8	; 0xb9c8 <player_start_die>
				}
			}


			  // start pause
			    if (xpad(JOY_START))
    d920:	80 91 0a 0e 	lds	r24, 0x0E0A
    d924:	83 ff       	sbrs	r24, 3
    d926:	15 c0       	rjmp	.+42     	; 0xd952 <do_idle+0x298>
				{
				  	StopSong();
    d928:	0e 94 1e 48 	call	0x903c	; 0x903c <StopSong>
				  	continue_exit=4;
    d92c:	84 e0       	ldi	r24, 0x04	; 4
    d92e:	80 93 e8 0e 	sts	0x0EE8, r24
				  	state=STATE_PAUSED;
    d932:	8c e0       	ldi	r24, 0x0C	; 12
    d934:	80 93 ba 0e 	sts	0x0EBA, r24
				  	PanelClear();
    d938:	0e 94 9d 56 	call	0xad3a	; 0xad3a <PanelClear>
				  	g_frame=0;
    d93c:	10 92 19 10 	sts	0x1019, r1
    d940:	10 92 18 10 	sts	0x1018, r1
    d944:	82 e0       	ldi	r24, 0x02	; 2
    d946:	6a e0       	ldi	r22, 0x0A	; 10
    d948:	4f ef       	ldi	r20, 0xFF	; 255
    d94a:	21 e0       	ldi	r18, 0x01	; 1
    d94c:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
    d950:	08 95       	ret
				  	return;
				}



			if (gtimer) gtimer--;
    d952:	80 91 89 0e 	lds	r24, 0x0E89
    d956:	90 91 8a 0e 	lds	r25, 0x0E8A
    d95a:	00 97       	sbiw	r24, 0x00	; 0
    d95c:	29 f0       	breq	.+10     	; 0xd968 <do_idle+0x2ae>
    d95e:	01 97       	sbiw	r24, 0x01	; 1
    d960:	90 93 8a 0e 	sts	0x0E8A, r25
    d964:	80 93 89 0e 	sts	0x0E89, r24
			if (gtimer==1)
    d968:	80 91 89 0e 	lds	r24, 0x0E89
    d96c:	90 91 8a 0e 	lds	r25, 0x0E8A
    d970:	01 97       	sbiw	r24, 0x01	; 1
    d972:	21 f4       	brne	.+8      	; 0xd97c <do_idle+0x2c2>
			{
		    	play_music(MUSIC_INGAMEA);
    d974:	83 e0       	ldi	r24, 0x03	; 3
    d976:	90 e0       	ldi	r25, 0x00	; 0
    d978:	0e 94 c8 5c 	call	0xb990	; 0xb990 <play_music>
			}

			move_bullets();
    d97c:	0e 94 7a 5d 	call	0xbaf4	; 0xbaf4 <move_bullets>
 #endif




			if (gtimer==0)
    d980:	80 91 89 0e 	lds	r24, 0x0E89
    d984:	90 91 8a 0e 	lds	r25, 0x0E8A
    d988:	89 2b       	or	r24, r25
    d98a:	71 f5       	brne	.+92     	; 0xd9e8 <do_idle+0x32e>
			{
				if (g_bonus && (g_frame&255)==0) g_bonus-=100;
    d98c:	20 91 ec 0e 	lds	r18, 0x0EEC
    d990:	30 91 ed 0e 	lds	r19, 0x0EED
    d994:	21 15       	cp	r18, r1
    d996:	31 05       	cpc	r19, r1
    d998:	51 f0       	breq	.+20     	; 0xd9ae <do_idle+0x2f4>
    d99a:	80 91 18 10 	lds	r24, 0x1018
    d99e:	88 23       	and	r24, r24
    d9a0:	31 f4       	brne	.+12     	; 0xd9ae <do_idle+0x2f4>
    d9a2:	24 56       	subi	r18, 0x64	; 100
    d9a4:	30 40       	sbci	r19, 0x00	; 0
    d9a6:	30 93 ed 0e 	sts	0x0EED, r19
    d9aa:	20 93 ec 0e 	sts	0x0EEC, r18
	 		  	do_player();
    d9ae:	0e 94 44 6b 	call	0xd688	; 0xd688 <do_player>
	  		 	do_block();
    d9b2:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <do_block>
				snoblock_crush();
    d9b6:	0e 94 61 54 	call	0xa8c2	; 0xa8c2 <snoblock_crush>
	   			do_baddie(0);
    d9ba:	80 e0       	ldi	r24, 0x00	; 0
    d9bc:	90 e0       	ldi	r25, 0x00	; 0
    d9be:	0e 94 86 6a 	call	0xd50c	; 0xd50c <do_baddie>
	 			do_baddie(1);
    d9c2:	81 e0       	ldi	r24, 0x01	; 1
    d9c4:	90 e0       	ldi	r25, 0x00	; 0
    d9c6:	0e 94 86 6a 	call	0xd50c	; 0xd50c <do_baddie>
				do_baddie(2);
    d9ca:	82 e0       	ldi	r24, 0x02	; 2
    d9cc:	90 e0       	ldi	r25, 0x00	; 0
    d9ce:	0e 94 86 6a 	call	0xd50c	; 0xd50c <do_baddie>
				if (supa_done<=0)
    d9d2:	80 91 bb 0e 	lds	r24, 0x0EBB
    d9d6:	18 16       	cp	r1, r24
    d9d8:	3c f0       	brlt	.+14     	; 0xd9e8 <do_idle+0x32e>
				{
					if (pend_gtimer==0)
    d9da:	80 91 b8 0e 	lds	r24, 0x0EB8
    d9de:	88 23       	and	r24, r24
    d9e0:	19 f4       	brne	.+6      	; 0xd9e8 <do_idle+0x32e>
					{
					  	pend_gtimer = 1*SECOND;
    d9e2:	8c e3       	ldi	r24, 0x3C	; 60
    d9e4:	80 93 b8 0e 	sts	0x0EB8, r24
				   	}
				}
			}
			// exits level
			if (pend_gtimer)
    d9e8:	80 91 b8 0e 	lds	r24, 0x0EB8
    d9ec:	88 23       	and	r24, r24
    d9ee:	09 f4       	brne	.+2      	; 0xd9f2 <do_idle+0x338>
    d9f0:	fa c0       	rjmp	.+500    	; 0xdbe6 <do_idle+0x52c>
			{
				pend_gtimer--;
    d9f2:	81 50       	subi	r24, 0x01	; 1
    d9f4:	80 93 b8 0e 	sts	0x0EB8, r24
				if (pend_gtimer<=0)
    d9f8:	18 16       	cp	r1, r24
    d9fa:	0c f4       	brge	.+2      	; 0xd9fe <do_idle+0x344>
    d9fc:	f4 c0       	rjmp	.+488    	; 0xdbe6 <do_idle+0x52c>
				{
				    gtimer=2*SECOND;
    d9fe:	88 e7       	ldi	r24, 0x78	; 120
    da00:	90 e0       	ldi	r25, 0x00	; 0
    da02:	90 93 8a 0e 	sts	0x0E8A, r25
    da06:	80 93 89 0e 	sts	0x0E89, r24
					state = STATE_POSTGAME;
    da0a:	87 e0       	ldi	r24, 0x07	; 7
    da0c:	80 93 ba 0e 	sts	0x0EBA, r24
					play_music(0);
    da10:	80 e0       	ldi	r24, 0x00	; 0
    da12:	90 e0       	ldi	r25, 0x00	; 0
    da14:	0e 94 c8 5c 	call	0xb990	; 0xb990 <play_music>
				   	ClearMap(0);
    da18:	80 e0       	ldi	r24, 0x00	; 0
    da1a:	0e 94 36 5b 	call	0xb66c	; 0xb66c <ClearMap>
    da1e:	08 95       	ret
			//	gtimer = 5*SECOND;
			  }
			break;

		case STATE_DIAMONDS:
			if ((gtimer&3)==3)
    da20:	80 91 89 0e 	lds	r24, 0x0E89
    da24:	90 91 8a 0e 	lds	r25, 0x0E8A
    da28:	83 70       	andi	r24, 0x03	; 3
    da2a:	90 70       	andi	r25, 0x00	; 0
    da2c:	03 97       	sbiw	r24, 0x03	; 3
    da2e:	81 f4       	brne	.+32     	; 0xda50 <do_idle+0x396>
    da30:	82 e0       	ldi	r24, 0x02	; 2
    da32:	6f e0       	ldi	r22, 0x0F	; 15
    da34:	4f ef       	ldi	r20, 0xFF	; 255
    da36:	21 e0       	ldi	r18, 0x01	; 1
    da38:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
}

void	sound2(int a,int pri)
{
	TriggerFxChannel(1,a,255,1);
    da3c:	81 e0       	ldi	r24, 0x01	; 1
    da3e:	60 e1       	ldi	r22, 0x10	; 16
    da40:	4f ef       	ldi	r20, 0xFF	; 255
    da42:	21 e0       	ldi	r18, 0x01	; 1
    da44:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
			{
				sound(SFX_BONUS_CLICK,SD_NORMAL);
				sound2(SFX_BONUS_CLICKB,SD_NORMAL);
				add_score(SCORE_BONUS_ADD);
    da48:	8a e0       	ldi	r24, 0x0A	; 10
    da4a:	90 e0       	ldi	r25, 0x00	; 0
    da4c:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <add_score>
			}
		    if (gtimer) gtimer--;
    da50:	80 91 89 0e 	lds	r24, 0x0E89
    da54:	90 91 8a 0e 	lds	r25, 0x0E8A
    da58:	00 97       	sbiw	r24, 0x00	; 0
    da5a:	29 f0       	breq	.+10     	; 0xda66 <do_idle+0x3ac>
    da5c:	01 97       	sbiw	r24, 0x01	; 1
    da5e:	90 93 8a 0e 	sts	0x0E8A, r25
    da62:	80 93 89 0e 	sts	0x0E89, r24
			if (gtimer<=0)
    da66:	80 91 89 0e 	lds	r24, 0x0E89
    da6a:	90 91 8a 0e 	lds	r25, 0x0E8A
    da6e:	18 16       	cp	r1, r24
    da70:	19 06       	cpc	r1, r25
    da72:	0c f4       	brge	.+2      	; 0xda76 <do_idle+0x3bc>
    da74:	b8 c0       	rjmp	.+368    	; 0xdbe6 <do_idle+0x52c>
			{
				force_stun(0);
    da76:	80 e0       	ldi	r24, 0x00	; 0
    da78:	0e 94 76 55 	call	0xaaec	; 0xaaec <force_stun>
				force_stun(1);
    da7c:	81 e0       	ldi	r24, 0x01	; 1
    da7e:	0e 94 76 55 	call	0xaaec	; 0xaaec <force_stun>
				force_stun(2);
    da82:	82 e0       	ldi	r24, 0x02	; 2
    da84:	0e 94 76 55 	call	0xaaec	; 0xaaec <force_stun>
				state = STATE_INGAME;
    da88:	85 e0       	ldi	r24, 0x05	; 5
    da8a:	80 93 ba 0e 	sts	0x0EBA, r24
				g_oldwall=0xff;
    da8e:	8f ef       	ldi	r24, 0xFF	; 255
    da90:	80 93 98 0e 	sts	0x0E98, r24
				supa_count=255;
    da94:	80 93 e3 0e 	sts	0x0EE3, r24
    da98:	08 95       	ret
			}
			break;

		case STATE_POSTGAME:
			if ((g_frame&3)==0)
    da9a:	23 70       	andi	r18, 0x03	; 3
    da9c:	30 70       	andi	r19, 0x00	; 0
    da9e:	23 2b       	or	r18, r19
    daa0:	01 f5       	brne	.+64     	; 0xdae2 <do_idle+0x428>
			{
		  		if (g_bonus)
    daa2:	80 91 ec 0e 	lds	r24, 0x0EEC
    daa6:	90 91 ed 0e 	lds	r25, 0x0EED
    daaa:	89 2b       	or	r24, r25
    daac:	d1 f0       	breq	.+52     	; 0xdae2 <do_idle+0x428>



void	sound(int a,int pri)
{
	TriggerFxChannel(2,a,255,1);
    daae:	82 e0       	ldi	r24, 0x02	; 2
    dab0:	6f e0       	ldi	r22, 0x0F	; 15
    dab2:	4f ef       	ldi	r20, 0xFF	; 255
    dab4:	21 e0       	ldi	r18, 0x01	; 1
    dab6:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
}

void	sound2(int a,int pri)
{
	TriggerFxChannel(1,a,255,1);
    daba:	81 e0       	ldi	r24, 0x01	; 1
    dabc:	60 e1       	ldi	r22, 0x10	; 16
    dabe:	4f ef       	ldi	r20, 0xFF	; 255
    dac0:	21 e0       	ldi	r18, 0x01	; 1
    dac2:	0e 94 32 4b 	call	0x9664	; 0x9664 <TriggerFxChannel>
		   		{
					sound(SFX_BONUS_CLICK,SD_NORMAL);
					sound2(SFX_BONUS_CLICKB,SD_NORMAL);
		   		 	g_bonus-=100;
    dac6:	80 91 ec 0e 	lds	r24, 0x0EEC
    daca:	90 91 ed 0e 	lds	r25, 0x0EED
    dace:	84 56       	subi	r24, 0x64	; 100
    dad0:	90 40       	sbci	r25, 0x00	; 0
    dad2:	90 93 ed 0e 	sts	0x0EED, r25
    dad6:	80 93 ec 0e 	sts	0x0EEC, r24
					add_score(SCORE_BONUS_ADD);
    dada:	8a e0       	ldi	r24, 0x0A	; 10
    dadc:	90 e0       	ldi	r25, 0x00	; 0
    dade:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <add_score>
		   		}
			}
			if (gtimer) gtimer--;
    dae2:	80 91 89 0e 	lds	r24, 0x0E89
    dae6:	90 91 8a 0e 	lds	r25, 0x0E8A
    daea:	00 97       	sbiw	r24, 0x00	; 0
    daec:	29 f0       	breq	.+10     	; 0xdaf8 <do_idle+0x43e>
    daee:	01 97       	sbiw	r24, 0x01	; 1
    daf0:	90 93 8a 0e 	sts	0x0E8A, r25
    daf4:	80 93 89 0e 	sts	0x0E89, r24
			if (gtimer<=0 && g_bonus==0)
    daf8:	80 91 89 0e 	lds	r24, 0x0E89
    dafc:	90 91 8a 0e 	lds	r25, 0x0E8A
    db00:	18 16       	cp	r1, r24
    db02:	19 06       	cpc	r1, r25
    db04:	0c f4       	brge	.+2      	; 0xdb08 <do_idle+0x44e>
    db06:	6f c0       	rjmp	.+222    	; 0xdbe6 <do_idle+0x52c>
    db08:	80 91 ec 0e 	lds	r24, 0x0EEC
    db0c:	90 91 ed 0e 	lds	r25, 0x0EED
    db10:	89 2b       	or	r24, r25
    db12:	09 f0       	breq	.+2      	; 0xdb16 <do_idle+0x45c>
    db14:	68 c0       	rjmp	.+208    	; 0xdbe6 <do_idle+0x52c>
			{
			   	level[current_player]++;
    db16:	e0 91 ad 0e 	lds	r30, 0x0EAD
    db1a:	ff 27       	eor	r31, r31
    db1c:	e7 fd       	sbrc	r30, 7
    db1e:	f0 95       	com	r31
    db20:	ea 52       	subi	r30, 0x2A	; 42
    db22:	f1 4f       	sbci	r31, 0xF1	; 241
    db24:	80 81       	ld	r24, Z
    db26:	8f 5f       	subi	r24, 0xFF	; 255
    db28:	80 83       	st	Z, r24
			   	state = STATE_PREGAME;
    db2a:	82 e0       	ldi	r24, 0x02	; 2
    db2c:	80 93 ba 0e 	sts	0x0EBA, r24
			   	gtimer = SECOND*10;
    db30:	88 e5       	ldi	r24, 0x58	; 88
    db32:	92 e0       	ldi	r25, 0x02	; 2
    db34:	90 93 8a 0e 	sts	0x0E8A, r25
    db38:	80 93 89 0e 	sts	0x0E89, r24
				ClearSubMap(0);
    db3c:	80 e0       	ldi	r24, 0x00	; 0
    db3e:	0e 94 1c 5b 	call	0xb638	; 0xb638 <ClearSubMap>
    db42:	08 95       	ret
			}
			break;

		case STATE_GAMEOVER:
			gtimer--;
    db44:	80 91 89 0e 	lds	r24, 0x0E89
    db48:	90 91 8a 0e 	lds	r25, 0x0E8A
    db4c:	01 97       	sbiw	r24, 0x01	; 1
    db4e:	90 93 8a 0e 	sts	0x0E8A, r25
    db52:	80 93 89 0e 	sts	0x0E89, r24
			if (gtimer<=0)
    db56:	18 16       	cp	r1, r24
    db58:	19 06       	cpc	r1, r25
    db5a:	0c f4       	brge	.+2      	; 0xdb5e <do_idle+0x4a4>
    db5c:	44 c0       	rjmp	.+136    	; 0xdbe6 <do_idle+0x52c>
			{
				scores = hiscore_load_from_eeprom( hiscore_mem );
    db5e:	8b ef       	ldi	r24, 0xFB	; 251
    db60:	9e e0       	ldi	r25, 0x0E	; 14
    db62:	0e 94 c2 5b 	call	0xb784	; 0xb784 <hiscore_load_from_eeprom>
    db66:	90 93 8d 0e 	sts	0x0E8D, r25
    db6a:	80 93 8c 0e 	sts	0x0E8C, r24
				hiscore_check(score[current_player]);
    db6e:	e0 91 ad 0e 	lds	r30, 0x0EAD
    db72:	ff 27       	eor	r31, r31
    db74:	e7 fd       	sbrc	r30, 7
    db76:	f0 95       	com	r31
    db78:	ee 0f       	add	r30, r30
    db7a:	ff 1f       	adc	r31, r31
    db7c:	ed 53       	subi	r30, 0x3D	; 61
    db7e:	f1 4f       	sbci	r31, 0xF1	; 241
    db80:	80 81       	ld	r24, Z
    db82:	91 81       	ldd	r25, Z+1	; 0x01
    db84:	0e 94 98 5c 	call	0xb930	; 0xb930 <hiscore_check>
    db88:	08 95       	ret
			}
			break;

		case STATE_ENTERNAME:
			uze_hiscore_enter();
    db8a:	0e 94 30 61 	call	0xc260	; 0xc260 <uze_hiscore_enter>
    db8e:	08 95       	ret
			break;

		// after hiscore if no more players goto the mainmenu else go back to the game
		case STATE_HISCORE:
			gtimer--;
    db90:	80 91 89 0e 	lds	r24, 0x0E89
    db94:	90 91 8a 0e 	lds	r25, 0x0E8A
    db98:	01 97       	sbiw	r24, 0x01	; 1
    db9a:	90 93 8a 0e 	sts	0x0E8A, r25
    db9e:	80 93 89 0e 	sts	0x0E89, r24
			if (gtimer<=0)
    dba2:	18 16       	cp	r1, r24
    dba4:	19 06       	cpc	r1, r25
    dba6:	fc f0       	brlt	.+62     	; 0xdbe6 <do_idle+0x52c>
			{
				current_player=next_player(current_player);
    dba8:	80 91 ad 0e 	lds	r24, 0x0EAD
    dbac:	0e 94 af 54 	call	0xa95e	; 0xa95e <next_player>
    dbb0:	80 93 ad 0e 	sts	0x0EAD, r24
				if (current_player==-1)
    dbb4:	8f 3f       	cpi	r24, 0xFF	; 255
    dbb6:	41 f4       	brne	.+16     	; 0xdbc8 <do_idle+0x50e>
				{
			  		state=STATE_MAINMENU;
    dbb8:	81 e0       	ldi	r24, 0x01	; 1
    dbba:	80 93 ba 0e 	sts	0x0EBA, r24
					number_of_players=1;
    dbbe:	80 93 0c 10 	sts	0x100C, r24
					draw_title();
    dbc2:	0e 94 4a 5c 	call	0xb894	; 0xb894 <draw_title>
    dbc6:	08 95       	ret
				}
				else
				{
			 	    ClearMap(0);
    dbc8:	80 e0       	ldi	r24, 0x00	; 0
    dbca:	0e 94 36 5b 	call	0xb66c	; 0xb66c <ClearMap>
		   			state=STATE_PREGAME;
    dbce:	82 e0       	ldi	r24, 0x02	; 2
    dbd0:	80 93 ba 0e 	sts	0x0EBA, r24
					gtimer=SECOND;
    dbd4:	8c e3       	ldi	r24, 0x3C	; 60
    dbd6:	90 e0       	ldi	r25, 0x00	; 0
    dbd8:	90 93 8a 0e 	sts	0x0E8A, r25
    dbdc:	80 93 89 0e 	sts	0x0E89, r24
				   	SelectTileset(TILESET_GAME);
    dbe0:	81 e0       	ldi	r24, 0x01	; 1
    dbe2:	0e 94 3a 5c 	call	0xb874	; 0xb874 <SelectTileset>
    dbe6:	08 95       	ret

0000dbe8 <main>:




int main(void)
{
    dbe8:	1f 93       	push	r17
    dbea:	df 93       	push	r29
    dbec:	cf 93       	push	r28
    dbee:	00 d0       	rcall	.+0      	; 0xdbf0 <main+0x8>
    dbf0:	00 d0       	rcall	.+0      	; 0xdbf2 <main+0xa>
    dbf2:	cd b7       	in	r28, 0x3d	; 61
    dbf4:	de b7       	in	r29, 0x3e	; 62
	SetTileTable((char *)ts_data);
    dbf6:	86 e7       	ldi	r24, 0x76	; 118
    dbf8:	92 e0       	ldi	r25, 0x02	; 2
    dbfa:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <SetTileTable>
	SetSpritesTileTable((char *)sp_data);
    dbfe:	88 e3       	ldi	r24, 0x38	; 56
    dc00:	9b e3       	ldi	r25, 0x3B	; 59
    dc02:	0e 94 e5 45 	call	0x8bca	; 0x8bca <SetSpritesTileTable>
	SetSpriteVisibility(true);
    dc06:	81 e0       	ldi	r24, 0x01	; 1
    dc08:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <SetSpriteVisibility>
	InitMusicPlayer(patches);
    dc0c:	83 eb       	ldi	r24, 0xB3	; 179
    dc0e:	9a e6       	ldi	r25, 0x6A	; 106
    dc10:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <InitMusicPlayer>
	SetMasterVolume(0xc0);
    dc14:	80 ec       	ldi	r24, 0xC0	; 192
    dc16:	0e 94 52 48 	call	0x90a4	; 0x90a4 <SetMasterVolume>
	StopSong();
    dc1a:	0e 94 1e 48 	call	0x903c	; 0x903c <StopSong>

	DKFill(&(rect){0,XREZ,0,YREZ}, 0);
    dc1e:	19 82       	std	Y+1, r1	; 0x01
    dc20:	80 ef       	ldi	r24, 0xF0	; 240
    dc22:	8a 83       	std	Y+2, r24	; 0x02
    dc24:	1b 82       	std	Y+3, r1	; 0x03
    dc26:	80 ed       	ldi	r24, 0xD0	; 208
    dc28:	8c 83       	std	Y+4, r24	; 0x04
    dc2a:	ce 01       	movw	r24, r28
    dc2c:	01 96       	adiw	r24, 0x01	; 1
    dc2e:	60 e0       	ldi	r22, 0x00	; 0
    dc30:	0e 94 f4 5a 	call	0xb5e8	; 0xb5e8 <DKFill>

	boot();
    dc34:	0e 94 61 5c 	call	0xb8c2	; 0xb8c2 <boot>
void	Sprites_HideRest()
{
 	u8 i;
 	for (i = free_slot; i < 16; i++)
 	{
 		sprites[i].x = HIDE_X;
    dc38:	10 ef       	ldi	r17, 0xF0	; 240

	boot();

	while(1)
	{
		if (GetVsyncFlag())
    dc3a:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <GetVsyncFlag>
    dc3e:	88 23       	and	r24, r24
    dc40:	e1 f3       	breq	.-8      	; 0xdc3a <main+0x52>
	   	{
			ClearVsyncFlag();
    dc42:	0e 94 00 46 	call	0x8c00	; 0x8c00 <ClearVsyncFlag>
			btnPressed = btnHeld;
    dc46:	80 91 0c 0e 	lds	r24, 0x0E0C
    dc4a:	90 91 0d 0e 	lds	r25, 0x0E0D
    dc4e:	90 93 0b 0e 	sts	0x0E0B, r25
    dc52:	80 93 0a 0e 	sts	0x0E0A, r24
			btnHeld = ReadJoypad(X0);
    dc56:	80 e0       	ldi	r24, 0x00	; 0
    dc58:	0e 94 04 46 	call	0x8c08	; 0x8c08 <ReadJoypad>
    dc5c:	90 93 0d 0e 	sts	0x0E0D, r25
    dc60:	80 93 0c 0e 	sts	0x0E0C, r24
			btnPressed = btnHeld&(btnHeld^btnPressed);
    dc64:	20 91 0a 0e 	lds	r18, 0x0E0A
    dc68:	30 91 0b 0e 	lds	r19, 0x0E0B
    dc6c:	20 95       	com	r18
    dc6e:	30 95       	com	r19
    dc70:	28 23       	and	r18, r24
    dc72:	39 23       	and	r19, r25
    dc74:	30 93 0b 0e 	sts	0x0E0B, r19
    dc78:	20 93 0a 0e 	sts	0x0E0A, r18

		   	do_idle(0);
    dc7c:	80 e0       	ldi	r24, 0x00	; 0
    dc7e:	90 e0       	ldi	r25, 0x00	; 0
    dc80:	0e 94 5d 6b 	call	0xd6ba	; 0xd6ba <do_idle>

			free_slot=0;
    dc84:	10 92 1f 10 	sts	0x101F, r1
		   	draw_idle(0);
    dc88:	80 e0       	ldi	r24, 0x00	; 0
    dc8a:	90 e0       	ldi	r25, 0x00	; 0
    dc8c:	0e 94 db 68 	call	0xd1b6	; 0xd1b6 <draw_idle>
}

void	Sprites_HideRest()
{
 	u8 i;
 	for (i = free_slot; i < 16; i++)
    dc90:	20 91 1f 10 	lds	r18, 0x101F
    dc94:	0d c0       	rjmp	.+26     	; 0xdcb0 <main+0xc8>
 	{
 		sprites[i].x = HIDE_X;
    dc96:	82 2f       	mov	r24, r18
    dc98:	90 e0       	ldi	r25, 0x00	; 0
    dc9a:	fc 01       	movw	r30, r24
    dc9c:	ee 0f       	add	r30, r30
    dc9e:	ff 1f       	adc	r31, r31
    dca0:	ee 0f       	add	r30, r30
    dca2:	ff 1f       	adc	r31, r31
    dca4:	e8 0f       	add	r30, r24
    dca6:	f9 1f       	adc	r31, r25
    dca8:	e4 5d       	subi	r30, 0xD4	; 212
    dcaa:	fb 4f       	sbci	r31, 0xFB	; 251
    dcac:	10 83       	st	Z, r17
}

void	Sprites_HideRest()
{
 	u8 i;
 	for (i = free_slot; i < 16; i++)
    dcae:	2f 5f       	subi	r18, 0xFF	; 255
    dcb0:	20 31       	cpi	r18, 0x10	; 16
    dcb2:	18 f6       	brcc	.-122    	; 0xdc3a <main+0x52>
    dcb4:	f0 cf       	rjmp	.-32     	; 0xdc96 <main+0xae>

0000dcb6 <__udivmodhi4>:
    dcb6:	aa 1b       	sub	r26, r26
    dcb8:	bb 1b       	sub	r27, r27
    dcba:	51 e1       	ldi	r21, 0x11	; 17
    dcbc:	07 c0       	rjmp	.+14     	; 0xdccc <__udivmodhi4_ep>

0000dcbe <__udivmodhi4_loop>:
    dcbe:	aa 1f       	adc	r26, r26
    dcc0:	bb 1f       	adc	r27, r27
    dcc2:	a6 17       	cp	r26, r22
    dcc4:	b7 07       	cpc	r27, r23
    dcc6:	10 f0       	brcs	.+4      	; 0xdccc <__udivmodhi4_ep>
    dcc8:	a6 1b       	sub	r26, r22
    dcca:	b7 0b       	sbc	r27, r23

0000dccc <__udivmodhi4_ep>:
    dccc:	88 1f       	adc	r24, r24
    dcce:	99 1f       	adc	r25, r25
    dcd0:	5a 95       	dec	r21
    dcd2:	a9 f7       	brne	.-22     	; 0xdcbe <__udivmodhi4_loop>
    dcd4:	80 95       	com	r24
    dcd6:	90 95       	com	r25
    dcd8:	bc 01       	movw	r22, r24
    dcda:	cd 01       	movw	r24, r26
    dcdc:	08 95       	ret

0000dcde <__divmodhi4>:
    dcde:	97 fb       	bst	r25, 7
    dce0:	09 2e       	mov	r0, r25
    dce2:	07 26       	eor	r0, r23
    dce4:	0a d0       	rcall	.+20     	; 0xdcfa <__divmodhi4_neg1>
    dce6:	77 fd       	sbrc	r23, 7
    dce8:	04 d0       	rcall	.+8      	; 0xdcf2 <__divmodhi4_neg2>
    dcea:	e5 df       	rcall	.-54     	; 0xdcb6 <__udivmodhi4>
    dcec:	06 d0       	rcall	.+12     	; 0xdcfa <__divmodhi4_neg1>
    dcee:	00 20       	and	r0, r0
    dcf0:	1a f4       	brpl	.+6      	; 0xdcf8 <__divmodhi4_exit>

0000dcf2 <__divmodhi4_neg2>:
    dcf2:	70 95       	com	r23
    dcf4:	61 95       	neg	r22
    dcf6:	7f 4f       	sbci	r23, 0xFF	; 255

0000dcf8 <__divmodhi4_exit>:
    dcf8:	08 95       	ret

0000dcfa <__divmodhi4_neg1>:
    dcfa:	f6 f7       	brtc	.-4      	; 0xdcf8 <__divmodhi4_exit>
    dcfc:	90 95       	com	r25
    dcfe:	81 95       	neg	r24
    dd00:	9f 4f       	sbci	r25, 0xFF	; 255
    dd02:	08 95       	ret

0000dd04 <__udivmodsi4>:
    dd04:	a1 e2       	ldi	r26, 0x21	; 33
    dd06:	1a 2e       	mov	r1, r26
    dd08:	aa 1b       	sub	r26, r26
    dd0a:	bb 1b       	sub	r27, r27
    dd0c:	fd 01       	movw	r30, r26
    dd0e:	0d c0       	rjmp	.+26     	; 0xdd2a <__udivmodsi4_ep>

0000dd10 <__udivmodsi4_loop>:
    dd10:	aa 1f       	adc	r26, r26
    dd12:	bb 1f       	adc	r27, r27
    dd14:	ee 1f       	adc	r30, r30
    dd16:	ff 1f       	adc	r31, r31
    dd18:	a2 17       	cp	r26, r18
    dd1a:	b3 07       	cpc	r27, r19
    dd1c:	e4 07       	cpc	r30, r20
    dd1e:	f5 07       	cpc	r31, r21
    dd20:	20 f0       	brcs	.+8      	; 0xdd2a <__udivmodsi4_ep>
    dd22:	a2 1b       	sub	r26, r18
    dd24:	b3 0b       	sbc	r27, r19
    dd26:	e4 0b       	sbc	r30, r20
    dd28:	f5 0b       	sbc	r31, r21

0000dd2a <__udivmodsi4_ep>:
    dd2a:	66 1f       	adc	r22, r22
    dd2c:	77 1f       	adc	r23, r23
    dd2e:	88 1f       	adc	r24, r24
    dd30:	99 1f       	adc	r25, r25
    dd32:	1a 94       	dec	r1
    dd34:	69 f7       	brne	.-38     	; 0xdd10 <__udivmodsi4_loop>
    dd36:	60 95       	com	r22
    dd38:	70 95       	com	r23
    dd3a:	80 95       	com	r24
    dd3c:	90 95       	com	r25
    dd3e:	9b 01       	movw	r18, r22
    dd40:	ac 01       	movw	r20, r24
    dd42:	bd 01       	movw	r22, r26
    dd44:	cf 01       	movw	r24, r30
    dd46:	08 95       	ret

0000dd48 <do_rand>:
    dd48:	a0 e0       	ldi	r26, 0x00	; 0
    dd4a:	b0 e0       	ldi	r27, 0x00	; 0
    dd4c:	ea ea       	ldi	r30, 0xAA	; 170
    dd4e:	fe e6       	ldi	r31, 0x6E	; 110
    dd50:	0c 94 47 6f 	jmp	0xde8e	; 0xde8e <__prologue_saves__+0x10>
    dd54:	ec 01       	movw	r28, r24
    dd56:	a8 80       	ld	r10, Y
    dd58:	b9 80       	ldd	r11, Y+1	; 0x01
    dd5a:	ca 80       	ldd	r12, Y+2	; 0x02
    dd5c:	db 80       	ldd	r13, Y+3	; 0x03
    dd5e:	a1 14       	cp	r10, r1
    dd60:	b1 04       	cpc	r11, r1
    dd62:	c1 04       	cpc	r12, r1
    dd64:	d1 04       	cpc	r13, r1
    dd66:	41 f4       	brne	.+16     	; 0xdd78 <do_rand+0x30>
    dd68:	84 e2       	ldi	r24, 0x24	; 36
    dd6a:	a8 2e       	mov	r10, r24
    dd6c:	89 ed       	ldi	r24, 0xD9	; 217
    dd6e:	b8 2e       	mov	r11, r24
    dd70:	8b e5       	ldi	r24, 0x5B	; 91
    dd72:	c8 2e       	mov	r12, r24
    dd74:	87 e0       	ldi	r24, 0x07	; 7
    dd76:	d8 2e       	mov	r13, r24
    dd78:	c6 01       	movw	r24, r12
    dd7a:	b5 01       	movw	r22, r10
    dd7c:	2d e1       	ldi	r18, 0x1D	; 29
    dd7e:	33 ef       	ldi	r19, 0xF3	; 243
    dd80:	41 e0       	ldi	r20, 0x01	; 1
    dd82:	50 e0       	ldi	r21, 0x00	; 0
    dd84:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divmodsi4>
    dd88:	27 ea       	ldi	r18, 0xA7	; 167
    dd8a:	31 e4       	ldi	r19, 0x41	; 65
    dd8c:	40 e0       	ldi	r20, 0x00	; 0
    dd8e:	50 e0       	ldi	r21, 0x00	; 0
    dd90:	0e 94 05 6f 	call	0xde0a	; 0xde0a <__mulsi3>
    dd94:	7b 01       	movw	r14, r22
    dd96:	8c 01       	movw	r16, r24
    dd98:	c6 01       	movw	r24, r12
    dd9a:	b5 01       	movw	r22, r10
    dd9c:	2d e1       	ldi	r18, 0x1D	; 29
    dd9e:	33 ef       	ldi	r19, 0xF3	; 243
    dda0:	41 e0       	ldi	r20, 0x01	; 1
    dda2:	50 e0       	ldi	r21, 0x00	; 0
    dda4:	0e 94 24 6f 	call	0xde48	; 0xde48 <__divmodsi4>
    dda8:	ca 01       	movw	r24, r20
    ddaa:	b9 01       	movw	r22, r18
    ddac:	2c ee       	ldi	r18, 0xEC	; 236
    ddae:	34 ef       	ldi	r19, 0xF4	; 244
    ddb0:	4f ef       	ldi	r20, 0xFF	; 255
    ddb2:	5f ef       	ldi	r21, 0xFF	; 255
    ddb4:	0e 94 05 6f 	call	0xde0a	; 0xde0a <__mulsi3>
    ddb8:	6e 0d       	add	r22, r14
    ddba:	7f 1d       	adc	r23, r15
    ddbc:	80 1f       	adc	r24, r16
    ddbe:	91 1f       	adc	r25, r17
    ddc0:	97 ff       	sbrs	r25, 7
    ddc2:	04 c0       	rjmp	.+8      	; 0xddcc <do_rand+0x84>
    ddc4:	61 50       	subi	r22, 0x01	; 1
    ddc6:	70 40       	sbci	r23, 0x00	; 0
    ddc8:	80 40       	sbci	r24, 0x00	; 0
    ddca:	90 48       	sbci	r25, 0x80	; 128
    ddcc:	68 83       	st	Y, r22
    ddce:	79 83       	std	Y+1, r23	; 0x01
    ddd0:	8a 83       	std	Y+2, r24	; 0x02
    ddd2:	9b 83       	std	Y+3, r25	; 0x03
    ddd4:	9b 01       	movw	r18, r22
    ddd6:	3f 77       	andi	r19, 0x7F	; 127
    ddd8:	c9 01       	movw	r24, r18
    ddda:	cd b7       	in	r28, 0x3d	; 61
    dddc:	de b7       	in	r29, 0x3e	; 62
    ddde:	ea e0       	ldi	r30, 0x0A	; 10
    dde0:	0c 94 63 6f 	jmp	0xdec6	; 0xdec6 <__epilogue_restores__+0x10>

0000dde4 <rand_r>:
    dde4:	0e 94 a4 6e 	call	0xdd48	; 0xdd48 <do_rand>
    dde8:	08 95       	ret

0000ddea <rand>:
    ddea:	81 e1       	ldi	r24, 0x11	; 17
    ddec:	91 e0       	ldi	r25, 0x01	; 1
    ddee:	0e 94 a4 6e 	call	0xdd48	; 0xdd48 <do_rand>
    ddf2:	08 95       	ret

0000ddf4 <srand>:
    ddf4:	a0 e0       	ldi	r26, 0x00	; 0
    ddf6:	b0 e0       	ldi	r27, 0x00	; 0
    ddf8:	80 93 11 01 	sts	0x0111, r24
    ddfc:	90 93 12 01 	sts	0x0112, r25
    de00:	a0 93 13 01 	sts	0x0113, r26
    de04:	b0 93 14 01 	sts	0x0114, r27
    de08:	08 95       	ret

0000de0a <__mulsi3>:
    de0a:	62 9f       	mul	r22, r18
    de0c:	d0 01       	movw	r26, r0
    de0e:	73 9f       	mul	r23, r19
    de10:	f0 01       	movw	r30, r0
    de12:	82 9f       	mul	r24, r18
    de14:	e0 0d       	add	r30, r0
    de16:	f1 1d       	adc	r31, r1
    de18:	64 9f       	mul	r22, r20
    de1a:	e0 0d       	add	r30, r0
    de1c:	f1 1d       	adc	r31, r1
    de1e:	92 9f       	mul	r25, r18
    de20:	f0 0d       	add	r31, r0
    de22:	83 9f       	mul	r24, r19
    de24:	f0 0d       	add	r31, r0
    de26:	74 9f       	mul	r23, r20
    de28:	f0 0d       	add	r31, r0
    de2a:	65 9f       	mul	r22, r21
    de2c:	f0 0d       	add	r31, r0
    de2e:	99 27       	eor	r25, r25
    de30:	72 9f       	mul	r23, r18
    de32:	b0 0d       	add	r27, r0
    de34:	e1 1d       	adc	r30, r1
    de36:	f9 1f       	adc	r31, r25
    de38:	63 9f       	mul	r22, r19
    de3a:	b0 0d       	add	r27, r0
    de3c:	e1 1d       	adc	r30, r1
    de3e:	f9 1f       	adc	r31, r25
    de40:	bd 01       	movw	r22, r26
    de42:	cf 01       	movw	r24, r30
    de44:	11 24       	eor	r1, r1
    de46:	08 95       	ret

0000de48 <__divmodsi4>:
    de48:	97 fb       	bst	r25, 7
    de4a:	09 2e       	mov	r0, r25
    de4c:	05 26       	eor	r0, r21
    de4e:	0e d0       	rcall	.+28     	; 0xde6c <__divmodsi4_neg1>
    de50:	57 fd       	sbrc	r21, 7
    de52:	04 d0       	rcall	.+8      	; 0xde5c <__divmodsi4_neg2>
    de54:	57 df       	rcall	.-338    	; 0xdd04 <__udivmodsi4>
    de56:	0a d0       	rcall	.+20     	; 0xde6c <__divmodsi4_neg1>
    de58:	00 1c       	adc	r0, r0
    de5a:	38 f4       	brcc	.+14     	; 0xde6a <__divmodsi4_exit>

0000de5c <__divmodsi4_neg2>:
    de5c:	50 95       	com	r21
    de5e:	40 95       	com	r20
    de60:	30 95       	com	r19
    de62:	21 95       	neg	r18
    de64:	3f 4f       	sbci	r19, 0xFF	; 255
    de66:	4f 4f       	sbci	r20, 0xFF	; 255
    de68:	5f 4f       	sbci	r21, 0xFF	; 255

0000de6a <__divmodsi4_exit>:
    de6a:	08 95       	ret

0000de6c <__divmodsi4_neg1>:
    de6c:	f6 f7       	brtc	.-4      	; 0xde6a <__divmodsi4_exit>
    de6e:	90 95       	com	r25
    de70:	80 95       	com	r24
    de72:	70 95       	com	r23
    de74:	61 95       	neg	r22
    de76:	7f 4f       	sbci	r23, 0xFF	; 255
    de78:	8f 4f       	sbci	r24, 0xFF	; 255
    de7a:	9f 4f       	sbci	r25, 0xFF	; 255
    de7c:	08 95       	ret

0000de7e <__prologue_saves__>:
    de7e:	2f 92       	push	r2
    de80:	3f 92       	push	r3
    de82:	4f 92       	push	r4
    de84:	5f 92       	push	r5
    de86:	6f 92       	push	r6
    de88:	7f 92       	push	r7
    de8a:	8f 92       	push	r8
    de8c:	9f 92       	push	r9
    de8e:	af 92       	push	r10
    de90:	bf 92       	push	r11
    de92:	cf 92       	push	r12
    de94:	df 92       	push	r13
    de96:	ef 92       	push	r14
    de98:	ff 92       	push	r15
    de9a:	0f 93       	push	r16
    de9c:	1f 93       	push	r17
    de9e:	cf 93       	push	r28
    dea0:	df 93       	push	r29
    dea2:	cd b7       	in	r28, 0x3d	; 61
    dea4:	de b7       	in	r29, 0x3e	; 62
    dea6:	ca 1b       	sub	r28, r26
    dea8:	db 0b       	sbc	r29, r27
    deaa:	0f b6       	in	r0, 0x3f	; 63
    deac:	f8 94       	cli
    deae:	de bf       	out	0x3e, r29	; 62
    deb0:	0f be       	out	0x3f, r0	; 63
    deb2:	cd bf       	out	0x3d, r28	; 61
    deb4:	09 94       	ijmp

0000deb6 <__epilogue_restores__>:
    deb6:	2a 88       	ldd	r2, Y+18	; 0x12
    deb8:	39 88       	ldd	r3, Y+17	; 0x11
    deba:	48 88       	ldd	r4, Y+16	; 0x10
    debc:	5f 84       	ldd	r5, Y+15	; 0x0f
    debe:	6e 84       	ldd	r6, Y+14	; 0x0e
    dec0:	7d 84       	ldd	r7, Y+13	; 0x0d
    dec2:	8c 84       	ldd	r8, Y+12	; 0x0c
    dec4:	9b 84       	ldd	r9, Y+11	; 0x0b
    dec6:	aa 84       	ldd	r10, Y+10	; 0x0a
    dec8:	b9 84       	ldd	r11, Y+9	; 0x09
    deca:	c8 84       	ldd	r12, Y+8	; 0x08
    decc:	df 80       	ldd	r13, Y+7	; 0x07
    dece:	ee 80       	ldd	r14, Y+6	; 0x06
    ded0:	fd 80       	ldd	r15, Y+5	; 0x05
    ded2:	0c 81       	ldd	r16, Y+4	; 0x04
    ded4:	1b 81       	ldd	r17, Y+3	; 0x03
    ded6:	aa 81       	ldd	r26, Y+2	; 0x02
    ded8:	b9 81       	ldd	r27, Y+1	; 0x01
    deda:	ce 0f       	add	r28, r30
    dedc:	d1 1d       	adc	r29, r1
    dede:	0f b6       	in	r0, 0x3f	; 63
    dee0:	f8 94       	cli
    dee2:	de bf       	out	0x3e, r29	; 62
    dee4:	0f be       	out	0x3f, r0	; 63
    dee6:	cd bf       	out	0x3d, r28	; 61
    dee8:	ed 01       	movw	r28, r26
    deea:	08 95       	ret

0000deec <_exit>:
    deec:	f8 94       	cli

0000deee <__stop_program>:
    deee:	ff cf       	rjmp	.-2      	; 0xdeee <__stop_program>
